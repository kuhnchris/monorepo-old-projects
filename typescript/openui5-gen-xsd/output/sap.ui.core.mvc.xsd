<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="sap.ui.core.mvc"
xmlns="sap.ui.core.mvc"
    xmlns:n0="sap.ui.base"
    xmlns:n1="sap.ui.core"
elementFormDefault="qualified">
<xs:import schemaLocation="sap.ui.base.xsd" namespace="sap.ui.base" />
    <xs:import schemaLocation="sap.ui.core.xsd" namespace="sap.ui.core" />
      <xs:element name="Controller" type="Controller" />
  <xs:complexType name="Controller">
    <xs:annotation>
      <xs:documentation>
A generic controller implementation for the UI5 Model-View-Controller concept.

Can either be used as a generic controller which is enriched on the fly with methods
and properties (see {@link sap.ui.controller}) or  as a base class for typed controllers.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:EventProvider">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ControllerExtension" type="ControllerExtension" />
  <xs:complexType name="ControllerExtension">
    <xs:annotation>
      <xs:documentation>
Base class for controller extensions.

All controller extensions must {@link #.extend extend} from this base class.
It provides access to the {@link #getView view} of the extended controller as well as
to the view's {@link #byId controls}.

For a more detailed description how to develop controller extensions, see section
{@link topic:21515f09c0324218bb705b27407f5d61 Using Controller Extension} in the documentation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Object">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="HTMLView" type="HTMLView" />
  <xs:complexType name="HTMLView">
    <xs:annotation>
      <xs:documentation>
A view defined/constructed by declarative HTML.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="View">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="JSONView" type="JSONView" />
  <xs:complexType name="JSONView">
    <xs:annotation>
      <xs:documentation>
A View defined using JSON.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="View">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="JSView" type="JSView" />
  <xs:complexType name="JSView">
    <xs:annotation>
      <xs:documentation>
A View defined/constructed by JavaScript code.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="View">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TemplateView" type="TemplateView" />
  <xs:complexType name="TemplateView">
    <xs:annotation>
      <xs:documentation>
A view defined in a template.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="View">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="View" type="View" />
  <xs:complexType name="View">
    <xs:annotation>
      <xs:documentation>
A base class for Views.

Introduces the relationship to a Controller, some basic visual appearance settings like width and height,
and provides lifecycle events.

Views form an ID scope for the elements and controls in their content. They can prefix the IDs of
elements either automatically (e.g. XMLView) or programmatically (using {@link #createId}).
With method {@link #byId}, elements or controls can be found with their view-local ID.
Also see {@link topic:91f28be26f4d1014b6dd926db0e91070 "Support for Unique IDs"} in the documentation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n1:Control">
    <xs:choice>
      <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element name="content" />
      </xs:sequence>
      <xs:any />
    </xs:choice>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="viewName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Name of the View
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayBlock" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether the CSS display should be set to "block".
Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Child Controls of the view
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="controller" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Controller instance to use for this view.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="controllerName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Name of the controller class to use for this view.
If given, it overrides the same information in the view definition (XML, HTML).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="preprocessors" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Preprocessors that the view can use before constructing the view.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resourceBundleName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
(module) Name of a resource bundle that should be loaded for this view
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resourceBundleUrl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
URL of a resource bundle that should be loaded for this view
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resourceBundleLocale" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Locale that should be used to load a resource bundle for this view
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resourceBundleAlias" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Model name under which the resource bundle should be stored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Type of the view
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="definition" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A view definition
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="viewContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated as of 1.56: Use &lt;code&gt;definition&lt;/code&gt; instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="viewData" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Additional configuration data that should be given to the view at construction time
and which will be available early, even before model data or other constructor settings are applied.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="async" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines initialization mode of the view
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterInit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeExit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the view has received the request to destroy itself, but before it has destroyed anything.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterRendering" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the View has been (re-)rendered and its HTML is present in the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeRendering" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="XMLView" type="XMLView" />
  <xs:complexType name="XMLView">
    <xs:annotation>
      <xs:documentation>
A View defined using (P)XML and HTML markup.

&lt;strong&gt;Note:&lt;/strong&gt;&lt;br/&gt;
Be aware that modifications of the content aggregation of this control are not supported due to technical reasons.
This includes calls to all content modifying methods like &lt;code&gt;addContent&gt;&lt;/code&gt; etc., but also the implicit
removal of controls contained by the content aggregation. For example the destruction of a Control via the &lt;code&gt;
destroy&lt;/code&gt; method. All functions can be called but may not work properly or lead to unexpected side effects.

&lt;strong&gt;Note:&lt;/strong&gt;&lt;br/&gt;
On root level, you can only define content for the default aggregation, e.g. without adding the &lt;code&gt;&lt;content&gt;&lt;/code&gt; tag. If
you want to specify content for another aggregation of a view like &lt;code&gt;dependents&lt;/code&gt;, place it in a child
control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="View">
    <xs:attribute name="containingView" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If an XMLView instance is used to represent an HTML subtree of another XMLView,
then that other XMLView is provided with this setting to be able to delegate
View functionality (createId, getController) to that 'real' view.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlNode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If an XMLView instance is used to represent an HTML subtree of another XMLView,
that subtree is provided with this setting.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cache" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Configuration for the XMLView caching.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processingMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The processing mode of the XMLView.
The processing mode "sequential" is implicitly activated for the following type of async views:
     a) root views in the manifest
     b) XMLViews created with the (XML)View.create factory
     c) XMLViews used via routing
Additionally, all declarative nested async subviews are also processed asynchronously.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
</xs:schema>
