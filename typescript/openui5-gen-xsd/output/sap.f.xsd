<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="sap.f"
xmlns="sap.f"
    xmlns:n0="sap.ui.core"
    xmlns:n1="sap.ui.base"
    xmlns:n2="sap.m"
elementFormDefault="qualified">
<xs:import schemaLocation="sap.ui.core.xsd" namespace="sap.ui.core" />
    <xs:import schemaLocation="sap.ui.base.xsd" namespace="sap.ui.base" />
    <xs:import schemaLocation="sap.m.xsd" namespace="sap.m" />
      <xs:element name="Avatar" type="Avatar" />
  <xs:complexType name="Avatar">
    <xs:annotation>
      <xs:documentation>
An image-like control that has different display options for representing images, initials,
and icons.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;Avatar&lt;/code&gt; control allows the usage of different content, shapes, and sizes
depending on the use case.

The content types that can be displayed are either images, icons, or initials. The shape
can be circular or square. There are several predefined sizes, as well as an option to
set a custom size.

&lt;h3&gt;Usage&lt;/h3&gt;

Up to two Latin letters can be displayed as initials in an &lt;code&gt;Avatar&lt;/code&gt;. If there
are more than two letters, or if there's a non-Latin character present, a default image
placeholder will be created.

There are two options for how the displayed image can fit inside the
available area:
&lt;ul&gt;
&lt;li&gt;Cover - the image is scaled to cover all of the available area&lt;/li&gt;
&lt;li&gt;Contain - the image is scaled as large as possible while both
its height and width fit inside the avalable area&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Note:&lt;/b&gt; To set a custom size for the &lt;code&gt;Avatar&lt;/code&gt;, you have to choose the &lt;code&gt;Custom&lt;/code&gt;
value for the &lt;code&gt;displaySize&lt;/code&gt; property. Then, you have to set both the
&lt;code&gt;customDisplaySize&lt;/code&gt; and &lt;code&gt;customFontSize&lt;/code&gt; properties.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Card" type="Card" />
  <xs:complexType name="Card">
    <xs:annotation>
      <xs:documentation>
A control that represents a container with a predefined header and content.

&lt;h3&gt;Overview&lt;/h3&gt;
The card is a container for grouping and displaying information.

&lt;h3&gt;Structure&lt;/h3&gt;
You can control the width and height of the card, using properties.
The &lt;code&gt;Card&lt;/code&gt; has the following aggregations:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt; - can be either a {@link sap.f.cards.Header Header} or a {@link sap.f.cards.NumericHeader NumericHeader}
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; - can be any {@link sap.ui.core.Control Control}.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Guidelines:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A card should represent a task or visualize a specific set of information.&lt;/li&gt;
&lt;li&gt;It is recommended to use cards on home page layouts.&lt;/li&gt;
&lt;li&gt;The card shouldn't be large with a lot of content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;
To show a KPI value or any numeric information, use {@link sap.f.cards.NumericHeader NumericHeader} as a card header.
For any other use cases, use the regular {@link sap.f.cards.Header Header}.
Recommended content:
- List
- Table
- Object information
- Charts
- Timelines
- Images

&lt;i&gt;When to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;When you need multiple cards on a home page layout.&lt;/li&gt;
&lt;li&gt;When you have to achieve simple card visualization.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;When you have to reuse the card between applications. For such cases, use: {@link sap.ui.integration.widgets.Card Integration Card}.&lt;/li&gt;
&lt;li&gt;When you need nesting. For such cases, use: {@link sap.m.Panel Panel}.&lt;/li&gt;
&lt;li&gt;When the card is not part of a card layout. For such cases, use: {@link sap.m.Panel Panel}.&lt;/li&gt;
&lt;li&gt;When you need more header configuration flexibility.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="header" />
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the card.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the height of the card.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerPosition" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the position of the Card Header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the header of the card.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the content of the card.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DynamicPage" type="DynamicPage" />
  <xs:complexType name="DynamicPage">
    <xs:annotation>
      <xs:documentation>
A layout control, representing a web page, consisting of a title, header with dynamic behavior, a content area, and an optional floating footer.

&lt;h3&gt;Overview&lt;/h3&gt;

The control consist of several components:

&lt;ul&gt;&lt;li&gt;{@link sap.f.DynamicPageTitle DynamicPageTitle} - consists of a heading
on the left side, content in the middle, and actions on the right. The displayed
content changes based on the current mode of the {@link sap.f.DynamicPageHeader
DynamicPageHeader}.&lt;/li&gt;
&lt;li&gt;{@link sap.f.DynamicPageHeader DynamicPageHeader} - a generic container, which
can contain a single layout control and does not care about the content alignment
and responsiveness. The header works in two modes - expanded and snapped and its
behavior can be adjusted with the help of different properties.&lt;/li&gt;
&lt;li&gt;Content area - a generic container, which can have a single UI5 layout control
and does not care about the content alignment and responsiveness.&lt;/li&gt;
&lt;li&gt;Footer - positioned at the bottom with a small offset and used for additional
actions, the footer floats above the content. It can be any {@link sap.m.IBar}
control.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

Use the &lt;code&gt;DynamicPage&lt;/code&gt; if you need to have a title, that is always visible
and a header, that has configurable Expanding/Snapping functionality.
If you don't need the Expanding/Snapping functionality it is better to use the
{@link sap.m.Page} as a lighter control.

&lt;ul&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;li&gt;If you're displaying a {@link sap.m.FlexBox} with non-adaptive content
(doesn't stretch to fill the available space), it is recommended to set the
&lt;code&gt;fitContainer&lt;/code&gt; property of the {@link sap.m.FlexBox FlexBox} to
&lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you are displaying a {@link sap.ui.table.Table}, keep in mind that it is
non-adaptive and may cause unpredicted behavior for the &lt;code&gt;DynamicPage&lt;/code&gt;
on smaller screen sizes, such as mobile.&lt;/li&gt;
&lt;li&gt;Snapping of the {@link sap.f.DynamicPageTitle DynamicPageTitle} is not supported in the following case:
When the &lt;code&gt;DynamicPage&lt;/code&gt; has a scroll bar, the control usually scrolls to the snapping point - the point,
where the {@link sap.f.DynamicPageHeader DynamicPageHeader} is scrolled out completely.
However, when there is a scroll bar, but not enough content to reach the snapping point,
the snapping is not possible using scrolling.&lt;/li&gt;
&lt;li&gt;When using {@link sap.ui.layout.form.Form},
{@link sap.m.Panel}, {@link sap.m.Table} and {@link sap.m.List} controls in the content of
&lt;code&gt;DynamicPage&lt;/code&gt;, you need to adjust their left text offset if you want to achieve vertical alignment
between the &lt;code&gt;sap.f.DynamicPageHeader&lt;/code&gt;`s  content and &lt;code&gt;DynamicPage&lt;/code&gt;`s content.
For more information, see the documentation for the &lt;code&gt;content&lt;/code&gt; aggregation.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPage&lt;/code&gt; depends on the behavior of
the content that is displayed. To adjust the &lt;code&gt;DynamicPage&lt;/code&gt; content
padding, the &lt;code&gt;sapUiContentPadding&lt;/code&gt;, &lt;code&gt;sapUiNoContentPadding&lt;/code&gt;,
and &lt;code&gt;sapUiResponsiveContentPadding&lt;/code&gt; CSS classes can be used.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="title" />
      <xs:element name="header" />
      <xs:element name="content" />
      <xs:element name="footer" />
      <xs:element name="landmarkInfo" />
      <xs:element name="_scrollBar" />
    </xs:sequence>
    <xs:attribute name="preserveHeaderStateOnScroll" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Preserves the current header state when scrolling.
For example, if the user expands the header by clicking on the title and then scrolls down the page, the header will remain expanded.

&lt;b&gt;Note:&lt;/b&gt; Based on internal rules, the value of the property is not always taken into account - for example,
when the control is rendered on tablet or mobile and the control`s title and header
are with height larger than the given threshold.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerExpanded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the header is expanded.

The header can be also expanded/collapsed by user interaction,
which requires the property to be internally mutated by the control to reflect the changed state.

&lt;b&gt;Note:&lt;/b&gt; As of version 1.48, you can initialize the control in collapsed header state by setting this property to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="toggleHeaderOnTitleClick" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the user can switch between the expanded/collapsed states of the
&lt;code&gt;DynamicPageHeader&lt;/code&gt; by clicking on the &lt;code&gt;DynamicPageTitle&lt;/code&gt;
or by using the expand/collapse visual indicators,
positioned at the bottom of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; and the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.
If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;DynamicPageTitle&lt;/code&gt; is not clickable,
the visual indicators are not available and the application
must provide other means for expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;, if necessary.

&lt;b&gt;Note: &lt;/b&gt; This property is taken into account only if a non-empty &lt;code&gt;header&lt;/code&gt; aggregation is provided.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showFooter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the footer is visible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the background color of &lt;code&gt;DynamicPage&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fitContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optimizes &lt;code&gt;DynamicPage&lt;/code&gt; responsiveness on small screens and behavior
when expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; It is recommended to use this property when displaying content
of adaptive controls that stretch to fill the available space. Such controls may be
{@link sap.ui.table.Table} and {@link sap.ui.table.AnalyticalTable} depending on their settings.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;DynamicPage&lt;/code&gt; title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;DynamicPage&lt;/code&gt; header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;DynamicPage&lt;/code&gt; content.

&lt;b&gt;Note: &lt;/b&gt; You can change the default paddings by adding the following CSS classes:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sapUiContentPadding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sapUiNoContentPadding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sapUiResponsiveContentPadding&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
For more information, see
{@link topic:c71f6df62dae47ca8284310a6f5fc80a Using Container Content Padding CSS Classes}.

&lt;b&gt;Note:&lt;/b&gt; The SAP Fiori Design guidelines require that the
&lt;code&gt;DynamicPageHeader&lt;/code&gt;'s content and the &lt;code&gt;DynamicPage&lt;/code&gt;'s content
are aligned vertically. When using {@link sap.ui.layout.form.Form},
{@link sap.m.Panel}, {@link sap.m.Table} and {@link sap.m.List} in the content area of
&lt;code&gt;DynamicPage&lt;/code&gt;, if the content is not already aligned, you need to adjust
their left text offset to achieve the vertical alignment. To do this, apply the
&lt;code&gt;sapFDynamicPageAlignContent&lt;/code&gt; CSS class to them and set their &lt;code&gt;width&lt;/code&gt;
property to &lt;code&gt;auto&lt;/code&gt; (if not set by default).

Example:

&lt;pre&gt;
&lt;code&gt; &lt;Panel class=ÔÇ£sapFDynamicPageAlignContentÔÇØ width=ÔÇ£autoÔÇØ&gt;&lt;/Panel&gt; &lt;/code&gt;
&lt;/pre&gt;

Please keep in mind that the alignment is not possible in the following cases:
&lt;ul&gt;
&lt;li&gt; When the controls are placed in an {@link sap.ui.layout.Grid} or other layout
controls that use &lt;code&gt;overflow:hidden&lt;/code&gt; CSS property&lt;/li&gt;
&lt;li&gt; In case any of the following CSS classes is applied to
&lt;code&gt;DynamicPage&lt;/code&gt;: &lt;code&gt;sapUiContentPadding&lt;/code&gt;,
&lt;code&gt;sapUiNoContentPadding&lt;/code&gt; or &lt;code&gt;sapUiResponsiveContentPadding&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;DynamicPage&lt;/code&gt; floating footer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="landmarkInfo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Accessible landmark settings to be applied on the containers of the &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set, no landmarks will be written.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_scrollBar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;DynamicPage&lt;/code&gt; custom &lt;code&gt;ScrollBar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DynamicPageAccessibleLandmarkInfo" type="DynamicPageAccessibleLandmarkInfo" />
  <xs:complexType name="DynamicPageAccessibleLandmarkInfo">
    <xs:annotation>
      <xs:documentation>
Settings for accessible landmarks which can be applied to the container elements of a &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

These landmarks are used by assistive technologies (such as screen readers) to provide a meaningful page overview.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DynamicPageHeader" type="DynamicPageHeader" />
  <xs:complexType name="DynamicPageHeader">
    <xs:annotation>
      <xs:documentation>
Header of the {@link sap.f.DynamicPage}.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DynamicPageHeader&lt;/code&gt; control is part of the {@link sap.f.DynamicPage} family
and is used to serve as header of the {@link sap.f.DynamicPage DynamicPage}.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;DynamicPageHeader&lt;/code&gt; can hold any layout control and has  two states - expanded
and collapsed (snapped). The switching between these states happens when:

&lt;ul&gt;&lt;li&gt;the user scrolls below its bottom margin&lt;/li&gt;
&lt;li&gt;the user clicks on the {@link sap.f.DynamicPageTitle DynamicPageTitle}&lt;/li&gt;
&lt;li&gt;through the {@link sap.f.DynamicPage DynamicPage} property &lt;code&gt;headerExpanded&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPageHeader&lt;/code&gt; depends on the behavior of the
content that is displayed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="_pinButton" />
      <xs:element name="_collapseButton" />
    </xs:sequence>
    <xs:attribute name="pinnable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the header is pinnable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the background color of the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The default value of &lt;code&gt;backgroundDesign&lt;/code&gt; property is null.
If the property is not set, the color of the background is &lt;code&gt;@sapUiObjectHeaderBackground&lt;/code&gt;,
which depends on the specific theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of the header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_pinButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The pin/unpin button in the header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_collapseButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Visual indication for expanding/collapsing.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DynamicPageTitle" type="DynamicPageTitle" />
  <xs:complexType name="DynamicPageTitle">
    <xs:annotation>
      <xs:documentation>
Title of the {@link sap.f.DynamicPage}.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DynamicPageTitle&lt;/code&gt; control is part of the {@link sap.f.DynamicPage}
family and is used to serve as title of the {@link sap.f.DynamicPage DynamicPage}.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;DynamicPageTitle&lt;/code&gt; can hold any control and displays the most important
information regarding the object that will always remain visible while scrolling.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;actions&lt;/code&gt; aggregation accepts any UI5 control, but it`s
recommended to use controls, suitable for {@link sap.m.Toolbar} and {@link sap.m.OverflowToolbar}.

If the &lt;code&gt;toggleHeaderOnTitleClick&lt;/code&gt; property of the {@link sap.f.DynamicPage DynamicPage}
is set to &lt;code&gt;true&lt;/code&gt;, the user can switch between the expanded/collapsed states of the
{@link sap.f.DynamicPageHeader DynamicPageHeader} by clicking on the &lt;code&gt;DynamicPageTitle&lt;/code&gt;
or by using the expand/collapse visual indicators, positioned at the bottom of the
&lt;code&gt;DynamicPageTitle&lt;/code&gt; and the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;DynamicPageTitle&lt;/code&gt; is not clickable,
the visual indicators are not available, and the app must provide other means for
expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;, if necessary.

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; depends on the behavior of the
content that is displayed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="heading" />
      <xs:element name="snappedHeading" />
      <xs:element name="expandedHeading" />
      <xs:element name="actions" />
      <xs:element name="navigationActions" />
      <xs:element name="content" />
      <xs:element name="snappedContent" />
      <xs:element name="expandedContent" />
      <xs:element name="snappedTitleOnMobile" />
      <xs:element name="breadcrumbs" />
      <xs:element name="_actionsToolbar" />
      <xs:element name="_navActionsToolbar" />
      <xs:element name="_navActionsToolbarSeparator" />
      <xs:element name="_expandButton" />
      <xs:element name="_snappedTitleOnMobileIcon" />
      <xs:element name="_focusSpan" />
    </xs:sequence>
    <xs:attribute name="primaryArea" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines which of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; areas (Begin, Middle) is primary.

&lt;b&gt;Note:&lt;/b&gt; The primary area is shrinking at lower rate, remaining visible as much as it can.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="areaShrinkRatio" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Assigns shrinking ratio to the &lt;code&gt;DynamicPageTitle&lt;/code&gt; areas (Heading, Content, Actions).
The greater value a section has the faster it shrinks when the screen size is being reduced.

The value must be set in &lt;code&gt;Heading:Content:Actions&lt;/code&gt; format where Title, Content and Actions
are numbers greater than or equal to 0. If set to 0, the respective area will not shrink.

For example, if &lt;code&gt;2:7:1&lt;/code&gt; is set, the Content area will shrink seven times faster than
the Actions area. So, when all three areas have width of 500px and the available space is reduced by 100px
the Title area will reduced by 20px, the Content area - by 70px and the Actions area - by 10px.

If all the areas have assigned values greater than 1, the numbers are scaled so that at least one of them
is equal to 1. For example, value of &lt;code&gt;2:4:8&lt;/code&gt; is equal to &lt;code&gt;1:2:4&lt;/code&gt;.

&lt;Note:&gt; When this property is set the &lt;code&gt;primaryArea&lt;/code&gt; property has no effect.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the background color of the &lt;code&gt;DynamicPageTitle&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The default value of &lt;code&gt;backgroundDesign&lt;/code&gt; property is null.
If the property is not set, the color of the background is &lt;code&gt;@sapUiObjectHeaderBackground&lt;/code&gt;,
which depends on the specific theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="heading" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;heading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area
and is displayed in both expanded and collapsed (snapped) states of the header.
Use this aggregation to display a title (or any other UI5 control that serves
as a heading) that has to be present in both expanded and collapsed states of the header.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;heading&lt;/code&gt; is mutually exclusive with &lt;code&gt;snappedHeading&lt;/code&gt;
and &lt;code&gt;expandedHeading&lt;/code&gt;. If &lt;code&gt;heading&lt;/code&gt; is provided, both
&lt;code&gt;snappedHeading&lt;/code&gt; and &lt;code&gt;expandedHeading&lt;/code&gt; are ignored.
&lt;code&gt;heading&lt;/code&gt; is useful when the content of &lt;code&gt;snappedHeading&lt;/code&gt; and
&lt;code&gt;expandedHeading&lt;/code&gt; needs to be the same as it replaces them both.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content
overrides this aggregation when the control is viewed on a phone mobile device and
the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="snappedHeading" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;snappedHeading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area
and is displayed when the header is in collapsed (snapped) state only.
Use this aggregation to display a title (or any other UI5 control that serves
as a heading) that has to be present in collapsed state only.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;In order for &lt;code&gt;snappedHeading&lt;/code&gt; to be taken into account,
&lt;code&gt;heading&lt;/code&gt; has to be empty. Combine &lt;code&gt;snappedHeading&lt;/code&gt; with
&lt;code&gt;expandedHeading&lt;/code&gt; to switch content when the header switches state.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content
overrides this aggregation when the control is viewed on a phone mobile device and
the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expandedHeading" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;expandedHeading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area
and is displayed when the header is in expanded state only.
Use this aggregation to display a title (or any other UI5 control that serves
as a heading) that has to be present in expanded state only.

&lt;b&gt;Note:&lt;/b&gt; In order for &lt;code&gt;expandedHeading&lt;/code&gt; to be taken into account,
&lt;code&gt;heading&lt;/code&gt; has to be empty. Combine &lt;code&gt;expandedHeading&lt;/code&gt; with
&lt;code&gt;snappedHeading&lt;/code&gt; to switch content when the header switches state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;DynamicPageTitle&lt;/code&gt; actions.
&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;actions&lt;/code&gt; aggregation accepts any UI5 control, but it`s recommended to use controls,
suitable for {@link sap.m.Toolbar} and {@link sap.m.OverflowToolbar}.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its
content overrides this aggregation when the control is viewed on a phone mobile
device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navigationActions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;DynamicPageTitle&lt;/code&gt; navigation actions.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;navigationActions&lt;/code&gt; position depends on the control size.
If the control size is 1280px or bigger, they are rendered right next to the
&lt;code&gt;actions&lt;/code&gt;. Otherwise, they are rendered in the top-right area, above the
&lt;code&gt;actions&lt;/code&gt;. If a large number of elements(buttons) are used, there could
be visual degradations as the space for the &lt;code&gt;navigationActions&lt;/code&gt; is
limited.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its content
overrides this aggregation when the control is viewed on a phone mobile device and
the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; middle area
and displayed in both expanded and collapsed (snapped) states.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its
content overrides this aggregation when the control is viewed on a phone mobile
device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="snappedContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; in collapsed (snapped) state.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;snappedTitleOnMobile&lt;/code&gt; aggregation is set, its
content overrides this aggregation when the control is viewed on a phone mobile
device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expandedContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; in expanded state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="snappedTitleOnMobile" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The only content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt;
when it is viewed on a phone mobile device and the &lt;code&gt;DynamicPageHeader&lt;/code&gt;
is in collapsed (snapped) state.

Using this aggregation enables you to provide a simple, single-line title that
takes less space on the smaller phone screens when the
&lt;code&gt;DynamicPageHeader&lt;/code&gt; is in its collapsed (snapped) state.

&lt;b&gt;Note:&lt;/b&gt; The content set in this aggregation overrides all the other
&lt;code&gt;DynamicPageTitle&lt;/code&gt; aggregations and is only visible on phone mobile
devices in collapsed (snapped) state of the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="breadcrumbs" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The breadcrumbs displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; top-left area.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_actionsToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal &lt;code&gt;OverflowToolbar&lt;/code&gt; for the &lt;code&gt;DynamicPageTitle&lt;/code&gt; actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_navActionsToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal &lt;code&gt;Toolbar&lt;/code&gt; for the &lt;code&gt;DynamicPageTitle&lt;/code&gt; navigation actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_navActionsToolbarSeparator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal &lt;code&gt;ToolbarSeparator&lt;/code&gt; to separate the &lt;code&gt;actions&lt;/code&gt; and &lt;code&gt;navigationActions&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_expandButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Visual indication for expanding.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_snappedTitleOnMobileIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Visual indication for expanding while using SnappedTitleOnMobile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_focusSpan" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal span tag for correct representation of the accessibility requirements.
Upon focus, the &lt;code&gt;DynamicPageTitle&lt;/code&gt; control has the focus outline, but the &lt;code&gt;_focusSpan&lt;/code&gt; is the real focused DOM element.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stateChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the title state (expanded/collapsed) is toggled by user interaction.
For example, scrolling, title clicking/tapping, using expand/collapse button.

Also fired when the developer toggles the title state by programmatically
changing the scroll position of the scrollbar of &lt;code&gt;DynamicPage&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FlexibleColumnLayout" type="FlexibleColumnLayout" />
  <xs:complexType name="FlexibleColumnLayout">
    <xs:annotation>
      <xs:documentation>
Implements the master-detail-detail paradigm by displaying up to three pages in separate columns.

&lt;h3&gt;Overview&lt;/h3&gt;

The control is logically similar to {@link sap.m.SplitContainer} with the difference that it capable of handling
three columns (referred to as &lt;code&gt;Begin&lt;/code&gt;, &lt;code&gt;Mid&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt;) rather than two
(&lt;code&gt;Master&lt;/code&gt;, &lt;code&gt;Detail&lt;/code&gt;). The width of the three columns is variable.

There are several possible layouts that can be changed either with the control's API, or by the user with the help of layout arrows.

Internally the control makes use of three instances of {@link sap.m.NavContainer}, thus forming the three columns.

&lt;h3&gt;Usage&lt;/h3&gt;

Use this control for applications that need to display several logical levels of related information side by side (e.g. list of items, item, sub-item, etc.).
The control is flexible in a sense that the application can focus the user's attention on one particular column by making it larger or even fullscreen.

The columns are accessible with the &lt;code&gt;beginColumnPages&lt;/code&gt;, &lt;code&gt;midColumnPages&lt;/code&gt; and &lt;code&gt;endColumnPages&lt;/code&gt; aggregations.

The relative sizes and the visibility of the three columns are determined based on the value of the {@link sap.f.LayoutType layout} property.

Changes to the layout due to user interaction are communicated to the app with the &lt;code&gt;stateChange&lt;/code&gt; event.

&lt;ul&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;li&gt;To easily implement the recommended UX design of a &lt;code&gt;sap.f.FlexibleColumnLayout&lt;/code&gt;-based app,
you can use the &lt;code&gt;sap.f.FlexibleColumnLayoutSemanticHelper&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;To facilitate the navigation and view loading, you can use the {@link sap.f.routing.Router} &lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The control automatically displays the maximum possible number of columns based on the device size and current &lt;code&gt;layout&lt;/code&gt;.
The app does not need to take into consideration the current device/screen size, but only to add content to the
columns and change the value of the &lt;code&gt;layout&lt;/code&gt; property.

For detailed information, see {@link sap.f.LayoutType LayoutType} enumeration.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FlexibleColumnLayoutSemanticHelper" type="FlexibleColumnLayoutSemanticHelper" />
  <xs:complexType name="FlexibleColumnLayoutSemanticHelper">
    <xs:annotation>
      <xs:documentation>
Helper class, facilitating the implementation of the recommended UX design of a &lt;code&gt;sap.f.FlexibleColumnLayout&lt;/code&gt;-based app.

&lt;b&gt;Note:&lt;/b&gt; Using this class is not mandatory in order to build an app with &lt;code&gt;sap.f.FlexibleColumnLayout&lt;/code&gt;, but exists for convenience only.

&lt;ul&gt;The usage of &lt;code&gt;sap.f.FlexibleColumnLayoutSemanticHelper&lt;/code&gt; revolves around two main methods:
&lt;li&gt;&lt;code&gt;getCurrentUIState&lt;/code&gt;Suggests which action buttons to show in each &lt;code&gt;sap.f.FlexibleColumnLayout&lt;/code&gt; column,
based on the current control state (number and visibility of columns, layout, etc..)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getNextUIState&lt;/code&gt;Suggests which &lt;code&gt;layout&lt;/code&gt; to use when navigating to another view level (e.g. from one view to two views).&lt;/li&gt;&lt;/ul&gt;

Sample usage of the class:

&lt;pre&gt;
&lt;code&gt;
 var helper = sap.f.FlexibleColumnLayoutSemanticHelper.getInstanceFor(myFlexibleColumnLayout);
 helper.getCurrentUIState();
 helper.getNextUIState(2);
 helper.getNextUIState(0);
&lt;/code&gt;
&lt;/pre&gt;

Calling &lt;code&gt;getCurrentUIState()&lt;/code&gt; will return information which action buttons (Close, FullScreen, ExitFullScreen)
must be currently shown in which column, according to UX guidelines, as well as to what layout clicking them should lead.

Calling &lt;code&gt;getNextUIState(2)&lt;/code&gt; will return information about the expected layout and action buttons if the
application should display three views (master-detail-detail), based on the current state.

Similarly, calling &lt;code&gt;getNextUIState(0)&lt;/code&gt; will return information about the expected layout and action buttons
if the application should display the initial view only (master), based on the current state.

For more information, see {@link sap.f.FlexibleColumnLayoutSemanticHelper#getCurrentUIState} and {@link sap.f.FlexibleColumnLayoutSemanticHelper#getNextUIState}
      </xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:element name="GridContainer" type="GridContainer" />
  <xs:complexType name="GridContainer">
    <xs:annotation>
      <xs:documentation>
A layout container control used for aligning items with various sizes in a simple grid.

&lt;h3&gt;Overview&lt;/h3&gt;

The control is used to align tiles, cards and other controls in configuration, such as a home page or a dashboard.
It represents a grid layout with specific row and column sizes, in which the items can take any number of rows and columns.

The number of columns and rows each item takes can be configured with the use of the &lt;code&gt;{@link sap.f.GridContainerItemLayoutData}&lt;/code&gt;.

All rows have the same height and all columns have the same width. Their sizes can be configured with the use of the &lt;code&gt;layout&lt;/code&gt; aggregation and &lt;code&gt;{@link sap.f.GridContainerSettings}&lt;/code&gt;.

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;i&gt;When to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;For aligning home page and dashboard items like Tiles and Cards in a simple grid system with equally sized rows and columns.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;If a more complex layout grid system, where columns and rows may vary in size, is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Example:&lt;/h3&gt;
&lt;pre&gt;
&lt;f:GridContainer&gt;
	&lt;f:layout&gt;
		&lt;f:GridContainerSettings rowSize=&quot;5rem&quot; columnSize=&quot;5rem&quot; gap=&quot;1rem&quot; /&gt;
	&lt;/f:layout&gt;
	&lt;f:layoutS&gt;
		&lt;f:GridContainerSettings rowSize=&quot;4rem&quot; columnSize=&quot;4rem&quot; gap=&quot;0.5rem&quot; /&gt;
	&lt;/f:layoutS&gt;
	&lt;f:items&gt;
		&lt;GenericTile header=&quot;Sales Fulfillment&quot;&gt;
			&lt;layoutData&gt;
				&lt;f:GridContainerItemLayoutData rows=&quot;2&quot; columns=&quot;2&quot; /&gt;
			&lt;/layoutData&gt;
		&lt;/GenericTile&gt;
		&lt;w:Card manifest=&quot;url-to-manifest&quot;&gt;
			&lt;w:layoutData&gt;
				&lt;f:GridContainerItemLayoutData rows=&quot;6&quot; columns=&quot;3&quot; /&gt;
			&lt;/w:layoutData&gt;
		&lt;/w:Card&gt;
		&lt;Panel&gt;
			&lt;layoutData&gt;
				&lt;f:GridContainerItemLayoutData columns=&quot;4&quot; /&gt;
			&lt;/layoutData&gt;
			&lt;Text text=&quot;Sales information&quot; /&gt;
		&lt;/Panel&gt;
	&lt;/f:items&gt;
&lt;/f:GridContainer&gt;
&lt;/pre&gt;

&lt;h3&gt;Drag and drop:&lt;/h3&gt;
Drag and drop is enabled for the &lt;code&gt;GridContainer&lt;/code&gt; with enhanced visualization and interaction, better suited for grid items. This is configured by using the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt;.

Similar to the &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt;, &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; has to be added to the &lt;code&gt;dragDropConfig&lt;/code&gt; aggregation, by using &lt;code&gt;{@link sap.ui.core.Element#addDragDropConfig}&lt;/code&gt;.

Both &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt; and &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; can be used to configure drag and drop.
The difference is that the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; will provide a drop indicator, which mimics the size of the dragged item and shows the potential drop position inside the grid.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="layout" />
      <xs:element name="layoutXS" />
      <xs:element name="layoutS" />
      <xs:element name="layoutM" />
      <xs:element name="layoutL" />
      <xs:element name="layoutXL" />
      <xs:element name="_defaultLayout" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerQuery" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt; the current range (large, medium or small) is defined by the size of the
container surrounding the &lt;code&gt;GridContainer&lt;/code&gt;, instead of the device screen size (media Query).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="snapToRow" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Should the items stretch to fill the rows that they occupy, or not.

If set to &lt;code&gt;true&lt;/code&gt; the items will stretch.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowDenseFill" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Increases the density when arranging the items. Smaller items will take up all of the available space, ignoring their order.

&lt;b&gt;Note:&lt;/b&gt; The order of the items is ignored. An item which is normally at the bottom, can appear on top.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inlineBlockLayout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Makes the grid items act like an inline-block elements. They will be arranged in rows with height equal to the highest item in the row.

&lt;b&gt;Note:&lt;/b&gt; If set to &lt;code&gt;true&lt;/code&gt; the properties &lt;code&gt;rowSize&lt;/code&gt; for grid layout, and &lt;code&gt;minRows&lt;/code&gt; and &lt;code&gt;rows&lt;/code&gt; per item will be ignored.

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items contained by the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.f.GridContainerSettings applied if no settings are provided for a specific size.

If no layout is given, a default layout will be used. See the default values for &lt;code&gt;sap.f.GridContainerSettings&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; It is not possible to reuse the same instance of &lt;code&gt;GridContainerSettings&lt;/code&gt; for several layouts. New instance has to be created for each of them. This is caused by the fact that one object can exist in only a single aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutXS" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.f.GridContainerSettings applied for size "XS". Range: up to 374px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutS" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.f.GridContainerSettings applied for size "S". Range: 375px - 599px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutM" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.f.GridContainerSettings applied for size "M". Range: 600px - 1023px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.f.GridContainerSettings applied for size "L". Range: 1023px - 1439px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutXL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.f.GridContainerSettings applied for size "XL". Range: from 1440px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_defaultLayout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Default sap.f.GridContainerSettings
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the currently active GridSettings change.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GridContainerItemLayoutData" type="GridContainerItemLayoutData" />
  <xs:complexType name="GridContainerItemLayoutData">
    <xs:annotation>
      <xs:documentation>
Holds layout data for an item inside a &lt;code&gt;sap.f.GridContainer&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:LayoutData">
    <xs:attribute name="columns" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the number of columns, which the item should take

&lt;b&gt;Note:&lt;/b&gt; Make sure that the item does not have more columns than the total columns in the grid.
Use {@link sap.f.GridContainer#attachLayoutChange} or a resize listener to handle when columns count is changed for the grid.
If item has more columns at some point, they will be automatically reduced to the total grid columns. This is done to prevent broken layout (grid blowout) that affects all items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minRows" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the minimum number of rows, which the item should take.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rows" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the number of rows, which the item should take.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GridContainerSettings" type="GridContainerSettings" />
  <xs:complexType name="GridContainerSettings">
    <xs:annotation>
      <xs:documentation>
Holds a set of settings that define the dimensions of &lt;code&gt;sap.f.GridContainer&lt;/code&gt;.

Can be used to define the sizes of columns and rows for different screen sizes, by using the &lt;code&gt;layout&lt;/code&gt; aggregations of &lt;code&gt;sap.f.GridContainer&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n1:ManagedObject">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GridList" type="GridList" />
  <xs:complexType name="GridList">
    <xs:annotation>
      <xs:documentation>
A list-based control with grid layout capabilities.

&lt;h3&gt;Overview&lt;/h3&gt;

The control is based on {@link sap.m.ListBase} and adds the flexibility to configure different grid layouts. The layout used is based
on the CSS display grid and the control has a default configuration.

With &lt;code&gt;customLayout&lt;/code&gt; aggregation it is possible to use:
&lt;ul&gt;
&lt;li&gt;Predefined simple grid layouts such as {@link sap.ui.layout.cssgrid.GridBoxLayout GridBoxLayout}&lt;/li&gt;
&lt;li&gt;Flexible grid layouts, such as {@link sap.ui.layout.cssgrid.GridBasicLayout GridBasicLayout} or {@link sap.ui.layout.cssgrid.GridResponsiveLayout GridResponsiveLayout} which reveal the native-browser CSS display grid APIs. For more information, see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout MDN web docs: CSS Grid Layout}&lt;/li&gt;
&lt;/ul&gt;

Every item can override its size by specifying the number of columns and/or rows it will take in the grid.
This is done using {@link sap.ui.layout.cssgrid.GridItemLayoutData GridItemLayoutData}.

For best visualization, items of type {@link sap.f.GridListItem sap.f.GridListItem} should be used inside the &lt;code&gt;items&lt;/code&gt; aggregation.

&lt;h3&gt;Usage&lt;/h3&gt;

For general cases, use the default grid configuration of the &lt;code&gt;GridList&lt;/code&gt;.
For Box case (equal sized items), use &lt;code&gt;customLayout&lt;/code&gt; aggregation with {@link sap.ui.layout.cssgrid.GridBoxLayout GridBoxLayout}
For Grids which need different configurations based on available width, use &lt;code&gt;customLayout&lt;/code&gt; aggregation with {@link sap.ui.layout.cssgrid.GridResponsiveLayout GridResponsiveLayout}
To set a specific position to an item or define its dimensions in the grid, pass &lt;code&gt;layoutData&lt;/code&gt; of type {@link sap.ui.layout.cssgrid.GridItemLayoutData GridItemLayoutData}

&lt;i&gt;When to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;If {@link sap.m.ListBase} features are required and the items must be positioned in a grid layout&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;If a list layout is required, use {@link sap.m.List} instead.
&lt;li&gt;If only the layout is required, use {@link sap.ui.layout.cssgrid.CSSGrid} instead.
&lt;/ul&gt;

&lt;h3&gt;Drag and drop:&lt;/h3&gt;
Drag and drop is enabled for the &lt;code&gt;GridList&lt;/code&gt; with enhanced visualization and interaction, better suited for grid items. This is configured by using the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt;.

Similar to the &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt;, &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; has to be added to the &lt;code&gt;dragDropConfig&lt;/code&gt; aggregation, by using &lt;code&gt;{@link sap.ui.core.Element#addDragDropConfig}&lt;/code&gt;.

Both &lt;code&gt;{@link sap.ui.core.dnd.DropInfo}&lt;/code&gt; and &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; can be used to configure drag and drop.
The difference is that the &lt;code&gt;{@link sap.f.dnd.GridDropInfo}&lt;/code&gt; will provide a drop indicator, which mimics the size of the dragged item and shows the potential drop position inside the grid.

&lt;h3&gt;Current Limitations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For Microsoft Internet Explorer some layouts are not supported, due to browser specifics.&lt;/li&gt;
&lt;li&gt;For Microsoft Edge 15 and older versions some layouts are not supported, due to browser specifics.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n2:ListBase">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GridListItem" type="GridListItem" />
  <xs:complexType name="GridListItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;GridListItem&lt;/code&gt; with a content aggregation can be used to display all kind of information. It is used in {@link sap.f.GridList sap.f.GridList}.
&lt;b&gt;Note:&lt;/b&gt; Even though the content aggregation can be used for any control, complex responsive layout controls, such as &lt;code&gt;Table, Form&lt;/code&gt;, etc, should not be aggregated as content.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n2:ListItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of this list item
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ProductSwitch" type="ProductSwitch" />
  <xs:complexType name="ProductSwitch">
    <xs:annotation>
      <xs:documentation>
A layout control that provides specific configuration about how the items should be displayed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ProductSwitchItem" type="ProductSwitchItem" />
  <xs:complexType name="ProductSwitchItem">
    <xs:annotation>
      <xs:documentation>
A control that is used as a child of &lt;code&gt;ProductSwitch&lt;/code&gt;

&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;ProductSwitchItem&lt;/code&gt; is not supported when used outside of &lt;code&gt;ProductSwitch&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SearchManager" type="SearchManager" />
  <xs:complexType name="SearchManager">
    <xs:annotation>
      <xs:documentation>
Defines specific properties of the search that are applied to &lt;code&gt;sap.f.ShellBar&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="suggestionItems" />
    </xs:sequence>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the input value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="placeholder" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text that is displayed when no value is available.
The default placeholder text is the word "Search" in the current local
language (if supported) or in English.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the maximum number of characters. Value '0' means the feature is switched off.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the control is enabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableSuggestions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If true, a &lt;code&gt;suggest&lt;/code&gt; event is fired when user types in the input and when the input is focused.
On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggestionItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;SuggestionItems&lt;/code&gt; are the items which are displayed in the suggestions list.
The following properties can be used:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; - it is not displayed and may be used as internal technical field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; - it is displayed as normal suggestion text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; - additional text that may be used to visually display search item type or category&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="search" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user triggers a search.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the value of the search field is changed by the user, for example
at each key press.

&lt;b&gt;Note:&lt;/b&gt; Do not invalidate or re-render a focused search field, especially
during the &lt;code&gt;liveChange&lt;/code&gt; event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggest" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the search field is initially focused or its value is changed by the user.
This event means that suggestion data should be updated, in case if suggestions are used.
Use the value parameter to create new suggestions for it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ShellBar" type="ShellBar" />
  <xs:complexType name="ShellBar">
    <xs:annotation>
      <xs:documentation>
A horizontal bar control holding multiple child controls used as application shell header.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;ShellBar&lt;/code&gt; is used as the uppermost section (shell) of the app. It is fully
responsive and adaptive, and corresponds to the SAP Fiori Design Guidelines.

&lt;h3&gt;Usage&lt;/h3&gt;

Content specified in the &lt;code&gt;ShellBar&lt;/code&gt; properties and aggregations is automatically
positioned in dedicated places of the control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="menu" />
      <xs:element name="searchManager" />
      <xs:element name="profile" />
      <xs:element name="additionalContent" />
      <xs:element name="_overflowToolbar" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the main title of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondTitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the secondary title of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="homeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the URI to the home icon, such as company or product logo.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="homeIconTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines a custom tooltip for the home icon. If not set, a default tooltip is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showMenuButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether a hamburger menu button is displayed (as an alternative
if the &lt;code&gt;menu&lt;/code&gt; aggregation is not used).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showNavButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether a back navigation button is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showCopilot" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the SAP CoPilot icon is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSearch" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the search button is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showNotifications" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the notifications button is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showProductSwitcher" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the product switcher button is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notificationsNumber" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the displayed number of upcoming notifications.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="menu" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The menu attached to the main title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="searchManager" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Configurable search.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;showSearch&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, two search buttons appear.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="profile" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The profile avatar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="additionalContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Additional content to be displayed in the control.

&lt;b&gt;Note:&lt;/b&gt; Only controls implementing the &lt;code&gt;{@link sap.f.IShellBar}&lt;/code&gt; interface are allowed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_overflowToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds the internally created OverflowToolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="homeIconPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the &lt;code&gt;homeIcon&lt;/code&gt; is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="menuButtonPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the alternative menu button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navButtonPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the navigation/back button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="copilotPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the SAP CoPilot icon is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="searchButtonPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the search button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notificationsPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the notifications button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="productSwitcherPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the product switcher button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="avatarPressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the profile avatar is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DynamicAccessibleLandmarkInfo" type="DynamicAccessibleLandmarkInfo" />
  <xs:complexType name="DynamicAccessibleLandmarkInfo">
    <xs:attribute name="rootRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the root container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts which describe the landmark of the root container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the content container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts which describe the landmark of the content container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the header container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts which describe the landmark of the header container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footerRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the footer container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footerLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts which describe the landmark of the header container of the corresponding &lt;code&gt;sap.f.DynamicPage&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), no label is set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:element name="LayoutHistory" type="LayoutHistory" />
  <xs:complexType name="LayoutHistory">
  </xs:complexType>
</xs:schema>
