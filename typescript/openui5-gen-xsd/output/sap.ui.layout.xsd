<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="sap.ui.layout"
xmlns="sap.ui.layout"
    xmlns:n0="sap.ui.core"
elementFormDefault="qualified">
<xs:import schemaLocation="sap.ui.core.xsd" namespace="sap.ui.core" />
      <xs:element name="AlignedFlowLayout" type="AlignedFlowLayout" />
  <xs:complexType name="AlignedFlowLayout">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;AlignedFlowLayout&lt;/code&gt; control arranges its child controls evenly across the horizontal space available.
Each item takes up the same width and grows and shrinks in response to the layout width.
Items not fitting into a row with the configured &lt;code&gt;minItemWidth&lt;/code&gt; property wrap into
the next row (like in a regular flow layout). However, those wrapped items have the same flexible width as
the items in the rows above, so they are aligned.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="AssociativeSplitter" type="AssociativeSplitter" />
  <xs:complexType name="AssociativeSplitter">
    <xs:annotation>
      <xs:documentation>
AssociativeSplitter is a version of Splitter that uses an association in addition to the aggregation
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Splitter">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="BlockLayout" type="BlockLayout" />
  <xs:complexType name="BlockLayout">
    <xs:annotation>
      <xs:documentation>
The BlockLayout is used to display several objects in a section-based manner.
&lt;h3&gt;Overview&lt;/h3&gt;
The BlockLayout uses horizontal and vertical subdivisions, and full-width banners to display a set of elements.
By placing pictorial and textual elements side-by-side in different blocks, you can establish a visual connection between blocks and between similar elements.
&lt;h3&gt;Structure&lt;/h3&gt;
The BlockLayout contains BlockLayout cells. Every cell consists of a title and content. The title can be text or a link.

Special full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.

The BlockLayout comes in five predefined types for background colors:
&lt;ul&gt;
&lt;li&gt;Layout only (default) - a layout scheme and no background colors&lt;/li&gt;
&lt;li&gt;Light - a layout scheme with light colors&lt;/li&gt;
&lt;li&gt;Accent - a layout scheme with 11 pre-defined color sets&lt;/li&gt;
&lt;li&gt;Dashboard - a layout scheme with additional borders and no background colors&lt;/li&gt;
&lt;/ul&gt;
Background colors are attached directly to the blocks of the layout.

&lt;b&gt;Note:&lt;/b&gt; With version 1.48 colors can be set for each individual {@link sap.ui.layout.BlockLayoutCell cell}. There are 11 pre-defined color sets, each with 4 different shades for the Belize theme and 6 different shades for the Fiori 3 theme.
The main colors of the sets can be changed in Theme Designer. To change the background of a particular cell, set &lt;code&gt;backgroundColorSet&lt;/code&gt; (main color)
and &lt;code&gt;backgroundColorShade&lt;/code&gt; (shade).

&lt;b&gt;Note:&lt;/b&gt; Usage of disabled, emphasized or subtle links as titles is not recommended. Dark background designs, for example Accent, are not fully supported with regards to ðÉccessibility when used with links as titles.

&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to create a catalogue-like page with sections of blocks.&lt;/li&gt;
&lt;li&gt;The BlockLayout is intended for developing administrative tools and applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to display properties or features of one content item. Use a {@link sap.uxap.ObjectPageLayout object page} or {@link sap.f.DynamicPage dynamic page} instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The breakpoints of the block layout react to the width of the control itself and not to the actual screen size.&lt;/li&gt;
&lt;li&gt; On small screens all blocks will wrap to a single scrollable column&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="BlockLayoutCell" type="BlockLayoutCell" />
  <xs:complexType name="BlockLayoutCell">
    <xs:annotation>
      <xs:documentation>
The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls.
The BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="BlockLayoutCellData" type="BlockLayoutCellData" />
  <xs:complexType name="BlockLayoutCellData">
    <xs:annotation>
      <xs:documentation>
Holds layout data for the BlockLayoutCells contents.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:LayoutData">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="BlockLayoutRow" type="BlockLayoutRow" />
  <xs:complexType name="BlockLayoutRow">
    <xs:annotation>
      <xs:documentation>
The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout  cells.
The BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DynamicSideContent" type="DynamicSideContent" />
  <xs:complexType name="DynamicSideContent">
    <xs:annotation>
      <xs:documentation>
Layout control that allows additional (side) content to be displayed dynamically.

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;code&gt;DynamicSideContent&lt;/code&gt; is a layout control that allows additional content
to be displayed in a way that flexibly adapts to different screen sizes. The side
content appears in a container next to or directly below the main content
(it doesn't overlay). When the side content is triggered, the main content becomes
narrower (if appearing side-by-side). The side content contains a separate scrollbar
when appearing next to the main content.

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;i&gt;When to use?&lt;/i&gt;

Use this control if you want to display relevant information that is not critical
for users to complete a task. Users should have access to all the key functions and
critical information in the app even if they do not see the side content. This is
important because on smaller screen sizes it may be difficult to display the side
content in a way that is easily accessible for the user.

&lt;i&gt;When not to use?&lt;/i&gt;

Don't use it if you want to display navigation or critical information that prevents
users from completing a task when they have no access to the side content.

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

Screen width &gt; 1440 px

&lt;ul&gt;&lt;li&gt;Main vs. side content ratio is 75 vs. 25 percent (with a minimum of 320px
each).&lt;/li&gt;
&lt;li&gt;If the application defines a trigger, the side content can be hidden.&lt;/li&gt;&lt;/ul&gt;

Screen width &lt;= 1440 px and &gt; 720px

&lt;ul&gt;&lt;li&gt;Main vs. side content ratio is 66.666 vs. 33.333 percent (with a minimum of
320px each). If the side content width falls below 320 px, it automatically slides
under the main content, unless the app development team specifies that it should
disappear.&lt;/li&gt;&lt;/ul&gt;

Screen width &lt;= 720 px (for example on a mobile device)

&lt;ul&gt;&lt;li&gt;In this case, the side content automatically disappears from the screen (unless
specified to stay under the content) and can be triggered from a pre-set trigger
(specified within the app). When the side content is triggered, it replaces the
main content. We recommend that you always place the trigger for the side content
in the same location, such as in the app footer.&lt;/li&gt;&lt;/ul&gt;

A special case, allows for comparison mode between the main and side content. In
this case, the screen is split into 50:50 percent for main vs. side content. The
responsive behavior of the equal split is the same as in the standard view - the
side content disappears on screen widths of less than 720 px and can only be
viewed by triggering it.

&lt;b&gt;Note:&lt;/b&gt; If the control that has property sticky inside the &lt;code&gt;DynamicSideContent&lt;/code&gt; the stickiness of that control will not work.
&lt;code&gt;DynamicSideContent&lt;/code&gt; has the overflow: auto style definition and this prevents the sticky elements of the control from becoming fixed at the top of the viewport.
This applies for example to {@link sap.m.Table} and {@link sap.m.PlanningCalendar}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="mainContent" />
      <xs:element name="sideContent" />
    </xs:sequence>
    <xs:attribute name="showSideContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the side content is visible or hidden.

&lt;b&gt;Note:&lt;/b&gt; If both &lt;code&gt;DynamicSideContent&lt;/code&gt; and &lt;code&gt;showMainContent&lt;/code&gt; properties are set to &lt;code&gt;true&lt;/code&gt;,
use the &lt;code&gt;toggle&lt;/code&gt; method for showing the side content on phone.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showMainContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the main content is visible or hidden.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sideContentVisibility" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines on which breakpoints the side content is visible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sideContentFallDown" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines on which breakpoints the side content falls down below the main content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="equalSplit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the control is in equal split mode. In this mode, the side and the main content
take 50:50 percent of the container on all screen sizes except for phone, where the main and
side contents are switching visibility using the toggle method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerQuery" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sideContentPosition" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the side content is on the left or on the right side of the main content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mainContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Main content controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sideContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Side content controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="breakpointChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the current breakpoint has been changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FixFlex" type="FixFlex" />
  <xs:complexType name="FixFlex">
    <xs:annotation>
      <xs:documentation>
A layout container with a fixed and a flexible part.
&lt;h3&gt;Overview&lt;/h3&gt;
The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container.
&lt;h4&gt;Guidelines:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The fix container can hold any number of controls, while the flexible container can hold only one&lt;/li&gt;
&lt;li&gt;In order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.&lt;/li&gt;
&lt;li&gt;Avoid nesting FixFlex in other flexbox-based layout controls ({@link sap.ui.layout.FixFlex FixFlex}, {@link sap.m.FlexBox FlexBox}, Hbox, Vbox). Otherwise, contents may be not accessible or multiple scrollbars can appear.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
The behavior of the FixFlex is controlled by the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fixContentSize&lt;/code&gt; - The width/height of the fix part of the control&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixFirst&lt;/code&gt; - The ordering of the fix and flex part&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minFlexSize&lt;/code&gt; - Scrolling inside the flex part, if its contents are large&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical&lt;/code&gt; - Alignment of the FixFlex control&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view.&lt;/li&gt;
&lt;li&gt;If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the &lt;code&gt;vertical&lt;/code&gt; property.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="fixContent" />
      <xs:element name="flexContent" />
    </xs:sequence>
    <xs:attribute name="vertical" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixFirst" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the fixed-size area should be on the beginning/top ( if the value is "true") or end/bottom ( if the value is "false").
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixContentSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the height (if the vertical property is "true") or the width (if the vertical property is "false") of the fixed area. If left at the default value "auto", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minFlexSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables scrolling inside the flexible part. The given size is calculated in "px". If the child control in the flexible part is larger than the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Controls in the fixed part of the layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="flexContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Control in the stretching part of the layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Grid" type="Grid" />
  <xs:complexType name="Grid">
    <xs:annotation>
      <xs:documentation>
A layout control which positions its child controls in a 12 column flow layout.

The &lt;code&gt;Grid&lt;/code&gt; control's children can be specified to take on a variable
amount of columns depending on available screen size. With this control it is possible
to achieve flexible layouts and line-breaks for extra large-, large-, medium- and
small-sized screens, such as large desktop, desktop, tablet, and mobile.

The &lt;code&gt;Grid&lt;/code&gt; control's width can be percentage- or pixel-based and the spacing between
its columns can be set to various predefined values.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The visibility of the child control does not affect the horizontal space it
occupies, meaning that even if the control is not visible, its horizontal space
still exists, even if it is empty.&lt;/li&gt;
&lt;li&gt; If it gets wider, the content of the columns is designed to overflow outside
of its dimensions. An additional &lt;code&gt;sapUiRespGridOverflowHidden&lt;/code&gt; CSS class
should be added to the control in order to hide the overflowing part of it.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines the width of the &lt;code&gt;Grid&lt;/code&gt;. If not specified, then 100%.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="vSpacing" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines the vertical spacing between the rows in the &lt;code&gt;Grid&lt;/code&gt;.
In rem, allowed values are 0, 0.5, 1 and 2.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hSpacing" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines the horizontal spacing between the content in the &lt;code&gt;Grid&lt;/code&gt;.
In rem, allowed values are 0, 0.5 , 1 or 2.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="position" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines the position of the &lt;code&gt;Grid&lt;/code&gt; in the window or surrounding container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultSpan" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. A string type that represents the span values of the &lt;code&gt;Grid&lt;/code&gt; for
large, medium and small screens. Allowed values are separated by space Letters L, M or S followed
by number of columns from 1 to 12 that the container has to take, for example, &lt;code&gt;L2 M4 S6&lt;/code&gt;,
&lt;code&gt;M12&lt;/code&gt;, &lt;code&gt;s10&lt;/code&gt; or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultIndent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines default for the whole Grid numbers of empty columns before the current span begins.
It can be defined for large, medium and small screens. Allowed values are separated by space Letters
L, M or S followed by number of columns from 0 to 11 that the container has to take, for example,
&lt;code&gt;L2 M4 S6&lt;/code&gt;, &lt;code&gt;M11&lt;/code&gt;, &lt;code&gt;s10&lt;/code&gt; or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerQuery" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt;, the current range (large, medium or small) is defined by the size of the
container surrounding the &lt;code&gt;Grid&lt;/code&gt; instead of the device screen size (media Query).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Controls that are placed into Grid layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GridData" type="GridData" />
  <xs:complexType name="GridData">
    <xs:annotation>
      <xs:documentation>
Defines layout data for the {@link sap.ui.layout.Grid}.

&lt;b&gt;Note:&lt;/b&gt; When &lt;code&gt;GridData&lt;/code&gt; is used for controls inside a form,
the &lt;code&gt;linebreak&lt;/code&gt; property has to be set to &lt;code&gt;true&lt;/code&gt; if the
next form element has to be displayed on a new line. Otherwise the &lt;code&gt;GridData&lt;/code&gt;
overrides the layout provided by the &lt;code&gt;Form&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:LayoutData">
    <xs:attribute name="span" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A string type that represents the span values of the &lt;code&gt;Grid&lt;/code&gt; for large, medium and small screens.

Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12
that the container has to take, for example: &lt;code&gt;L2 M4 S6&lt;/code&gt;, &lt;code&gt;M12&lt;/code&gt;,
&lt;code&gt;s10&lt;/code&gt; or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spanXL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines a span value for extra large screens.
This value overwrites the value for extra large screens defined in the &lt;code&gt;span&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spanL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines a span value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;span&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spanM" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines a span value for medium size screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;span&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spanS" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines a span value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;span&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A string type that represents the indent values of the &lt;code&gt;Grid&lt;/code&gt; for large, medium and small screens.

Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11
that the container has to take, for example, &lt;code&gt;L2 M4 S6&lt;/code&gt;, &lt;code&gt;M11&lt;/code&gt;, &lt;code&gt;s10&lt;/code&gt;
or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentXL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines an indent value for extra large screens.
This value overwrites the value for extra large screens defined in the &lt;code&gt;indent&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines an indent value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;indent&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentM" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines an indent value for medium size screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;indent&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentS" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Defines an indent value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;indent&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleXL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if this control is visible on extra Large screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if this control is visible on large screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleM" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if this control is visible on medium screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleS" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if this control is visible on small screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveBackwards" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Moves a cell backwards with as many columns as specified.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moveForward" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. Moves a cell forwards with as many columns as specified.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linebreak" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on all-size screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linebreakXL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on extra large screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linebreakL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on large screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linebreakM" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on medium screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linebreakS" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on small screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spanLarge" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines a span value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;span&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spanMedium" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines a span value for medium screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;span&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="spanSmall" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines a span value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;span&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentLarge" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines an indent value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;indent&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentMedium" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines an indent value for medium screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;indent&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indentSmall" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines an indent value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;indent&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleOnLarge" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines if this control is visible on large screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleOnMedium" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines if this control is visible on medium screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleOnSmall" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Deprecated. Defines if this control is visible on small screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="HorizontalLayout" type="HorizontalLayout" />
  <xs:complexType name="HorizontalLayout">
    <xs:annotation>
      <xs:documentation>
A layout that provides support for horizontal alignment of controls
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="allowWrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The controls inside this layout
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PaneContainer" type="PaneContainer" />
  <xs:complexType name="PaneContainer">
    <xs:annotation>
      <xs:documentation>
PaneContainer is an abstraction of Splitter.

Could be used as an aggregation of ResponsiveSplitter or other PaneContainers.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ResponsiveFlowLayout" type="ResponsiveFlowLayout" />
  <xs:complexType name="ResponsiveFlowLayout">
    <xs:annotation>
      <xs:documentation>
This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="responsive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Added content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ResponsiveFlowLayoutData" type="ResponsiveFlowLayoutData" />
  <xs:complexType name="ResponsiveFlowLayoutData">
    <xs:annotation>
      <xs:documentation>
This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:LayoutData">
    <xs:attribute name="minWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the minimal size in px of a ResponsiveFlowLayout element. The element will be shrunk down to this value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="weight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linebreak" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="margin" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Prevents any margin of the element if set to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="linebreakable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ResponsiveSplitter" type="ResponsiveSplitter" />
  <xs:complexType name="ResponsiveSplitter">
    <xs:annotation>
      <xs:documentation>
A responsive splitter which divides the application into several areas.
&lt;h3&gt;Overview&lt;/h3&gt;
The responsive splitter layout structures complex applications into defined areas.
These areas may be resizable and are either distributed across one or multiple screen areas, some of which may also be off-canvas.

The control is intended for developing administrative tools and applications.
&lt;h3&gt;Structure&lt;/h3&gt;
The responsive splitter holds the following hierarchy of containers and controls:
&lt;ul&gt;
&lt;li&gt;{@link sap.ui.layout.PaneContainer Pane Container} - holds one or more Split Panes and determines the pane orientation. The pane which is stored in &lt;code&gt;rootPaneContainer&lt;/code&gt; holds all other pane containers and split panes.&lt;/li&gt;
&lt;li&gt;{@link sap.ui.layout.SplitPane Split Pane} - independent containers that may interact with one another. Each pane can hold only one control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The application has to display several areas side by side that must be resizable.&lt;/li&gt;
&lt;li&gt;The application must work on a range of different devices in a responsive manner.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;As soon as views are in the off-canvas mode, the pagination bar at the bottom of the application allows the user to switch between them.&lt;/li&gt;
&lt;li&gt;On touch-enabled devices, the splitters show explicit handles with larger touch areas.&lt;/li&gt;
&lt;li&gt;Double-clicking on a splitter will collapse or expand it back to its original position.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt; We don't recommend dynamically inserting/removing panes into/from the PaneContainer since this might lead to inconsistent layout. If it is necessary, you need to ensure the sum of all sizes of the SplitPanes doesn't exceed the width of the PaneContainer.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="rootPaneContainer" />
      <xs:element name="_pages" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the control
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height of the control
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootPaneContainer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The root PaneContainer of the ResponsiveSplitter
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_pages" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains the internal pages that are used for pagination
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ResponsiveSplitterPage" type="ResponsiveSplitterPage" />
  <xs:complexType name="ResponsiveSplitterPage">
    <xs:annotation>
      <xs:documentation>
Helper control used in the ResponsiveSplitter
This serves as placeholder for the content of the Panes inside the ResponsiveSplitter
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitPane" type="SplitPane" />
  <xs:complexType name="SplitPane">
    <xs:annotation>
      <xs:documentation>
SplitPane is a container of a single control in a responsive splitter.
Could be used as an aggregation of a {@link sap.ui.layout.PaneContainer PaneContainer}.

The behavior of the Split Panes is handled by the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requiredParentWidth&lt;/code&gt; - determines the minimum width of the parent container (in pixels). When it is reached, the pane will be hidden from the screen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;demandPane&lt;/code&gt; - determines if the pane is reachable via the pagination bar after it has been hidden from the screen.&lt;/li&gt;
&lt;/ul
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Splitter" type="Splitter" />
  <xs:complexType name="Splitter">
    <xs:annotation>
      <xs:documentation>
A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.

By adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.

The orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.

The splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).

The splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="contentAreas" />
    </xs:sequence>
    <xs:attribute name="orientation" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether to split the contents horizontally (default) or vertically.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the control
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height of the control
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentAreas" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when contents are resized.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitterLayoutData" type="SplitterLayoutData" />
  <xs:complexType name="SplitterLayoutData">
    <xs:annotation>
      <xs:documentation>
Holds layout data for the splitter contents.
Allowed size values are numeric values ending in "px" and "%" and the
special case "auto".
(The CSS value "auto" is used internally to recalculate the size of the content
dynamically and is not directly set as style property.)
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:LayoutData">
    <xs:attribute name="resizable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the control in the splitter can be resized or not.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="size" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the size of the splitter content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the minimum size of the splitter content in px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="VerticalLayout" type="VerticalLayout" />
  <xs:complexType name="VerticalLayout">
    <xs:annotation>
      <xs:documentation>
In this layout the content controls are rendered one below the other.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Width of the &lt;code&gt;VerticalLayout&lt;/code&gt;. If no width is set, the width of the content is used.
If the content of the layout has a larger width than the layout, it is cut off.
There is no scrolling inside the layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If not enabled, all controls inside are not enabled automatically.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Content controls within the layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
</xs:schema>
