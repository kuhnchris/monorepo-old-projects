<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="sap.m"
xmlns="sap.m"
    xmlns:n0="sap.ui.core"
    xmlns:n1="sap.ui.base"
    xmlns:n2="sap.ui.core.delegate"
    xmlns:n3="sap.ui.unified"
elementFormDefault="qualified">
<xs:import schemaLocation="sap.ui.core.xsd" namespace="sap.ui.core" />
    <xs:import schemaLocation="sap.ui.base.xsd" namespace="sap.ui.base" />
    <xs:import schemaLocation="sap.ui.core.delegate.xsd" namespace="sap.ui.core.delegate" />
    <xs:import schemaLocation="sap.ui.unified.xsd" namespace="sap.ui.unified" />
      <xs:element name="text" type="text" />
  <xs:complexType name="text">
  </xs:complexType>
  <xs:element name="AccButton" type="AccButton" />
  <xs:complexType name="AccButton">
    <xs:annotation>
      <xs:documentation>
The AccButton control represents button with additional capabilities for accessability settings. It is meant for private usage.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Button">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ActionListItem" type="ActionListItem" />
  <xs:complexType name="ActionListItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.ActionListItem&lt;/code&gt; can be used like a &lt;code&gt;button&lt;/code&gt; to fire actions when pressed.
&lt;b&gt;Note:&lt;/b&gt; The inherited &lt;code&gt;selected&lt;/code&gt; property of the &lt;code&gt;sap.m.ListItemBase&lt;/code&gt; is not supported.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text that appears in the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ActionSelect" type="ActionSelect" />
  <xs:complexType name="ActionSelect">
    <xs:annotation>
      <xs:documentation>
The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Select">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ActionSheet" type="ActionSheet" />
  <xs:complexType name="ActionSheet">
    <xs:annotation>
      <xs:documentation>
The action sheet holds a list of options from which the user can select to complete an action.
&lt;h3&gt;Overview&lt;/h3&gt;
The options of the action sheet are represented as {@link sap.m.Button buttons} with icons.
Elements in the action sheet are left-aligned. Actions should be arranged in order of importance, from top to bottom.
&lt;h3&gt;Guidelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always display text or text and icons for the actions. Do not use icons only.&lt;/li&gt;
&lt;li&gt;Always provide a Cancel button on mobile phones.&lt;/li&gt;
&lt;li&gt;Avoid scrolling on action sheets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
On mobile phones the action sheet is displayed in a {@link sap.m.Dialog dialog}.

On tablets and desktop the action sheet is displayed in a {@link sap.m.Popover popover}.

When an action is triggered, the action sheet closes and you can display a confirmation as a {@link sap.m.MessageToast message toast}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="buttons" />
      <xs:element name="_cancelButton" />
      <xs:element name="_invisibleAriaTexts" />
    </xs:sequence>
    <xs:attribute name="placement" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showCancelButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancelButtonText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_cancelButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The internally managed cancel button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_invisibleAriaTexts" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden texts used for accesibility
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancelButtonTap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the ActionSheet is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the ActionSheet is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the ActionSheet is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the ActionSheet is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancelButtonPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the cancelButton is clicked.

&lt;b&gt;Note: &lt;/b&gt; For any device other than phones, this event would be fired always when the Popover closes. To prevent this behavior, the &lt;code&gt;showCancelButton&lt;/code&gt; property needs to be set to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="App" type="App" />
  <xs:complexType name="App">
    <xs:annotation>
      <xs:documentation>
The root element of a UI5 mobile app.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;App&lt;/code&gt; inherits from {@link sap.m.NavContainer} and thus provides its navigation capabilities.
It adds certain header tags to the HTML page which are considered useful for mobile apps.

&lt;h3&gt;Usage&lt;/h3&gt;

You can configure the home icon of the &lt;code&gt;App&lt;/code&gt;. For more information,
see the &lt;code&gt;homeIcon&lt;/code&gt; property.

There are options for setting the background color and a background image with the use of the
&lt;code&gt;backgroundColor&lt;/code&gt; and &lt;code&gt;backgroundImage&lt;/code&gt; properties.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NavContainer">
    <xs:attribute name="homeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".

Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.

This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.

A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.

One example is:

app.setHomeIcon({
'phone':'phone-icon.png',
'phone@2':'phone-retina.png',
'tablet':'tablet-icon.png',
'tablet@2':'tablet-retina.png',
'icon':'desktop.ico'
});

The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
If an object is given but one of the sizes is not given, the largest given icon will be used for this size.

On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundImage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundRepeat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundOpacity" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
This can be used to make the application content better readable by making the background image partly transparent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mobileWebAppCapable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;App&lt;/code&gt; is displayed without address bar when
opened from an exported home screen icon on a mobile device.

Keep in mind that if enabled, there is no back button provided by the browser and the app
must provide own navigation on all displayed pages to avoid dead ends.

&lt;b&gt;Note&lt;/b&gt;
The property can be toggled, but it doesn't take effect in real time.
It takes the set value at the moment when the home screen icon is exported by the user.
For example, if the icon is exported while the property is set to &lt;code&gt;true&lt;/code&gt;,
the &lt;code&gt;App&lt;/code&gt; will have no address bar when opened from that same icon regardless
of a changed property value to &lt;code&gt;false&lt;/code&gt; at a later time.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="orientationChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the orientation (portrait/landscape) of the device is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="AssociativeOverflowToolbar" type="AssociativeOverflowToolbar" />
  <xs:complexType name="AssociativeOverflowToolbar">
    <xs:annotation>
      <xs:documentation>
AssociativeOverflowToolbar is a version of OverflowToolbar that uses an association in addition to the aggregation
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OverflowToolbar">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Bar" type="Bar" />
  <xs:complexType name="Bar">
    <xs:annotation>
      <xs:documentation>
Used as a header, sub-header and a footer of a page.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;Bar&lt;/code&gt; control consists of three areas to hold its content. It has the capability
to center content, such as a title, while having other controls on the left and right side.

&lt;h3&gt;Usage&lt;/h3&gt;

With the use of the &lt;code&gt;design&lt;/code&gt; property, you can set the style of the &lt;code&gt;Bar&lt;/code&gt; to appear
as a header, sub-header and footer.

&lt;b&gt;Note:&lt;/b&gt; Do not place a &lt;code&gt;sap.m.Bar&lt;/code&gt; inside another &lt;code&gt;sap.m.Bar&lt;/code&gt;
or inside any bar-like control. Doing so causes unpredictable behavior.

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The content in the middle area is centrally positioned if there is enough space. If the right
or left content overlaps the middle content, the middle content will be centered in the space between.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="contentLeft" />
      <xs:element name="contentMiddle" />
      <xs:element name="contentRight" />
    </xs:sequence>
    <xs:attribute name="enableFlexBox" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="translucent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the Bar is partially translucent.
It is only applied for touch devices.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="design" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentLeft" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Represents the left content area, usually containing a button or an app icon. If it is overlapped by the right content, its content will disappear and the text will show an ellipsis.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentMiddle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Represents the middle content area. Controls such as label, segmented buttons or select can be placed here. The content is centrally positioned if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentRight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Represents the right content area. Controls such as action buttons or search field can be placed here.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="IBarInPageEnabler" type="IBarInPageEnabler" />
  <xs:complexType name="IBarInPageEnabler">
    <xs:annotation>
      <xs:documentation>
Helper Class for implementing the IBar interface. Should be created once per IBar instance.
      </xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:element name="Breadcrumbs" type="Breadcrumbs" />
  <xs:complexType name="Breadcrumbs">
    <xs:annotation>
      <xs:documentation>
Enables users to navigate between items by providing a list of links to previous steps in the user's
navigation path. The last three steps can be accessed as links directly, while the remaining links prior to them
are available in a drop-down menu.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="BusyDialog" type="BusyDialog" />
  <xs:complexType name="BusyDialog">
    <xs:annotation>
      <xs:documentation>
BusyDialog is used to indicate that the system is busy.
&lt;h3&gt;Overview&lt;/h3&gt;
When the busy dialog is displayed, the whole application is blocked.
&lt;h3&gt;Structure&lt;/h3&gt;
The busy dialog can hold several elements, most of which are optional.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; - A title for the dialog. By default, there is no title.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; - A text displayed above the busy animation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showCancelButton&lt;/code&gt; - An optional Cancel button to stop the execution.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customIcon&lt;/code&gt; - An optional alternative icon to use as a busy animation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The operation lasts more than one second.&lt;/li&gt;
&lt;li&gt;You want to indicate loading in a page-to-page navigation (lightweight version).&lt;/li&gt;
&lt;li&gt;Offer a Cancel button if you expect the process to run more than 10 seconds.&lt;/li&gt;
&lt;li&gt; If you do not show a title or text, use the {@link sap.ui.core.InvisibleText invisible text} control to provide the reason for users with assistive technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The screen is not supposed to be blocked. Use a {@link sap.m.BusyIndicator} for the specific application part.&lt;/li&gt;
&lt;li&gt;Do not use the title of the busy dialog. Provide a precise text describing the operation in &lt;code&gt;text&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional text displayed inside the dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the title of the BusyDialog. The default value is an empty string.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconRotationSpeed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If this is set to &lt;code&gt;false&lt;/code&gt;, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices.
By default, this is set to &lt;code&gt;true&lt;/code&gt; but then one or more requests are sent trying to get the density perfect version of the image.

If bandwidth is the key for the application, set this value to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Width of the provided icon with default value "44px".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Height of the provided icon with default value "44px".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancelButtonText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The text of the cancel button. The default text is "Cancel" (translated to the respective language).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showCancelButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="close" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the busy dialog is closed. Note: the BusyDialog will not be closed by the InstanceManager.closeAllDialogs method
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="BusyIndicator" type="BusyIndicator" />
  <xs:complexType name="BusyIndicator">
    <xs:annotation>
      <xs:documentation>
Informs the user about an ongoing operation.
&lt;h3&gt;Overview&lt;/h3&gt;
The busy indicator implies that an action is taking place within a single control.
You can set the size of the icon, the text, but also define a custom icon to be used instead.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The user needs to be able to cancel the operation.&lt;/li&gt;
&lt;li&gt;Only part of the application or a particular control is affected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The operation takes less than one second.&lt;/li&gt;
&lt;li&gt;You need to block the screen and prevent the user from starting another activity. In this case, use the {@link sap.m.BusyDialog busy dialog}.&lt;/li&gt;
&lt;li&gt;Do not change the mouse cursor to indicate the ongoing operation.&lt;/li&gt;
&lt;li&gt;Do not show multiple busy indicators at once&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines text to be displayed below the busy indicator.
It can be used to inform the user of the current operation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Options for the text direction are RTL and LTR.
Alternatively, the control can inherit the text direction from its parent container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon URL if an icon is used as the busy indicator.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconRotationSpeed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the rotation speed of the given image.
If a .gif is used, the speed has to be set to 0.
The unit is in ms.
&lt;b&gt;Note:&lt;/b&gt; Values are considered valid when greater than or equal to 0.
If invalid value is provided the speed defaults to 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If this is set to false, the src image will be loaded directly without attempting
to fetch the density perfect image for high density device.
By default, this is set to true but then one or more requests are sent to the server,
trying to get the density perfect version of the specified image.
If bandwidth is the key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Width of the provided icon. By default 44px are used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIconHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Height of the provided icon. By default 44px are used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="size" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the size of the busy indicator.
The animation consists of three circles, each of which will be this size.
Therefore the total width of the control amounts to three times the given size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="design" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Setting this property will not have any effect on the appearance of the BusyIndicator
in versions greater than or equal to 1.32.1
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Button" type="Button" />
  <xs:complexType name="Button">
    <xs:annotation>
      <xs:documentation>
Enables users to trigger actions.

&lt;h3&gt;Overview&lt;/h3&gt;

The user triggers an action by clicking or tapping the &lt;code&gt;Button&lt;/code&gt; or by pressing
certain keyboard keys, such as Enter.

&lt;h3&gt;Usage&lt;/h3&gt;

For the &lt;code&gt;Button&lt;/code&gt; UI, you can define text, icon, or both. You can also specify
whether the text or the icon is displayed first.

You can choose from a set of predefined {@link sap.m.ButtonType ButtonTypes} that offer
different styling to correspond to the triggered action.

You can set the &lt;code&gt;Button&lt;/code&gt; as enabled or disabled. An enabled &lt;code&gt;Button&lt;/code&gt; can be
pressed by clicking or tapping it and it changes its style to provide visual feedback to the user
that it is pressed or hovered over with the mouse cursor. A disabled &lt;code&gt;Button&lt;/code&gt; appears
inactive and cannot be pressed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text of the &lt;code&gt;Button&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the &lt;code&gt;Button&lt;/code&gt; type.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the &lt;code&gt;Button&lt;/code&gt; width.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;Button&lt;/code&gt; is enabled (default is set to &lt;code&gt;true&lt;/code&gt;).
A disabled &lt;code&gt;Button&lt;/code&gt; has different colors depending on the {@link sap.m.ButtonType ButtonType}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon to be displayed as graphical element within the &lt;code&gt;Button&lt;/code&gt;.
It can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconFirst" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the icon is displayed before the text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The source property of an alternative icon for the active (depressed) state of the button.
Both active and default icon properties should be defined and have the same type: image or icon font.
If the &lt;code&gt;icon&lt;/code&gt; property is not set or has a different type, the active icon is not displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user taps the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user clicks or taps on the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Carousel" type="Carousel" />
  <xs:complexType name="Carousel">
    <xs:annotation>
      <xs:documentation>
The carousel allows the user to browse through a set of items by swiping right or left.
&lt;h3&gt;Overview&lt;/h3&gt;
The control is mostly used for showing a gallery of images, but can hold any sap.m control.
&lt;h3&gt;Structure&lt;/h3&gt;
The carousel consists of a the following elements:
&lt;ul&gt;
&lt;li&gt;Content area - displays the different items.&lt;/li&gt;
&lt;li&gt;Navigation - arrows to the left and right for switching between items.&lt;/li&gt;
&lt;li&gt;(optional) Paging - indicator at the bottom to show the current position in the set.&lt;/li&gt;
&lt;/ul&gt;
The paging indicator can be configured as follows:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;showPageIndicator&lt;/code&gt; - determines if the indicator is displayed.&lt;/li&gt;
&lt;li&gt;If the pages are less than 9, the page indicator is represented with bullets.&lt;/li&gt;
&lt;li&gt;If the pages are 9 or more, the page indicator is numeric.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pageIndicatorPlacement&lt;/code&gt; - determines where the indicator is located. Default (&lt;code&gt;sap.m.PlacementType.Bottom&lt;/code&gt;) - below the content.&lt;/li&gt;
&lt;/ul&gt;
Additionally, you can also change the location of the navigation arrows.
By setting &lt;code&gt;arrowsPlacement&lt;/code&gt; to &lt;code&gt;sap.m.CarouselArrowsPlacement.PageIndicator&lt;/code&gt;, the arrows will be located at the bottom by the paging indicator.
Note: When the content is of type &lt;code&gt;sap.m.Image&lt;/code&gt; add "Image" text at the end of the &lt;code&gt;"alt"&lt;/code&gt; description in order to provide accessibility info for the UI element.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt; When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The items you want to display are very different from each other.&lt;/li&gt;
&lt;li&gt;You want to display the items one after the other.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt; When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The items you want to display need to be visible at the same time.&lt;/li&gt;
&lt;li&gt;The items you want to display are uniform and very similar&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On touch devices, navigation is performed with swipe gestures (swipe right or swipe left).&lt;/li&gt;
&lt;li&gt;On desktop, navigation is done with the navigation arrows.&lt;/li&gt;
&lt;li&gt;The paging indicator (when activated) is visible on each form factor.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="pages" />
      <xs:element name="customLayout" />
    </xs:sequence>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="loop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showPageIndicator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Show or hide carousel's page indicator.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageIndicatorPlacement" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showBusyIndicator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Show or hide busy indicator in the carousel when loading pages after swipe.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="arrowsPlacement" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines where the carousel's arrows are placed. Default is &lt;code&gt;sap.m.CarouselArrowsPlacement.Content&lt;/code&gt; used to
place the arrows on the sides of the carousel. Alternatively &lt;code&gt;sap.m.CarouselArrowsPlacement.PageIndicator&lt;/code&gt; can
be used to place the arrows on the sides of the page indicator.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pages" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content which the carousel displays.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customLayout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines how many pages are displayed in the visible area of the &lt;code&gt;Carousel&lt;/code&gt; control.

&lt;b&gt;Note:&lt;/b&gt; When this property is used, the &lt;code&gt;loop&lt;/code&gt; property is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="loadPage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Carousel requires a new page to be loaded. This event may be used to fill the content of that page
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unloadPage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired after a carousel swipe has been completed.
It is triggered both by physical swipe events and through API carousel manipulations such as calling
'next', 'previous' or 'setActivePageId' functions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforePageChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired before a carousel swipe has been completed.
It is triggered both by physical swipe events and through API carousel manipulations such as calling
'next', 'previous' or 'setActivePageId' functions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="CarouselLayout" type="CarouselLayout" />
  <xs:complexType name="CarouselLayout">
    <xs:annotation>
      <xs:documentation>
Applies a &lt;code&gt;sap.m.CarouselLayout&lt;/code&gt; to a provided DOM element or Control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n1:ManagedObject">
    <xs:attribute name="visiblePagesCount" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines how many pages are displayed in the visible area of the &lt;code&gt;Carousel&lt;/code&gt; control.
Value should be a positive number.

&lt;b&gt;Note:&lt;/b&gt; When this property is set to something different than the default value,
the &lt;code&gt;loop&lt;/code&gt; property of &lt;code&gt;Carousel&lt;/code&gt; is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="CheckBox" type="CheckBox" />
  <xs:complexType name="CheckBox">
    <xs:annotation>
      <xs:documentation>
Allows the user to set a binary value, such as true/false or yes/no for an item.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;CheckBox&lt;/code&gt; control consists of a box and a label that describes its purpose.
If it's checked, an indicator is displayed inside the box.

To select/deselect the &lt;code&gt;CheckBox&lt;/code&gt;, the user has to click or tap the square box or its label.
Clicking or tapping toggles the &lt;code&gt;CheckBox&lt;/code&gt; between checked and unchecked state.
The &lt;code&gt;CheckBox&lt;/code&gt; control only has 3 states - checked, unchecked and partially selected.

&lt;h3&gt;Usage&lt;/h3&gt;

You can set the width of the element containing the box and the label manually with the use
of the &lt;code&gt;width&lt;/code&gt; property. If the text exceeds the available width, it is truncated.

&lt;b&gt;Note:&lt;/b&gt; When &lt;code&gt;useEntireWidth&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, the value of the
&lt;code&gt;width&lt;/code&gt; property is applied to the control as a whole (box and label). If
&lt;code&gt;useEntireWidth&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;width&lt;/code&gt; is applied to the label only.

The touchable area for toggling the &lt;code&gt;CheckBox&lt;/code&gt; ends where the text ends.

If the width allows more space than the text requires, white space is added.
The text can be positioned manually in this space using the &lt;code&gt;textAlign&lt;/code&gt; property.

&lt;b&gt;Note:&lt;/b&gt; Keep in mind that setting the &lt;code&gt;textAlign&lt;/code&gt; property to &lt;code&gt;Right&lt;/code&gt;
can result in a large amount of white space between the box and the text.

You can disable the &lt;code&gt;CheckBox&lt;/code&gt; by setting the &lt;code&gt;enabled&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;,
or use the &lt;code&gt;CheckBox&lt;/code&gt; in read-only mode by setting the &lt;code&gt;editable&lt;/code&gt; property to false.

&lt;b&gt;Note:&lt;/b&gt; Disabled and read-only states shouldn't be used together.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_label" />
    </xs:sequence>
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;CheckBox&lt;/code&gt; is selected (checked).

When this property is set to &lt;code&gt;true&lt;/code&gt;, the control is displayed as selected,
unless the value of the &lt;code&gt;partiallySelected&lt;/code&gt; property is also set to &lt;code&gt;true&lt;/code&gt;.
In this case, the control is displayed as partially selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="partiallySelected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;CheckBox&lt;/code&gt; is displayed as partially selected.

&lt;b&gt;Note:&lt;/b&gt; This property leads only to visual change of the checkbox and the
state cannot be achieved by user interaction. The visual state depends on
the value of the &lt;code&gt;selected&lt;/code&gt; property:
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;selected&lt;/code&gt; = &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;partiallySelected&lt;/code&gt;
= &lt;code&gt;true&lt;/code&gt;, the control is displayed as partially selected&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;selected&lt;/code&gt; = &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;partiallySelected&lt;/code&gt;
= &lt;code&gt;false&lt;/code&gt;, the control is displayed as selected&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;selected&lt;/code&gt; = &lt;code&gt;false&lt;/code&gt;, the control is displayed as not
selected regardless of what is set for &lt;code&gt;partiallySelected&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text displayed next to the checkbox
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the total width of the control or the width of its label only, depending on the value of &lt;code&gt;useEntireWidth&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; When &lt;code&gt;useEntireWidth&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; is applied to the control as a whole (checkbox and label). Otherwise, &lt;code&gt;width&lt;/code&gt; is applied to the label only.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useEntireWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the given width will be applied to the control as a whole or to its label only.

&lt;b&gt;Note:&lt;/b&gt; by default the width is set to the label
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeHandling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the user shall be allowed to edit the state of the checkbox
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning', 'Success' and 'Information'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayOnly" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;CheckBox&lt;/code&gt; is in display only state.

When set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;CheckBox&lt;/code&gt; is not interactive, not editable, not focusable
and not in the tab chain. This setting is used for forms in review mode.

&lt;Note:&gt; When the property &lt;code&gt;enabled&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; this property has no effect.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the label's text is wrapped.

When set to &lt;code&gt;false&lt;/code&gt; (default), the label's text
is truncated with ellipsis at the end.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The label that represents the text of the checkbox control
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColorPalette" type="ColorPalette" />
  <xs:complexType name="ColorPalette">
    <xs:annotation>
      <xs:documentation>
Represents a predefined range of colors for easier selection.

&lt;h3&gt;Overview&lt;/h3&gt;
The &lt;code&gt;ColorPalette&lt;/code&gt; provides the users with a range of predefined colors.

You can customize them with the use of the &lt;code&gt;colors&lt;/code&gt; property.
You can specify a &lt;code&gt;defaultColor&lt;/code&gt; and display a "Default color" button
for the user to choose directly. You can display a "More colors..." button
that opens an additional color picker for the user to choose specific colors
that are not present in the predefined range.

&lt;h3&gt;Usage&lt;/h3&gt;

The palette is intended for users, who don't want to check and remember the
different values of the colors and spend large amount of time to configure the
right color through the color picker.

The control can be embedded in a form or can be opened as popover (by use of thin
wrapper control &lt;code&gt;sap.m.ColorPalettePopover&lt;/code&gt;).
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="colors" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="colorSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user selects a color.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColorPalettePopover" type="ColorPalettePopover" />
  <xs:complexType name="ColorPalettePopover">
    <xs:annotation>
      <xs:documentation>
A thin wrapper over {@link sap.m.ColorPalette} allowing the latter to be used in a popover.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="defaultColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The color, which the app developer will receive when end-user chooses the "Default color" button.
See event {@link #event:colorSelect colorSelect}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="colors" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showDefaultColorButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the button for default color selection is available.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showMoreColorsButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Denotes if the color has been chosen by selecting the "Default Color" button (true or false)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the &lt;code&gt;displayMode&lt;/code&gt; of the &lt;code&gt;ColorPicker&lt;/code&gt; among three types - Default, Large and Simplified
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="colorSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user selects a color.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Column" type="Column" />
  <xs:complexType name="Column">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.Column&lt;/code&gt; allows to define column specific properties that will be applied when rendering the &lt;code&gt;sap.m.Table&lt;/code&gt;.

See section "{@link topic:6f778a805bc3453dbb66e246d8271839 Defining Column Width}"
in the documentation to understand how to define the &lt;code&gt;width&lt;/code&gt; property of the &lt;code&gt;sap.m.Column&lt;/code&gt; to render a &lt;code&gt;sap.m.Table&lt;/code&gt; control properly.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="header" />
      <xs:element name="footer" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the column. If you leave it empty then this column covers the remaining space.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the horizontal alignment of the column content.

&lt;b&gt;Note:&lt;/b&gt; Text controls with a &lt;code&gt;textAlign&lt;/code&gt; property inherits the horizontal alignment.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="vAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the vertical alignment of the cells in a column.
This property does not affect the vertical alignment of header and footer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleClass" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether or not the column is visible. Invisible columns are not rendered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minScreenWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the minimum screen width to show or hide this column. By default column is always shown.
The responsive behavior of the &lt;code&gt;sap.m.Table&lt;/code&gt; is determined by this property. As an example by setting &lt;code&gt;minScreenWidth&lt;/code&gt; property to "40em" (or "640px" or "Tablet") shows this column on tablet (and desktop) but hides on mobile.
As you can give specific CSS sizes (e.g: "480px" or "40em"), you can also use the {@link sap.m.ScreenSize} enumeration (e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
Please also see &lt;code&gt;demandPopin&lt;/code&gt; property for further responsive design options.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="demandPopin" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
According to your minScreenWidth settings, the column can be hidden in different screen sizes.
Setting this property to true, shows this column as pop-in instead of hiding it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="popinHAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".

&lt;b&gt;Note:&lt;/b&gt; Controls with a text align do not inherit the horizontal alignment.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="popinDisplay" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines enumerated display options for the pop-in.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mergeDuplicates" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set &lt;code&gt;true&lt;/code&gt; to merge repeating/duplicate cells into one cell block. See &lt;code&gt;mergeFunctionName&lt;/code&gt; property to customize.
&lt;b&gt;Note:&lt;/b&gt; Merging only happens at the rendering of the &lt;code&gt;sap.m.Table&lt;/code&gt; control, subsequent changes on the cell or item do not have any effect on the merged state of the cells, therefore this feature should not be used together with two-way binding.
This property is ignored if any column is configured to be shown as a pop-in.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mergeFunctionName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the control serialization function if &lt;code&gt;mergeDuplicates&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;. The control itself uses this function to compare values of two repeating cells.
Default value "getText" is suitable for &lt;code&gt;sap.m.Label&lt;/code&gt; and &lt;code&gt;sap.m.Text&lt;/code&gt; controls but for the &lt;code&gt;sap.ui.core.Icon&lt;/code&gt; control "getSrc" function should be used to merge icons.
&lt;b&gt;Note:&lt;/b&gt; You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sortIndicator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if a column is sorted by setting the sort indicator for this column.

&lt;b&gt;Note:&lt;/b&gt; Defining this property does not trigger the sorting.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Control to be displayed in the column header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Control to be displayed in the column footer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnHeaderPopover" type="ColumnHeaderPopover" />
  <xs:complexType name="ColumnHeaderPopover">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;ColumnHeaderPopover&lt;/code&gt; control provides the capabilities to perform sorting, filter and grouping on a table column.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Note that the content created inside ColumnPopoverCustomItem can not be used more than once.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnListItem" type="ColumnListItem" />
  <xs:complexType name="ColumnListItem">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;sap.m.ColumnListItem&lt;/code&gt; can be used with the &lt;code&gt;cells&lt;/code&gt; aggregation to create rows for the &lt;code&gt;sap.m.Table&lt;/code&gt; control.
The &lt;code&gt;columns&lt;/code&gt; aggregation of the &lt;code&gt;sap.m.Table&lt;/code&gt; should match with the cells aggregation.

&lt;b&gt;Note:&lt;/b&gt; This control should only be used within the &lt;code&gt;sap.m.Table&lt;/code&gt; control.
The inherited &lt;code&gt;counter&lt;/code&gt; property of &lt;code&gt;sap.m.ListItemBase&lt;/code&gt; is not supported.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="cells" />
    </xs:sequence>
    <xs:attribute name="vAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the vertical alignment of all the cells within the table row (including selection and navigation).
&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;vAlign&lt;/code&gt; property of &lt;code&gt;sap.m.Column&lt;/code&gt; overrides the property for cell vertical alignment if both are set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cells" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Every &lt;code&gt;control&lt;/code&gt; inside the &lt;code&gt;cells&lt;/code&gt; aggregation defines one cell of the row.
&lt;b&gt;Note:&lt;/b&gt; The order of the &lt;code&gt;cells&lt;/code&gt; aggregation must match the order of the &lt;code&gt;columns&lt;/code&gt; aggregation of &lt;code&gt;sap.m.Table&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnPopoverActionItem" type="ColumnPopoverActionItem" />
  <xs:complexType name="ColumnPopoverActionItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;ColumnPopoverActionItem&lt;/code&gt; provides the capabilities to perform sorting, filter and grouping in ColumnHeaderPopover.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ColumnPopoverItem">
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Actionitem button icon
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Actionitem button text
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Press event
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnPopoverCustomItem" type="ColumnPopoverCustomItem" />
  <xs:complexType name="ColumnPopoverCustomItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;ColumnPopoverCustomItem&lt;/code&gt; provides the capabilities to perform custom behaviour in ColumnHeaderPopover.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ColumnPopoverItem">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Customitem button icon
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Customitem button text
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Note that the content created inside ColumnPopoverCustomItem can not be used more than once.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeShowContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
beforeShowContent event
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnPopoverItem" type="ColumnPopoverItem" />
  <xs:complexType name="ColumnPopoverItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;ColumnPopoverItem&lt;/code&gt; is used for sorting, filter and grouping behaviours in ColumnHeaderPopover control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnPopoverSortItem" type="ColumnPopoverSortItem" />
  <xs:complexType name="ColumnPopoverSortItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;ColumnPopoverSortItem&lt;/code&gt; provides the capabilities to perform sorting in ColumnHeaderPopover.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ColumnPopoverItem">
    <xs:attribute name="label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
the property that the sort function performed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sort" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sort event
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ComboBox" type="ComboBox" />
  <xs:complexType name="ComboBox">
    <xs:annotation>
      <xs:documentation>
A drop-down list for selecting and filtering values.
&lt;h3&gt;Overview&lt;/h3&gt;
The control represents a drop-down menu with a list of the available options and a text input field to narrow down the options.
&lt;h3&gt;Structure&lt;/h3&gt;
The combo-box consists of the following elements:
&lt;ul&gt;
&lt;li&gt; Input field - displays the selected option or a custom user entry. Users can type to narrow down the list or enter their own value.&lt;/li&gt;
&lt;li&gt; Drop-down arrow - expands\collapses the option list.&lt;/li&gt;
&lt;li&gt; Option list - the list of available options.&lt;/li&gt;
&lt;/ul&gt;
By setting the &lt;code&gt;showSecondaryValues&lt;/code&gt; property, the combo box can display an additional value for each option (if there is one).
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to select only one item in a long list of options (between 13 and 200) or your custom user input.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to select between only two options. Use a {@link sap.m.Switch switch} control instead.&lt;/li&gt;
&lt;li&gt;You need to select between up to 12 options. Use a {@link sap.m.Select select} control instead.&lt;/li&gt;
&lt;li&gt;You need to select between more than 200 options. Use a {@link sap.m.Input input} control with value help instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The width of the option list adapts to its content. The minimum width is the input field plus the drop-down arrow.&lt;/li&gt;
&lt;li&gt;There is no horizontal scrolling in the option list. Entries in the list that are too long will be truncated.&lt;/li&gt;
&lt;li&gt;On phone devices the combo box option list opens a dialog.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ComboBoxBase">
    <xs:attribute name="selectedKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Key of the selected item.

&lt;b&gt;Note:&lt;/b&gt; If duplicate keys exist, the first item matching the key is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedItemId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
ID of the selected item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterSecondaryValues" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the filter should check in both the &lt;code&gt;text&lt;/code&gt; and the &lt;code&gt;additionalText&lt;/code&gt; property of the
{@link sap.ui.core.ListItem} for the suggestion.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the value in the text input field is changed in combination with one of
the following actions:

&lt;ul&gt;
	&lt;li&gt;The focus leaves the text input field&lt;/li&gt;
	&lt;li&gt;The &lt;i&gt;Enter&lt;/i&gt; key is pressed&lt;/li&gt;
&lt;/ul&gt;

In addition, this event is also fired when an item in the list is selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the user types something that matches with an item in the list;
it is also fired when the user presses on a list item, or when navigating via keyboard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ComboBoxBase" type="ComboBoxBase" />
  <xs:complexType name="ComboBoxBase">
    <xs:annotation>
      <xs:documentation>
An abstract class for combo boxes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ComboBoxTextField">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="picker" />
    </xs:sequence>
    <xs:attribute name="showSecondaryValues" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the text values of the &lt;code&gt;additionalText&lt;/code&gt; property of a
{@link sap.ui.core.ListItem} are shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the items contained within this control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="picker" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the inner picker popup.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="loadItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the end user clicks the combo box button to open the dropdown list and
the data used to display items is not already loaded.
Alternatively, it is fired after the user moves the cursor to the combo box text
field and perform an action that requires data to be loaded. For example,
pressing F4 to open the dropdown list or typing something in the text field fires the event.

&lt;b&gt;Note:&lt;/b&gt; Use this feature in performance critical scenarios only.
Loading the data lazily (on demand) to defer initialization has several implications for the
end user experience. For example, the busy indicator has to be shown while the items are being
loaded and assistive technology software also has to announce the state changes
(which may be confusing for some screen reader users).

&lt;b&gt;Note&lt;/b&gt;: Currently the &lt;code&gt;sap.m.MultiComboBox&lt;/code&gt; does not support this event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ComboBoxTextField" type="ComboBoxTextField" />
  <xs:complexType name="ComboBoxTextField">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.ComboBoxTextField&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="InputBase">
    <xs:attribute name="maxWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the maximum width of the text field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the dropdown downward-facing arrow button is shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="CustomListItem" type="CustomListItem" />
  <xs:complexType name="CustomListItem">
    <xs:annotation>
      <xs:documentation>
This control with a content aggregation can be used to customize standard list items that we don't provide. List mode and ListItem type are applied to CustomListItems as well.
&lt;b&gt;Note:&lt;/b&gt; Even though the content aggregation allows any control, complex responsive layout controls (e.g. &lt;code&gt;Table, Form&lt;/code&gt;) should not be aggregated as content.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of this list item
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="CustomTile" type="CustomTile" />
  <xs:complexType name="CustomTile">
    <xs:annotation>
      <xs:documentation>
Use the CustomTile control to display application specific content in the Tile control.
The tile width is 8.5em and height is 10em.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Tile">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the content of the CustomTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="CustomTreeItem" type="CustomTreeItem" />
  <xs:complexType name="CustomTreeItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;CustomTreeItem&lt;/code&gt; control with a content aggregation is used to customize the tree items within the &lt;code&gt;Tree&lt;/code&gt;
       control.&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; Even though the content aggregation can be used for any control, complex responsive layout controls, such as
       &lt;code&gt;Table, Form&lt;/code&gt; etc, should not be aggregated as content.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TreeItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of this tree item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DatePicker" type="DatePicker" />
  <xs:complexType name="DatePicker">
    <xs:annotation>
      <xs:documentation>
Enables the users to select a localized date between 0001-01-01 and 9999-12-31.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DatePicker&lt;/code&gt; lets the users select a localized date using touch,
mouse, or keyboard input. It consists of two parts: the date input field and the
date picker.

&lt;b&gt;Note:&lt;/b&gt; The {@link sap.ui.unified.Calendar} is used internally only if the
&lt;code&gt;DatePicker&lt;/code&gt; is opened (not used for the initial rendering). If the
&lt;code&gt;sap.ui.unified&lt;/code&gt; library is not loaded before the
&lt;code&gt;DatePicker&lt;/code&gt; is opened, it will be loaded upon opening. This could
lead to a waiting time when the &lt;code&gt;DatePicker&lt;/code&gt; is opened for the
first time. To prevent this, apps using the &lt;code&gt;DatePicker&lt;/code&gt; should also
load the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.

&lt;h3&gt;Usage&lt;/h3&gt;

The user can enter a date by:
&lt;ul&gt;&lt;li&gt;Using the calendar that opens in a popup&lt;/li&gt;
&lt;li&gt;Typing it in directly in the input field (not available for mobile devices)&lt;/li&gt;&lt;/ul&gt;

On app level, there are two options to provide a date for the
&lt;code&gt;DatePicker&lt;/code&gt; - as a string to the &lt;code&gt;value&lt;/code&gt; property or as
a JavaScript Date object to the &lt;code&gt;dateValue&lt;/code&gt; property (only one of
these properties should be used at a time):

&lt;ul&gt;&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if you want to bind the
&lt;code&gt;DatePicker&lt;/code&gt; to a model using the &lt;code&gt;sap.ui.model.type.Date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if the date is provided as a string from
the backend or inside the app (for example, as ABAP type DATS field)&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;dateValue&lt;/code&gt; property if the date is already provided as a
JavaScript Date object or you want to work with a JavaScript Date object.
Use &lt;code&gt;dateValue&lt;/code&gt; as a helper property to easily obtain the day, month and year
of the chosen date. Although possible to bind it, the recommendation is not to do it.
When binding is needed, use &lt;code&gt;value&lt;/code&gt; property instead&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Formatting&lt;/h3&gt;

All formatting and parsing of dates from and to strings is done using the
{@link sap.ui.core.format.DateFormat}. If a date is entered by typing it into
the input field, it must fit to the used date format and locale.

Supported format options are pattern-based on Unicode LDML Date Format notation.
See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

For example, if the &lt;code&gt;valueFormat&lt;/code&gt; is "yyyy-MM-dd",
the &lt;code&gt;displayFormat&lt;/code&gt; is "MMM d, y", and the used locale is English, a
valid value string is "2015-07-30", which leads to an output of "Jul 30, 2015".

If no placeholder is set to the &lt;code&gt;DatePicker&lt;/code&gt;, the used
&lt;code&gt;displayFormat&lt;/code&gt; is displayed as a placeholder. If another placeholder
is needed, it must be set.

&lt;b&gt;Note:&lt;/b&gt; If the string does NOT match the &lt;code&gt;displayFormat&lt;/code&gt;
(from user input) or the &lt;code&gt;valueFormat&lt;/code&gt; (on app level), the
{@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
locale settings. For more information, see the respective documentation in the
API Reference.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The &lt;code&gt;DatePicker&lt;/code&gt; is smaller in compact mode and provides a
touch-friendly size in cozy mode.

On mobile devices, one tap on the input field opens the &lt;code&gt;DatePicker&lt;/code&gt;
in full screen. To close the window, the user can select a date (which triggers
the close event), or select Cancel.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DateTimeField">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="specialDates" />
      <xs:element name="_popup" />
    </xs:sequence>
    <xs:attribute name="displayFormatType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Displays date in this given type in input field. Default value is taken from locale settings.
Accepted are values of &lt;code&gt;sap.ui.core.CalendarType&lt;/code&gt; or an empty string. If no type is set, the default type of the
configuration is used.
&lt;b&gt;Note:&lt;/b&gt; If data binding on &lt;code&gt;value&lt;/code&gt; property with type &lt;code&gt;sap.ui.model.type.Date&lt;/code&gt; is used, this property will be ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondaryCalendarType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set, the days in the calendar popup are also displayed in this calendar type
If not set, the dates are only displayed in the primary calendar type
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Minimum date that can be shown and selected in the &lt;code&gt;DatePicker&lt;/code&gt;. This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;minDate&lt;/code&gt; is set to be after the &lt;code&gt;maxDate&lt;/code&gt;,
the &lt;code&gt;maxDate&lt;/code&gt; and the &lt;code&gt;minDate&lt;/code&gt; are switched before rendering.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Maximum date that can be shown and selected in the &lt;code&gt;DatePicker&lt;/code&gt;. This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;maxDate&lt;/code&gt; is set to be before the &lt;code&gt;minDate&lt;/code&gt;,
the &lt;code&gt;maxDate&lt;/code&gt; and the &lt;code&gt;minDate&lt;/code&gt; are switched before rendering.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showFooter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hides or shows the popover's footer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="specialDates" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Date Range with type to visualize special days in the Calendar.
If one day is assigned to more than one Type, only the first one will be used.

To set a single date (instead of a range), set only the startDate property of the sap.ui.unified.DateRange class.

&lt;b&gt;Note:&lt;/b&gt; Since 1.48 you could set a non-working day via the sap.ui.unified.CalendarDayType.NonWorking
enum type just as any other special date type using sap.ui.unified.DateRangeType.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_popup" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation that contains the inner picker pop-up.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when navigating in &lt;code&gt;Calendar&lt;/code&gt; popup.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DateRangeSelection" type="DateRangeSelection" />
  <xs:complexType name="DateRangeSelection">
    <xs:annotation>
      <xs:documentation>
A single-field input control that enables the users to enter a localized date range (between 0001-01-01 and 9999-12-31).

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DateRangeSelection&lt;/code&gt; enables the users to enter a localized
date range using touch, mouse, keyboard input, or by selecting a date range in
the calendar. They can also navigate directly from one month or year to another.

&lt;b&gt;Note:&lt;/b&gt;
The control is not UTC aware and the selected date range starts from 00:00:00:000 of the first date and ends in 23:59:59:999 on the second date.

The {@link sap.ui.unified.Calendar} is used internally only if the
&lt;code&gt;DateRangeSelection&lt;/code&gt; is opened (not used for the initial rendering).
If the &lt;code&gt;sap.ui.unified&lt;/code&gt; library is not loaded before the
&lt;code&gt;DateRangeSelection&lt;/code&gt; is opened, it will be loaded upon opening.
This could lead to a waiting time when the &lt;code&gt;DateRangeSelection&lt;/code&gt; is
opened for the first time. To prevent this, apps using the
&lt;code&gt;DateRangeSelection&lt;/code&gt; should also load the &lt;code&gt;sap.ui.unified&lt;/code&gt;
library.

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;i&gt;When to use?&lt;/i&gt;

If you need a date range and know that your user is a power user who has to
input lots of data. If the keyboard is the primary device used for navigating
the app, use two input fields. This allows the user to quickly jump from field
to field. By selecting a date in one of the fields, the other field should
recognize the information and jump to the same selection.

&lt;i&gt;When not to use?&lt;/i&gt;

If the user's primary goal is not to select ranges or if you just want to enter
a date and a time. For such cases, use the {@link sap.m.DatePicker} or
{@link sap.m.TimePicker}.

The user can enter a date by:
&lt;ul&gt;&lt;li&gt;Using the calendar that opens in a popup&lt;/li&gt;
&lt;li&gt;Typing it in directly in the input field (not available for mobile devices)&lt;/li&gt;&lt;/ul&gt;

On app level, there are two options to provide a date for the
&lt;code&gt;DateRangeSelection&lt;/code&gt; - date range as a string to the
&lt;code&gt;value&lt;/code&gt; property or JavaScript Date objects to the
&lt;code&gt;dateValue&lt;/code&gt; and &lt;code&gt;secondDateValue&lt;/code&gt; properties (only one of
these options should be used at a time):

&lt;ul&gt;&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if the date range is already provided as
a formatted string&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;dateValue&lt;/code&gt; and &lt;code&gt;secondDateValue&lt;/code&gt; properties
if the date range is already provided as JavaScript Date objects or you want to
work with JavaScript Date objects&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Formatting&lt;/h3&gt;

All formatting and parsing of dates from and to strings is done using the
{@link sap.ui.core.format.DateFormat}. If a date is entered by typing it into
the input field, it must fit to the used date format and locale.

Supported format options are pattern-based on Unicode LDML Date Format notation.
See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

For example, if the &lt;code&gt;displayFormat&lt;/code&gt; is "MMM d, y", delimiter is "-",
and the used locale is English, a valid value string is "Jul 29, 2015 - Jul 31,
2015" and it is displayed in the same way in the input field.

If no placeholder is set to the &lt;code&gt;DateRangeSelection&lt;/code&gt;, the used
&lt;code&gt;displayFormat&lt;/code&gt; is displayed as a placeholder. If another placeholder
is needed, it must be set.

&lt;b&gt;Note:&lt;/b&gt; If the string does NOT match the &lt;code&gt;displayFormat&lt;/code&gt;
(from user input) or the &lt;code&gt;valueFormat&lt;/code&gt; (on app level), the
{@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
locale settings. For more information, see the respective documentation in the
API Reference.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The &lt;code&gt;DateRangeSelection&lt;/code&gt; is fully responsive. It is smaller in
compact mode and provides a touch-friendly size in cozy mode.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatePicker">
    <xs:attribute name="delimiter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Delimiter between start and end date. Default value is "-".
If no delimiter is given, the one defined for the used locale is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondDateValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The end date of the range as JavaScript Date object. This is independent from any formatter.

&lt;b&gt;Note:&lt;/b&gt; If this property is used, the &lt;code&gt;value&lt;/code&gt; property should not be changed from the caller.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="from" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Start date of the range.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="to" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
End date of the range.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DateTimeField" type="DateTimeField" />
  <xs:complexType name="DateTimeField">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.DateTimeField&lt;/code&gt; control provides a basic functionality for date/time input controls.

To be extended by date and time picker controls. For internal use only.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="InputBase">
    <xs:attribute name="displayFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the format, displayed in the input field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the format of the value property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds a reference to a JavaScript Date Object. The &lt;code&gt;value&lt;/code&gt; (string)
property will be set according to it. Alternatively, if the &lt;code&gt;value&lt;/code&gt;
and &lt;code&gt;valueFormat&lt;/code&gt; pair properties are supplied instead,
the &lt;code&gt;dateValue&lt;/code&gt; will be instantiated according to the parsed
&lt;code&gt;value&lt;/code&gt;.
Use &lt;code&gt;dateValue&lt;/code&gt; as a helper property to easily obtain the day, month, year, hours, minutes
and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it.
When binding is needed, use &lt;code&gt;value&lt;/code&gt; property instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initialFocusedDateValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds a reference to a JavaScript Date Object to define the initially focused
date/time when the picker popup is opened.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Setting this property does not change the &lt;code&gt;value&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Depending on the context this property is used in ({@link sap.m.TimePicker},
{@link sap.m.DatePicker} or {@link sap.m.DateTimePicker}), it takes into account only the time part, only
the date part or both parts of the JavaScript Date Object.&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DateTimeInput" type="DateTimeInput" />
  <xs:complexType name="DateTimeInput">
    <xs:annotation>
      <xs:documentation>
Allows end users to interact with date (between 0001-01-01 and 9999-12-31) and/or time and select from a date and/or time pad.

&lt;b&gt;Note:&lt;/b&gt; This control should not be used any longer, instead please use the dedicated &lt;code&gt;sap.m.DatePicker&lt;/code&gt;, &lt;code&gt;sap.m.TimePicker&lt;/code&gt; or &lt;code&gt;sap.m.DateTimePicker&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the value of the control.

The new value must be in the format set by &lt;code&gt;valueFormat&lt;/code&gt;.

The "Now" literal can also be assigned as a parameter to show the current date and/or time.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the user can interact with the control or not.
&lt;b&gt;Note:&lt;/b&gt; Disabled controls cannot be focused and they are out of the tab-chain.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the control can be modified by the user or not.
&lt;b&gt;Note:&lt;/b&gt; A user can tab to non-editable control, highlight it, and copy the text from it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Visualizes the validation state of the control, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueStateText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showValueStateMessage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the value state message should be shown or not.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the name of the control for the purposes of form submission.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="placeholder" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines a short hint intended to aid the user with data entry when the control has no value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the horizontal alignment of the text that is shown inside the input field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text directionality of the input field, e.g. &lt;code&gt;RTL&lt;/code&gt;, &lt;code&gt;LTR&lt;/code&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Type of DateTimeInput (e.g. Date, Time, DateTime)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Displays date value in this given format in text field. Default value is taken from locale settings.
If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or the latter wins.
If the user's browser supports native picker then this property is overwritten by browser with locale settings.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
You can only set and get value in this format.
If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or the latter wins.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event gets fired when the selection has finished and the value has changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DateTimePicker" type="DateTimePicker" />
  <xs:complexType name="DateTimePicker">
    <xs:annotation>
      <xs:documentation>
Enables the users to select date (between 0001-01-01 and 9999-12-31) and time values in a combined input.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DateTimePicker&lt;/code&gt; control consists of two parts: the input field and the
date/time picker.

&lt;b&gt;Note:&lt;/b&gt; The {@link sap.ui.unified.Calendar} is used internally only if the
&lt;code&gt;DateTimePicker&lt;/code&gt; is opened (not used for the initial rendering). If
the &lt;code&gt;sap.ui.unified&lt;/code&gt; library is not loaded before the
&lt;code&gt;DateTimePicker&lt;/code&gt; is opened, it will be loaded upon opening. This
could lead to a waiting time when the &lt;code&gt;DateTimePicker&lt;/code&gt; is opened for
the first time. To prevent this, apps using the &lt;code&gt;DateTimePicker&lt;/code&gt;
should also load the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.

&lt;h3&gt;Usage&lt;/h3&gt;

Use this control if you need a combined date and time input control.

Don't use it if you want to use either a date or a time value. In this case,
use the {@link sap.m.DatePicker} or the {@link sap.m.TimePicker} controls
instead.

The user can enter a date by:
&lt;ul&gt; &lt;li&gt;Using the calendar or a time selector that opens in a popup&lt;/li&gt;
&lt;li&gt;Typing it in directly in the input field&lt;/li&gt;&lt;/ul&gt;

On app level, there are two options to provide a date for the
&lt;code&gt;DateTimePicker&lt;/code&gt; - as a string to the &lt;code&gt;value&lt;/code&gt; property
or as a JavaScript Date object to the &lt;code&gt;dateValue&lt;/code&gt; property (only one
of these properties should be used at a time):

&lt;ul&gt;&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if you want to bind the
&lt;code&gt;DateTimePicker&lt;/code&gt; to a model using the
&lt;code&gt;sap.ui.model.type.DateTime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if the date is provided as a string from
the backend or inside the app (for example, as ABAP type DATS field)&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;dateValue&lt;/code&gt; property if the date is already provided as a
JavaScript Date object or you want to work with a JavaScript Date object.
Use &lt;code&gt;dateValue&lt;/code&gt; as a helper property to easily obtain the day, month, year,
hours, minutes and seconds of the chosen date and time. Although possible to bind it,
the recommendation is not to do it.
When binding is needed, use &lt;code&gt;value&lt;/code&gt; property instead&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Formatting&lt;/h3&gt;

All formatting and parsing of dates from and to strings is done using the
{@link sap.ui.core.format.DateFormat}. If a date is entered by typing it into
the input field, it must fit to the used date format and locale.

Supported format options are pattern-based on Unicode LDML Date Format notation.
See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

For example, if the &lt;code&gt;valueFormat&lt;/code&gt; is "yyyy-MM-dd-HH-mm-ss", the
&lt;code&gt;displayFormat&lt;/code&gt; is "MMM d, y, HH:mm:ss", and the used locale is
English, a valid value string is "2015-07-30-10-30-15", which leads to an output
of "Jul 30, 2015, 10:30:15".

If no placeholder is set to the &lt;code&gt;DateTimePicker&lt;/code&gt;, the used
&lt;code&gt;displayFormat&lt;/code&gt; is displayed as a placeholder. If another placeholder
is needed, it must be set.

&lt;b&gt;Note:&lt;/b&gt; If the string does NOT match the &lt;code&gt;displayFormat&lt;/code&gt;
(from user input) or the &lt;code&gt;valueFormat&lt;/code&gt; (on app level), the
{@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
locale settings. For more information, see the respective documentation in the
API Reference.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The &lt;code&gt;DateTimePicker&lt;/code&gt; is responsive and fully adapts to all devices.
For larger screens, such as tablet or desktop, it opens as a popover. For
mobile devices, it opens in full screen.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatePicker">
    <xs:attribute name="minutesStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the minutes slider step. If the step is less than 1, it will be automatically converted back to 1.
The minutes slider is populated only by multiples of the step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondsStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the seconds slider step. If the step is less than 1, it will be automatically converted back to 1.
The seconds slider is populated only by multiples of the step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Dialog" type="Dialog" />
  <xs:complexType name="Dialog">
    <xs:annotation>
      <xs:documentation>
A popup that interrupts the current processing and prompts the user for an action or an input in a modal mode.
&lt;h3&gt;Overview&lt;/h3&gt;
The Dialog control is used to prompt the user for an action or a confirmation. It interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked.
The content of the Dialog is fully customizable.
&lt;h3&gt;Structure&lt;/h3&gt;
A Dialog consists of a title, optional subtitle, content area and a footer for action buttons.
The Dialog is usually displayed at the center of the screen. Its size and position can be changed by the user.
To enable this, you need to set the properties &lt;code&gt;resizable&lt;/code&gt; and &lt;code&gt;draggable&lt;/code&gt; accordingly.

There are other specialized types of dialogs:
&lt;ul&gt;
&lt;li&gt;{@link sap.m.P13nDialog Personalization Dialog} - used for personalizing sorting, filtering and grouping in tables&lt;/li&gt;
&lt;li&gt;{@link sap.m.SelectDialog Select Dialog} - used to select one or more items from a comprehensive list&lt;/li&gt;
&lt;li&gt;{@link sap.m.TableSelectDialog Table Select Dialog} - used to  make a selection from a comprehensive table containing multiple attributes or values&lt;/li&gt;
&lt;li&gt;{@link sap.ui.comp.valuehelpdialog.ValueHelpDialog Value Help Dialog} - used to help the user find and select single and multiple values&lt;/li&gt;
&lt;li&gt;{@link sap.m.ViewSettingsDialog View Settings Dialog}  - used to sort, filter, or group data within a (master) list or a table&lt;/li&gt;
&lt;li&gt;{@link sap.m.BusyDialog Busy Dialog} - used to block the screen and inform the user about an ongoing operation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to display a system message.&lt;/li&gt;
&lt;li&gt;You want to interrupt the userÔÇÖs action.&lt;/li&gt;
&lt;li&gt;You want to show a message with a short and a long description.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You just want to confirm a successful action.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;stretch&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, the Dialog displays on full screen.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;contentWidth&lt;/code&gt; and/or &lt;code&gt;contentHeight&lt;/code&gt; properties are set, the Dialog will try to fill those sizes.&lt;/li&gt;
&lt;li&gt;If there is no specific sizing, the Dialog will try to adjust its size to its content.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Smartphones&lt;/h4&gt;
If the Dialog has one or two actions, they will cover the entire footer. If there are more actions, they will overflow.
&lt;h4&gt;Tablets&lt;/h4&gt;
The action buttons in the toolbar are &lt;b&gt;right-aligned&lt;/b&gt;. Use &lt;b&gt;cozy&lt;/b&gt; mode on tablet devices.
&lt;h4&gt;Desktop&lt;/h4&gt;
The action buttons in the toolbar are &lt;b&gt;right-aligned&lt;/b&gt;. Use &lt;b&gt;compact&lt;/b&gt; mode on desktop.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="subHeader" />
      <xs:element name="customHeader" />
      <xs:element name="beginButton" />
      <xs:element name="endButton" />
      <xs:element name="buttons" />
      <xs:element name="_header" />
      <xs:element name="_title" />
      <xs:element name="_icon" />
      <xs:element name="_toolbar" />
      <xs:element name="_valueState" />
    </xs:sequence>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon displayed in the Dialog header. This &lt;code&gt;icon&lt;/code&gt; is invisible on the iOS platform and it is density-aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Title text appears in the Dialog header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the header is shown inside the Dialog. If this property is set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;icon&lt;/code&gt; properties are ignored. This property has a default value &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;type&lt;/code&gt; of the Dialog. In some themes, the type Message will limit the Dialog width within 480px on tablet and desktop.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Affects the &lt;code&gt;icon&lt;/code&gt; and the &lt;code&gt;title&lt;/code&gt; color. If other than &lt;code&gt;none&lt;/code&gt; is set, a predefined icon will be added to the Dialog. Setting the &lt;code&gt;icon&lt;/code&gt; property will overwrite the predefined icon. The default value is &lt;code&gt;none&lt;/code&gt; which doesn't add any icon to the Dialog control. This property is by now only supported by the blue crystal theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stretchOnPhone" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the Dialog will be displayed on full screen on a phone.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stretch" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the Dialog will be stretched to full screen on mobile. On desktop, the Dialog will be stretched to 93% of the viewport. This property is only applicable to a Standard Dialog. Message-type Dialog ignores it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Preferred width of the content in the Dialog. This property affects the width of the Dialog on a phone in landscape mode, a tablet or a desktop, because the Dialog has a fixed width on a phone in portrait mode. If the preferred width is less than the minimum width of the Dialog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of the Dialog width on tablet is 400px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Preferred height of the content in the Dialog. If the preferred height is bigger than the available space on a screen, it will be overwritten by the maximum available height on a screen in order to make sure that the Dialog isn't cut off.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="horizontalScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the user can scroll horizontally inside the Dialog when the content is bigger than the content area.
The Dialog detects if there's &lt;code&gt;sap.m.NavContainer&lt;/code&gt;, &lt;code&gt;sap.m.Page&lt;/code&gt;, &lt;code&gt;sap.m.ScrollContainer&lt;/code&gt; or &lt;code&gt;sap.m.SplitContainer&lt;/code&gt; as a direct child added to the Dialog. If there is, the Dialog will turn off &lt;code&gt;scrolling&lt;/code&gt; by setting this property to &lt;code&gt;false&lt;/code&gt;, automatically ignoring the existing value of the property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verticalScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the user can scroll vertically inside the Dialog when the content is bigger than the content area.
The Dialog detects if there's &lt;code&gt;sap.m.NavContainer&lt;/code&gt;, &lt;code&gt;sap.m.Page&lt;/code&gt;, &lt;code&gt;sap.m.ScrollContainer&lt;/code&gt; or &lt;code&gt;sap.m.SplitContainer&lt;/code&gt; as a direct child added to the Dialog. If there is, the Dialog will turn off &lt;code&gt;scrolling&lt;/code&gt; by setting this property to &lt;code&gt;false&lt;/code&gt;, automatically ignoring the existing value of this property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resizable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the Dialog is resizable. If this property is set to &lt;code&gt;true&lt;/code&gt;, the Dialog will have a resize handler in its bottom right corner. This property has a default value &lt;code&gt;false&lt;/code&gt;. The Dialog can be resizable only in desktop mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="draggable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the Dialog is draggable. If this property is set to &lt;code&gt;true&lt;/code&gt;, the Dialog will be draggable by its header. This property has a default value &lt;code&gt;false&lt;/code&gt;. The Dialog can be draggable only in desktop mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="escapeHandler" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property expects a function with one parameter of type Promise. In the function, you should call either &lt;code&gt;resolve()&lt;/code&gt; or &lt;code&gt;reject()&lt;/code&gt; on the Promise object.&lt;br/&gt;
The function allows you to define custom behavior which will be executed when the Escape key is pressed. By default, when the Escape key is pressed, the Dialog is immediately closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="role" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the ARIA role of the Dialog. If the state of the control is "Error" or "Warning" the role will be "AlertDialog" regardless of what is set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOnNavigation" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the Dialog will be closed automatically when a routing navigation occurs.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleAlignment" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the Title alignment (theme specific).
If set to &lt;code&gt;TitleAlignment.Auto&lt;/code&gt;, the Title will be aligned as it is set in the theme (if not set, the default value is &lt;code&gt;center&lt;/code&gt;);
Other possible values are &lt;code&gt;TitleAlignment.Start&lt;/code&gt; (left or right depending on LTR/RTL), and &lt;code&gt;TitleAlignment.Center&lt;/code&gt; (centered)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content inside the Dialog.&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; When the content of the Dialog is comprised of controls that use &lt;code&gt;position: absolute&lt;/code&gt;, such as &lt;code&gt;SplitContainer&lt;/code&gt;, the Dialog has to have either &lt;code&gt;stretch: true&lt;/code&gt; or &lt;code&gt;contentHeight&lt;/code&gt; set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When a &lt;code&gt;subHeader&lt;/code&gt; is assigned to the Dialog, it's rendered directly after the main header in the Dialog. The &lt;code&gt;subHeader&lt;/code&gt; is out of the content area and won't be scrolled when the content size is bigger than the content area size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When it is set, the &lt;code&gt;icon&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;showHeader&lt;/code&gt; properties are ignored. Only the &lt;code&gt;customHeader&lt;/code&gt; is shown as the header of the Dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beginButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The button which is rendered to the left side (right side in RTL mode) of the &lt;code&gt;endButton&lt;/code&gt; in the footer area inside the Dialog. As of version 1.21.1, there's a new aggregation &lt;code&gt;buttons&lt;/code&gt; created with which more than 2 buttons can be added to the footer area of the Dialog. If the new &lt;code&gt;buttons&lt;/code&gt; aggregation is set, any change made to this aggregation has no effect anymore. When running on a phone, this &lt;code&gt;button&lt;/code&gt; (and the &lt;code&gt;endButton&lt;/code&gt; together when set) is (are) rendered at the center of the footer area. When running on other platforms, this &lt;code&gt;button&lt;/code&gt; (and the &lt;code&gt;endButton&lt;/code&gt; together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The button which is rendered to the right side (left side in RTL mode) of the &lt;code&gt;beginButton&lt;/code&gt; in the footer area inside the Dialog. As of version 1.21.1, there's a new aggregation &lt;code&gt;buttons&lt;/code&gt; created with which more than 2 buttons can be added to the footer area of Dialog. If the new &lt;code&gt;buttons&lt;/code&gt; aggregation is set, any change made to this aggregation has no effect anymore. When running on a phone, this &lt;code&gt;button&lt;/code&gt; (and the &lt;code&gt;beginButton&lt;/code&gt; together when set) is (are) rendered at the center of the footer area. When running on other platforms, this &lt;code&gt;button&lt;/code&gt; (and the &lt;code&gt;beginButton&lt;/code&gt; together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Buttons can be added to the footer area of the Dialog through this aggregation. When this aggregation is set, any change to the &lt;code&gt;beginButton&lt;/code&gt; and &lt;code&gt;endButton&lt;/code&gt; has no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the middle of the footer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for internal maintained &lt;code&gt;header&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for internal maintained &lt;code&gt;title&lt;/code&gt; control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for internal maintained &lt;code&gt;icon&lt;/code&gt; control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_toolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for internal maintained &lt;code&gt;toolbar&lt;/code&gt; instance.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for the Dialog state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the Dialog is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the Dialog is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the Dialog is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the Dialog is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DisplayListItem" type="DisplayListItem" />
  <xs:complexType name="DisplayListItem">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;sap.m.DisplayListItem&lt;/code&gt; can be used to represent a label and a value.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:attribute name="label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the label of the list item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the value of the list item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the &lt;code&gt;value&lt;/code&gt; text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="DraftIndicator" type="DraftIndicator" />
  <xs:complexType name="DraftIndicator">
    <xs:annotation>
      <xs:documentation>
A draft indicator is {@link sap.m.Label}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_label" />
    </xs:sequence>
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
State of the indicator. Could be "Saving", "Saved" and "Clear".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minDisplayTime" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Minimum time in milliseconds for showing the draft indicator
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The State is managed in this aggregation
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FacetFilter" type="FacetFilter" />
  <xs:complexType name="FacetFilter">
    <xs:annotation>
      <xs:documentation>
Provides filtering functionality with multiple parameters.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;FacetFilter&lt;/code&gt; control is used to provide filtering functionality
with multiple parameters and supports the users in finding the information they
need from potentially very large data sets.

Your app can have dependencies between facets where selection of filter items in
one facet list limits the list of valid filters in another facet list.

The &lt;code&gt;FacetFilter&lt;/code&gt; uses {@link sap.m.FacetFilterList FacetFilterList} and
{@link sap.m.FacetFilterItem FacetFilterItem} to model facets and their associated
filters.

&lt;b&gt;Note: &lt;/b&gt;{@link sap.m.FacetFilterList FacetFilterList} is a subclass of
{@link sap.m.List} and supports growing enablement feature via the property
&lt;code&gt;growing&lt;/code&gt;. When you use this feature, be aware that it only works with
one-way data binding.
Having growing feature enabled when the &lt;code&gt;items&lt;/code&gt; aggregation is bound to
a model with two-way data binding, may lead to unexpected and/or inconsistent
behavior across browsers, such as unexpected closing of the list.

&lt;h3&gt;Usage&lt;/h3&gt;

Use the &lt;code&gt;FacetFilter&lt;/code&gt; if your app displays a large list of
items that can be grouped by multiple parameters, for example products by category
and supplier. With the &lt;code&gt;FacetFilter&lt;/code&gt;, you allow the users
to dynamically filter the list so it only displays products from the categories and
suppliers they want to see.

While the {@link sap.m.FacetFilterList} popup is opened (when the user selects a button
corresponding to the list's name), any other activities leading to focus change will
close it. For example, when the popup is opened and the app developer loads a
{@link sap.m.BusyDialog} or any other dialog that obtains the focus, the popup will
be closed.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The &lt;code&gt;FacetFilter&lt;/code&gt; supports the following two types, which
can be configured using the control's &lt;code&gt;type&lt;/code&gt; property:

&lt;ul&gt;&lt;li&gt;Simple type (default) - only available for desktop and tablet screen sizes.
The active facets are displayed as individually selectable buttons on the toolbar.&lt;/li&gt;
&lt;li&gt;Light type - automatically enabled on smart phone sized devices, but also
available for desktop and tablets. The active facets and selected filter items are
displayed in the summary bar. When the user selects the summary bar, a navigable
dialog list of all facets is displayed. When the user selects a facet, the dialog
scrolls to show the list of filters that are available for the selected facet.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Additional Information&lt;/h3&gt;

For more information, go to &lt;b&gt;Developer Guide&lt;/b&gt; section in the Demo Kit and navigate to
&lt;b&gt;More About Controls&lt;/b&gt; &gt; &lt;b&gt;sap.m&lt;/b&gt; &gt; &lt;b&gt;Facet Filter&lt;/b&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="lists" />
      <xs:element name="buttons" />
      <xs:element name="removeFacetIcons" />
      <xs:element name="popover" />
      <xs:element name="addFacetButton" />
      <xs:element name="dialog" />
      <xs:element name="summaryBar" />
      <xs:element name="resetButton" />
      <xs:element name="arrowLeft" />
      <xs:element name="arrowRight" />
    </xs:sequence>
    <xs:attribute name="showPersonalization" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt; and the FacetFilter type is &lt;code&gt;Simple&lt;/code&gt;, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the default appearance of the FacetFilter on the device. Possible values are &lt;code&gt;Simple&lt;/code&gt; (default) and &lt;code&gt;Light&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveSearch" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables/disables live search in the search field of all &lt;code&gt;sap.m.FacetFilterList&lt;/code&gt; instances.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSummaryBar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Shows the summary bar instead of the FacetFilter buttons bar when set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showReset" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Shows/hides the FacetFilter Reset button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showPopoverOKButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt;, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lists" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Collection of FacetFilterList controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation of buttons that open each FacetFilterList popover. These buttons are displayed only when the FacetFilter is of type &lt;code&gt;Simple&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeFacetIcons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation of icons for setting FacetFilterLists to inactive, thereby, removing the FacetFilter button from the display. The icon is displayed only if personalization is enabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="popover" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the FacetFilterLists popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addFacetButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the Add Facet button. This button allows the user to open the facet dialog and add or configure facets. This is displayed only if personalization is enabled and the FacetFilter is of type &lt;code&gt;Simple&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dialog" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the dialog that displays the facet and filter items pages.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="summaryBar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the summary bar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resetButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the Reset button displayed for FacetFilter of type &lt;code&gt;Simple&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="arrowLeft" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the arrow that scrolls the facets to the left when the FacetFilter is set to type &lt;code&gt;Simple&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="arrowRight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the arrow that scrolls the facets to the right when the FacetFilter is set to type &lt;code&gt;Simple&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reset" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="confirm" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user confirms filter selection.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FacetFilterItem" type="FacetFilterItem" />
  <xs:complexType name="FacetFilterItem">
    <xs:annotation>
      <xs:documentation>
Represents a value for the {@link sap.m.FacetFilterList} control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:attribute name="key" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Can be used as input for subsequent actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text to be displayed for the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="count" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of objects that match this item in the target data set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FacetFilterList" type="FacetFilterList" />
  <xs:complexType name="FacetFilterList">
    <xs:annotation>
      <xs:documentation>
Represents a list of values for the {@link sap.m.FacetFilter} control.

&lt;b&gt;Note: &lt;/b&gt;&lt;code&gt;FacetFilterList&lt;/code&gt; is a subclass of {@link sap.m.List} and supports
growing enablement feature via the property &lt;code&gt;growing&lt;/code&gt;. When you use this feature,
be aware that it only works with one-way data binding.
Having growing feature enabled when the &lt;code&gt;items&lt;/code&gt; aggregation is bound to
a model with two-way data binding, may lead to unexpected and/or inconsistent
behavior across browsers, such as unexpected closing of the list.

While the &lt;code&gt;FacetFilterList&lt;/code&gt; popup is opened (when the user selects a button
corresponding to the list's name), any other activities leading to focus change will
close it. For example, when the popup is opened and the app developer loads a
{@link sap.m.BusyDialog} or any other dialog that obtains the focus, the popup will
be closed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="List">
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to &lt;code&gt;Simple&lt;/code&gt;. It is also displayed as a list item in the facet page of the dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wordWrap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt;, the item text wraps when it is too long.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multiSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether multiple or single selection is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that the list is displayed as a button when the FacetFilter type is set to &lt;code&gt;Simple&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableCaseInsensitiveSearch" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt;, enables case-insensitive search for OData.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allCount" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the number of objects that match this item in the target data set when all filter items are selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sequence" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="key" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Unique identifier for this filter list.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showRemoveFacetIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether remove icon for facet is visible or hidden.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="retainListSequence" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Retains the list sequence if it is inactive and made active again.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dataType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
FacetFilterList data type. Only String data type will provide search function.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="listOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired before the filter list is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="listClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Triggered after the list of items is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FeedContent" type="FeedContent" />
  <xs:complexType name="FeedContent">
    <xs:annotation>
      <xs:documentation>
Displays a tile containing the text of the feed, a subheader, and a numeric value.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_contentTextAgr" />
    </xs:sequence>
    <xs:attribute name="size" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Updates the size of the chart. If not set then the default size is applied based on the device tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subheader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The subheader.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The actual value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The semantic color of the value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truncateValueTo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The number of characters to display for the value property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_contentTextAgr" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for the content text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the feed content is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FeedInput" type="FeedInput" />
  <xs:complexType name="FeedInput">
    <xs:annotation>
      <xs:documentation>
The Feed Input allows the user to enter text for a new feed entry and then post it.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set this flag to "false" to disable both text input and post button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rows" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of visible text lines for the control.
&lt;b&gt;Note:&lt;/b&gt; Minimum value is 2, maximum value is 15.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showExceededText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.

If set to &lt;code&gt;false&lt;/code&gt;, the user is not allowed to enter more characters than what is set in the &lt;code&gt;maxLength&lt;/code&gt; property.
If set to &lt;code&gt;true&lt;/code&gt;, the characters exceeding the &lt;code&gt;maxLength&lt;/code&gt; value are selected on paste and the counter below
the input field displays their number.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The maximum length (the maximum number of characters) for the feed's input value. By default this is not limited.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growing" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates the ability of the control to automatically grow and shrink dynamically with its content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingMaxLines" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum number of lines that the control can grow.
Value is set to 0 by default, which means an unlimited numbers of rows.
&lt;b&gt;Note:&lt;/b&gt; Minimum value to set is equal to the &lt;code&gt;rows&lt;/code&gt; property value, maximum value is 15.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="placeholder" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The placeholder text shown in the input area as long as the user has not entered any text value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The text value of the feed input. As long as the user has not entered any text the post button is disabled
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.

If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.

Please be aware that this property is relevant only for images and not for icons.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttonTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element)
or an instance of sap.ui.core.TooltipBase.
If a new tooltip is set, any previously set tooltip is deactivated.
The default value is set language dependent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ariaLabelForPicture" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Text for Picture which will be read by screenreader.
If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="post" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The Post event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FeedListItem" type="FeedListItem" />
  <xs:complexType name="FeedListItem">
    <xs:annotation>
      <xs:documentation>
The control provides a set of properties for text, sender information, time stamp.
Beginning with release 1.23 the new feature expand / collapse was introduced, which uses the property maxCharacters.
Beginning with release 1.44, sap.m.FormattedText was introduced which allows html formatted text to be displayed
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="actions" />
      <xs:element name="_text" />
      <xs:element name="_actionSheet" />
      <xs:element name="_actionButton" />
    </xs:sequence>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
Icon is only shown if showIcon = true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon displayed when the list item is active.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sender" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sender of the chunk
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moreLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Customizable text for the "MORE" link at the end of the feed list item.&lt;br/&gt; When the maximum number of characters defined by the &lt;code&gt;maxCharacters&lt;/code&gt; property is exceeded and the text of the feed list item is collapsed, the "MORE" link can be used to expand the feed list item and show the rest of the text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lessLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Customizable text for the "LESS" link at the end of the feed list item.&lt;br/&gt; Clicking the "LESS" link collapses the item, hiding the text that exceeds the allowed maximum number of characters.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="info" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The Info text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timestamp" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This chunks timestamp
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="senderActive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconActive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to "true" (default), icons will be displayed, if set to false icons are hidden
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="convertLinksToAnchorTags" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are the criteria for recognizing them.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="convertedLinksDefaultTarget" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxCharacters" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains {@link sap.m.FeedListItemAction elements} that are displayed in the action sheet.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation which contains the text value
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_actionSheet" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation that contains the actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_actionButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation that displays the action button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="senderPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when name of the sender is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the icon is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FeedListItemAction" type="FeedListItemAction" />
  <xs:complexType name="FeedListItemAction">
    <xs:annotation>
      <xs:documentation>
An action item of FeedListItem
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon of the action.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The text of the item. It is used as a tooltip and for accessibility reasons.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="key" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The key of the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;press&lt;/code&gt; event is fired when the user triggers the corresponding action.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FlexBox" type="FlexBox" />
  <xs:complexType name="FlexBox">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.FlexBox&lt;/code&gt; control builds the container for a flexible box layout.&lt;br/&gt;
&lt;br/&gt;
&lt;b&gt;Note:&lt;/b&gt; Be sure to check the &lt;code&gt;renderType&lt;/code&gt; setting to avoid issues due to browser inconsistencies.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height of the &lt;code&gt;sap.m.FlexBox&lt;/code&gt;. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the &lt;code&gt;sap.m.FlexBox&lt;/code&gt;. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayInline" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;sap.m.FlexBox&lt;/code&gt; is in block or inline mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="direction" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the direction of the layout of child elements.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fitContainer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;sap.m.FlexBox&lt;/code&gt; will be sized to completely fill its container. If the &lt;code&gt;sap.m.FlexBox&lt;/code&gt; is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="renderType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the layout is rendered as a series of divs or as an unordered list (ul).&lt;br/&gt;
&lt;br/&gt;
We recommend to use &lt;code&gt;Bare&lt;/code&gt; in most cases to avoid layout issues due to browser inconsistencies.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="justifyContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the layout behavior along the main axis.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alignItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the layout behavior of items along the cross-axis.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alignContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the layout behavior of container lines when there's extra space along the cross-axis.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the background style of the &lt;code&gt;sap.m.FlexBox&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Flex items within the flexible box layout
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FlexItemData" type="FlexItemData" />
  <xs:complexType name="FlexItemData">
    <xs:annotation>
      <xs:documentation>
Holds layout data for a FlexBox / HBox / VBox.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:LayoutData">
    <xs:attribute name="alignSelf" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines cross-axis alignment of individual element (not currently supported in Internet Explorer).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="order" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the display order of flex items independent of their source code order.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growFactor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the flexibility of the flex item when allocatable space is remaining.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="shrinkFactor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The minimum height of the flex item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The maximum height of the flex item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The minimum height of the flex item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The maximum height of the flex item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="styleClass" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The style class will be applied to the flex item and can be used for CSS selectors.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the background style of the flex item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="FormattedText" type="FormattedText" />
  <xs:complexType name="FormattedText">
    <xs:annotation>
      <xs:documentation>
The FormattedText control allows the usage of a limited set of tags for inline display of formatted text in HTML format.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="htmlText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Text in HTML format.
The following tags are supported:
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;abbr&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;blockquote&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;br&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;cite&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;code&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;em&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;h1&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;h2&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;h3&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;h4&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;h5&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;h6&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;strong&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;span&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;u&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;dl&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;dt&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;dl&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;ul&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;ol&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;li&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;class, style,&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; attributes are allowed.
If &lt;code&gt;target&lt;/code&gt; is not set, links open in a new window by default.
&lt;p&gt;Only safe &lt;code&gt;href&lt;/code&gt; attributes can be used. See {@link module:sap/base/security/URLWhitelist URLWhitelist}.

&lt;b&gt;Note:&lt;/b&gt; Keep in mind that not supported HTML tags and
the content nested inside them are both not rendered by the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional width of the control in CSS units.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="convertLinksToAnchorTags" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether strings that appear to be links will be converted to HTML anchor tags,
and what are the criteria for recognizing them.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="convertedLinksDefaultTarget" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the &lt;code&gt;target&lt;/code&gt; attribute of the generated HTML anchor tags.

&lt;b&gt;Note:&lt;/b&gt; Applicable only if &lt;code&gt;ConvertLinksToAnchorTags&lt;/code&gt; property is used with a value other than &lt;code&gt;sap.m.LinkConversion.None&lt;/code&gt;.
Options are the standard values for the &lt;code&gt;target&lt;/code&gt; attribute of the HTML anchor tag:
&lt;code&gt;_self&lt;/code&gt;, &lt;code&gt;_top&lt;/code&gt;, &lt;code&gt;_blank&lt;/code&gt;, &lt;code&gt;_parent&lt;/code&gt;, &lt;code&gt;_search&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional height of the control in CSS units.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GenericTag" type="GenericTag" />
  <xs:complexType name="GenericTag">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.GenericTag&lt;/code&gt; control displays app-specific, essential
information.
&lt;h3&gt;Structure&lt;/h3&gt;
The control consists of four different parts:
&lt;ul&gt;
&lt;li&gt;Status indicator with semantic colors (required)&lt;/li&gt;
&lt;li&gt;Icon that is displayed in the same color as the status indicator (optional)&lt;/li&gt;
&lt;li&gt;Text that is truncated automatically (required)&lt;/li&gt;
&lt;li&gt;Content area that can display either a control of type {@link sap.m.ObjectNumber} or a warning icon (optional)&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="value" />
      <xs:element name="_statusIcon" />
      <xs:element name="_errorIcon" />
    </xs:sequence>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text rendered by the control. It's a value-descriptive text rendered on one line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="status" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the control status that is represented in different colors,
including the the color bar and the color and type of the displayed icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="design" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the visual mode of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the state of the control.

&lt;b&gt;Note:&lt;/b&gt; When the error state is set, a warning type of icon is displayed that
overrides the control set through the &lt;code&gt;value&lt;/code&gt; aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Numeric value rendered by the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_statusIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon indicating the status of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_errorIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon for visualization when error is thrown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user clicks/taps on the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GenericTile" type="GenericTile" />
  <xs:complexType name="GenericTile">
    <xs:annotation>
      <xs:documentation>
Displays header, subheader, and a customizable main area in a tile format. Since 1.44, also an in-line format which contains only header and subheader is supported.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="tileContent" />
      <xs:element name="icon" />
      <xs:element name="_titleText" />
      <xs:element name="_failedMessageText" />
    </xs:sequence>
    <xs:attribute name="mode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The mode of the GenericTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The header of the tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subheader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The subheader of the tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="failedText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The message that appears when the control is in the Failed state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="size" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The size of the tile. If not set, then the default size is applied based on the device.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="frameType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The frame type: OneByOne or TwoByOne. Set to OneByOne as default if no property is defined or set to Auto by the app.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundImage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The URI of the background image.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerImage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The load status.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="imageDescription" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Description of a header image that is used in the tooltip.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scope" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Changes the visualization in order to enable additional actions with the Generic Tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeBehavior" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;TileSizeBehavior.Small&lt;/code&gt;, the tile size is the same as it would be on a small-screened phone (374px wide and lower),
 regardless of the screen size of the actual device being used.
 If set to &lt;code&gt;TileSizeBehavior.Responsive&lt;/code&gt;, the tile size adapts to the size of the screen.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ariaLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Additional description for aria-label. The aria-label is rendered before the standard aria-label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrappingType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the type of text wrapping to be used (hyphenated or normal).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tileContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of the tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
An icon or image to be displayed in the control.
This aggregation is deprecated since version 1.36.0, to display an icon or image use sap.m.ImageContent control instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_titleText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for the title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_failedMessageText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for the message in the failed state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the user presses the tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GroupHeaderListItem" type="GroupHeaderListItem" />
  <xs:complexType name="GroupHeaderListItem">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;sap.m.GroupHeaderListItem&lt;/code&gt; is used to display the title of a group and act as separator between groups in &lt;code&gt;sap.m.List&lt;/code&gt; and &lt;code&gt;sap.m.Table&lt;/code&gt;.
&lt;b&gt;Note:&lt;/b&gt; The inherited properties &lt;code&gt;unread&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt;, &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;press&lt;/code&gt; event from &lt;code&gt;sap.m.ListItemBase&lt;/code&gt; are not supported.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the group header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="count" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
&lt;b&gt;Note:&lt;/b&gt; Will not be displayed if not set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="upperCase" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Allows to uppercase the group title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GrowingEnablement" type="GrowingEnablement" />
  <xs:complexType name="GrowingEnablement">
    <xs:complexContent>
      <xs:extension base="n1:Object">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="GrowingList" type="GrowingList" />
  <xs:complexType name="GrowingList">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;sap.m.GrowingList&lt;/code&gt; control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="List">
    <xs:attribute name="threshold" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Number of items requested from the server. To activate this you should set growing property to "true"
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="triggerText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
This property can be used only if growing property is set "true" and scrollToLoad property is set "false".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scrollToLoad" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="HBox" type="HBox" />
  <xs:complexType name="HBox">
    <xs:annotation>
      <xs:documentation>
The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control, as it is just a specialized FlexBox control.&lt;br/&gt;
&lt;br/&gt;
&lt;b&gt;Note:&lt;/b&gt; Be sure to check the &lt;code&gt;renderType&lt;/code&gt; setting to avoid issues due to browser inconsistencies.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="FlexBox">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="HeaderContainer" type="HeaderContainer" />
  <xs:complexType name="HeaderContainer">
    <xs:annotation>
      <xs:documentation>
The container that provides a horizontal layout. It provides a horizontal scrolling on the mobile devices.
On the desktop, it provides scroll left and scroll right buttons. This control supports keyboard navigation.
You can use left and right arrow keys to navigate through the inner content. The Home key puts focus on the first control and the End key puts focus on the last control.
Use Enter or Space key to choose the control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="_scrollContainer" />
      <xs:element name="_prevButton" />
      <xs:element name="_nextButton" />
    </xs:sequence>
    <xs:attribute name="scrollStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scrollStepByItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Number of items to scroll when the user chose Next or Previous buttons. Relevant only for desktop.
Have priority over 'ScrollStep'. Have to be positive number.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scrollTime" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Scroll animation time in milliseconds.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showOverflowItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the incomplete item on the edge of visible area is displayed or hidden.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showDividers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, it shows dividers between the different content controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="orientation" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In horizontal mode
the content controls are displayed next to each other, in vertical mode the content controls are displayed
on top of each other.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the background color of the content. The visualization of the different options depends on the used theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation and as 'auto' in vertical orientation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation and as '100%' in vertical orientation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Content to add to HeaderContainer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_scrollContainer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Scroll container for smooth scrolling on different platforms.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_prevButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Button that allows to scroll to previous section.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_nextButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Button that allows to scroll to next section.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="HeaderContainerItemNavigator" type="HeaderContainerItemNavigator" />
  <xs:complexType name="HeaderContainerItemNavigator">
    <xs:annotation>
      <xs:documentation>
The header container item navigator is an extension of the {@link sap.ui.core.delegate.ItemNavigation} for {@link sap.m.HeaderContainer}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n2:ItemNavigation">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="HyphenationSupport" type="HyphenationSupport" />
  <xs:complexType name="HyphenationSupport">
    <xs:annotation>
      <xs:documentation>
Mixin which enables the use of hyphenation for controls.

The control has to implement sap.m.IHyphenation interface.
The mixin attaches to onBeforeRendering and prepares all texts which are needed for the control, provided by method sap.m.IHyphenation#getTextsToBeHyphenated.
In the control renderer, the methods sap.m.HyphenationSupport#writeHyphenationClass and sap.m.HyphenationSupport#getTextForRender have to be used.
If native hyphenation is available, the class for hyphenation will be added. If not - third-party hyphenation will be used.
      </xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:element name="IconTabBar" type="IconTabBar" />
  <xs:complexType name="IconTabBar">
    <xs:annotation>
      <xs:documentation>
The IconTabBar represents a collection of tabs with associated content.
&lt;h3&gt;Overview&lt;/h3&gt;
The IconTabBar can be used for navigation within an object, or as a filter. Different types of IconTabBar are used based on the contents.
&lt;ul&gt;
&lt;li&gt;Filter - There is only one main content for all tabs. The main content can be filtered, based on the selected tab.&lt;/li&gt;
&lt;li&gt;Normal tab bar - The contents of each tab are independent from each other.&lt;/li&gt;
&lt;li&gt;Combination of the above - There can be both filtered and independent contents.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
The IconTabBar can hold two types of entities {@link sap.m.IconTabFilter sap.m.IconTabFilter} and {@link sap.m.IconTabSeparator sap.m.IconTabSeparator}

The IconTabBarFilter holds all information on an item - text, icon and count.

The IconTabBarSeparator holds an icon that can be used to show a process that runs from item to item.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;Text only&lt;/h4&gt;
Uses text labels as tabs with optional counter
&lt;ul&gt;
&lt;li&gt;Used when there are no suitable icons for all items.&lt;/li&gt;
&lt;li&gt;Used when longer labels are needed.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;headerMode&lt;/code&gt; property is set to &lt;code&gt;Inline&lt;/code&gt; the text and the count are displayed in one line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UpperCase&lt;/code&gt; is disabled.&lt;/li&gt;
&lt;li&gt;Use title case.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Icon Tabs&lt;/h4&gt;
Round tabs with optional counter and label
&lt;ul&gt;
&lt;li&gt;Used when there are unique icons for all items.&lt;/li&gt;
&lt;li&gt;Only shorter labels are possible.&lt;/li&gt;
&lt;li&gt;Provide labels for all icons or for none. Do not mix these.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tabs as filters&lt;/h4&gt;
Tabs with filtered content from the same set of items
&lt;ul&gt;
&lt;li&gt;Provide an &lt;i&gt;"All"&lt;/i&gt; tab to show all items without filtering.&lt;/li&gt;
&lt;li&gt;Use counters to show the number of items in each filter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tabs as process steps&lt;/h4&gt;
Tabs show a single step in a process
&lt;ul&gt;
&lt;li&gt;Use an arrow (e.g. triple-chevron) as a separator to connect the steps.&lt;/li&gt;
&lt;li&gt;Use counters to show the number of items in each filter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Text-only tabs are never truncated.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;expandable&lt;/code&gt; property to specify whether users can collapse the tab container (default = true).&lt;/li&gt;
&lt;li&gt;On desktop, tabs can be dragged and dropped (property &lt;code&gt;enableTabReordering&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If you have a large number of tabs, you can scroll through them with the arrows. Additionally all tabs are available in an overflow button (property &lt;code&gt;showOverflowSelectList&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="content" />
      <xs:element name="_header" />
    </xs:sequence>
    <xs:attribute name="showSelection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the current selection should be visualized.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expandable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if the tabs are collapsible and expandable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expanded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the actual tab content is expanded or not.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Key of the selected tab item.

If the key has no corresponding aggregated item, no changes will apply.
If duplicate keys exists the first item matching the key is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="upperCase" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stretchContentHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the IconTabBar height is stretched to the maximum possible height
of its parent container. As a prerequisite, the height of the parent container must be
defined as a fixed value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="applyContentPadding" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the IconTabBar content fits to the full area.
The paddings are removed if it's set to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the background color of the IconTabBar.

Depending on the theme, you can change the state of
the background color to "Solid", "Translucent", or "Transparent".
Default is "Solid".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the header mode.
&lt;b&gt;Note:&lt;/b&gt; The Inline mode works only if no icons are set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showOverflowSelectList" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies if the overflow select list is displayed.

The overflow select list represents a list, where all tab filters are displayed,
so the user can select specific tab filter easier.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerBackgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the background color of the header.

Depending on the theme, you can change the state of
the background color to "Solid", "Translucent", or "Transparent".
Default is "Solid".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableTabReordering" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether tab reordering is enabled. Relevant only for desktop devices.
The {@link sap.m.IconTabSeparator sap.m.IconTabSeparator} cannot be dragged  and dropped
Items can be moved around {@link sap.m.IconTabSeparator sap.m.IconTabSeparator}
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tabDensityMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the visual density mode of the tabs.

The values that can be applied are &lt;code&gt;Cozy&lt;/code&gt;, &lt;code&gt;Compact&lt;/code&gt; and &lt;code&gt;Inherit&lt;/code&gt;.
&lt;code&gt;Cozy&lt;/code&gt; and &lt;code&gt;Compact&lt;/code&gt; render the control in one of these modes independent of the global density settings.
The &lt;code&gt;Inherit&lt;/code&gt; value follows the global density settings which are applied.
For compatibility reasons, the default value is &lt;code&gt;Cozy&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items displayed in the IconTabBar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Represents the contents displayed below the IconTabBar.
If there are multiple contents, they are rendered after each other.
The developer has to manage to display the right one or use the content aggregation
inside the IconTabFilter (which will be displayed instead if it is set).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation for managing the icon tab elements.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when an item is selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expand" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that the tab will expand or collapse.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="IconTabBarSelectList" type="IconTabBarSelectList" />
  <xs:complexType name="IconTabBarSelectList">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.IconTabBarSelectList&lt;/code&gt; displays a list of items that allows the user to select an item.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items displayed in the list.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the selection has changed.

&lt;b&gt;Note: &lt;/b&gt; The selection can be changed by pressing a non-selected item,
via keyboard and after the Enter or Space key is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="IconTabFilter" type="IconTabFilter" />
  <xs:complexType name="IconTabFilter">
    <xs:annotation>
      <xs:documentation>
Represents a selectable item inside an IconTabBar.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="count" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Represents the "count" text, which is displayed in the tab filter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showAll" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables special visualization for disabled filter (show all items).
&lt;b&gt;Note:&lt;/b&gt; You can use this property when you use &lt;code&gt;IconTabBar&lt;/code&gt; as a filter.
In order for it to be displayed correctly, the other tabs in the filter should consist of an icon, text and an optional count.
It can be set to true for the first tab filter.
You can find more detailed information in the {@link https://experience.sap.com/fiori-design-web/icontabbar/#tabs-as-filters UX Guidelines}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the icon to be displayed for the tab filter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the icon color.

If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
Possible semantic colors are: Neutral, Positive, Critical, Negative.
Instead of the semantic icon color the brand color can be used, this is named Default.
Semantic colors and brand colors should not be mixed up inside one IconTabBar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, it sends one or more requests,
trying to get the density perfect version of the image if this version of
the image doesn't exist on the server. Default value is set to true.

If bandwidth is key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the tab filter is rendered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="design" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the icon and the texts are placed vertically or horizontally.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content displayed for this item (optional).

If this content is set, it is displayed instead of the general content inside the IconTabBar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="IconTabHeader" type="IconTabHeader" />
  <xs:complexType name="IconTabHeader">
    <xs:annotation>
      <xs:documentation>
This control displays a number of IconTabFilters and IconTabSeparators. If the available horizontal
space is exceeded, a horizontal scrolling appears.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="_overflowButton" />
    </xs:sequence>
    <xs:attribute name="showSelection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the current selection is visualized.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Key of the selected item.

If the key has no corresponding aggregated item, no changes will apply.
If duplicate keys exists the first item matching, the key is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the control is rendered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the header mode.
&lt;b&gt;Note:&lt;/b&gt; The Inline mode works only if no icons are set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showOverflowSelectList" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies if the overflow select list is displayed.

The overflow select list represents a list, where all tab filters are displayed,
so the user can select specific tab filter easier.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the background color of the header.

Depending on the theme, you can change the state of
the background color to "Solid", "Translucent", or "Transparent".
Default is "Solid".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableTabReordering" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether tab reordering is enabled. Relevant only for desktop devices.
The {@link sap.m.IconTabSeparator sap.m.IconTabSeparator} cannot be dragged  and dropped
Items can be moved around {@link sap.m.IconTabSeparator sap.m.IconTabSeparator}
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tabDensityMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the visual density mode of the tabs.

The values that can be applied are &lt;code&gt;Cozy&lt;/code&gt;, &lt;code&gt;Compact&lt;/code&gt; and &lt;code&gt;Inherit&lt;/code&gt;.
&lt;code&gt;Cozy&lt;/code&gt; and &lt;code&gt;Compact&lt;/code&gt; render the control in one of these modes independent of the global density settings.
The &lt;code&gt;Inherit&lt;/code&gt; value follows the global density settings which are applied.
For compatibility reasons, the default value is &lt;code&gt;Cozy&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items displayed in the IconTabHeader.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_overflowButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation for managing the overflow button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when an item is selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="IconTabSeparator" type="IconTabSeparator" />
  <xs:complexType name="IconTabSeparator">
    <xs:annotation>
      <xs:documentation>
Represents an Icon used to separate 2 tab filters.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon to display for this separator. If no icon is given, a separator line is used instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the separator is rendered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, it sends one or more requests,
trying to get the density perfect version of the image if this version of
the image doesn't exist on the server. Default value is set to true.

If bandwidth is key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Image" type="Image" />
  <xs:complexType name="Image">
    <xs:annotation>
      <xs:documentation>
A wrapper around the IMG tag. The image can be loaded from a remote or local server.

Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.

There are various size setting options available, and the images can be combined with actions.

From version 1.30, new image mode sap.m.ImageMode.Background is added. When this mode is set, the src property is set using the css style 'background-image'. The properties 'backgroundSize', 'backgroundPosition', 'backgroundRepeat' have effect only when image is in sap.m.ImageMode.Background mode. In order to make the high density image correctly displayed, the 'backgroundSize' should be set to the dimension of the normal density version.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="detailBox" />
    </xs:sequence>
    <xs:attribute name="src" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="decorative" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A decorative image is included for design reasons. Accessibility tools will ignore decorative images.

Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alt" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The alternative text that is displayed in case the Image is not available, or cannot be displayed.
If the image is set to decorative this property is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useMap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The name of the image map that defines the clickable areas
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="densityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If this is set to &lt;code&gt;true&lt;/code&gt;, one or more network requests will be made
that try to obtain the density perfect version of the image.

By default, this is set to &lt;code&gt;false&lt;/code&gt;, so the src image is loaded directly
without attempting to fetch the density perfect image for high-density devices.

&lt;b&gt;Note:&lt;/b&gt; Before 1.60, the default value was set to &lt;code&gt;true&lt;/code&gt;, which
brought redundant network requests for apps that used the default but did not
provide density perfect image versions on server-side.
You should set this property to &lt;code&gt;true&lt;/code&gt; only if you also provide the
corresponding image versions for high-density devices.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeSrc" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The source property which is used when the image is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundPosition" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundRepeat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detailBox" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A &lt;code&gt;sap.m.LightBox&lt;/code&gt; instance, that will be opened automatically when the user interacts with the &lt;code&gt;Image&lt;/code&gt; control.

The &lt;code&gt;tap&lt;/code&gt; event will still be fired.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the user clicks on the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="load" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the image resource is loaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="error" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is fired when none of the fallback resources can be loaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ImageContent" type="ImageContent" />
  <xs:complexType name="ImageContent">
    <xs:annotation>
      <xs:documentation>
This control can be used to display image content in a GenericTile.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_content" />
    </xs:sequence>
    <xs:attribute name="src" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Description of image. This text is used to provide ScreenReader information.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for the image content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the image content is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Input" type="Input" />
  <xs:complexType name="Input">
    <xs:annotation>
      <xs:documentation>
Allows the user to enter and edit text or numeric values in one line.

&lt;h3&gt;Overview&lt;/h3&gt;

You can enable the autocomplete suggestion feature and the value help option to easily enter a valid value.

&lt;h3&gt;Guidelines&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Always provide a meaningful label for any input field &lt;/li&gt;
&lt;li&gt; Limit the length of the input field. This will visually emphasize the constraints for the field. &lt;/li&gt;
&lt;li&gt; Do not use the &lt;code&gt;placeholder&lt;/code&gt; property as a label.&lt;/li&gt;
&lt;li&gt; Use the &lt;code&gt;description&lt;/code&gt; property only for small fields with no placeholders (i.e. for currencies).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Structure&lt;/h3&gt;

The controls inherits from {@link sap.m.InputBase} which controls the core properties like:
&lt;ul&gt;
&lt;li&gt; editable / read-only &lt;/li&gt;
&lt;li&gt; enabled / disabled&lt;/li&gt;
&lt;li&gt; placeholder&lt;/li&gt;
&lt;li&gt; text direction&lt;/li&gt;
&lt;li&gt; value states&lt;/li&gt;
&lt;/ul&gt;
To aid the user during input, you can enable value help (&lt;code&gt;showValueHelp&lt;/code&gt;) or autocomplete (&lt;code&gt;showSuggestion&lt;/code&gt;).
&lt;strong&gt;Value help&lt;/strong&gt; will open a new dialog where you can refine your input.
&lt;strong&gt;Autocomplete&lt;/strong&gt; has three types of suggestions:
&lt;ul&gt;
&lt;li&gt; Single value - a list of suggestions of type &lt;code&gt;sap.ui.core.Item&lt;/code&gt; or &lt;code&gt;sap.ui.core.ListItem&lt;/code&gt; &lt;/li&gt;
&lt;li&gt; Two values - a list of two suggestions (ID and description) of type &lt;code&gt;sap.ui.core.Item&lt;/code&gt; or &lt;code&gt;sap.ui.core.ListItem&lt;/code&gt; &lt;/li&gt;
&lt;li&gt; Tabular suggestions of type &lt;code&gt;sap.m.ColumnListItem&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
The suggestions are stored in two aggregations &lt;code&gt;suggestionItems&lt;/code&gt; (for single and double values) and &lt;code&gt;suggestionRows&lt;/code&gt; (for tabular values).

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;b&gt;When to use:&lt;/b&gt;
Use the control for short inputs like emails, phones, passwords, fields for assisted value selection.

&lt;b&gt;When not to use:&lt;/b&gt;
Don't use the control for long texts, dates, designated search fields, fields for multiple selection.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="InputBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="suggestionItems" />
      <xs:element name="suggestionColumns" />
      <xs:element name="suggestionRows" />
      <xs:element name="_suggestionPopup" />
      <xs:element name="_valueHelpIcon" />
    </xs:sequence>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
HTML type of the internal &lt;code&gt;input&lt;/code&gt; tag (e.g. Text, Number, Email, Phone).
The particular effect of this property differs depending on the browser and the current language settings,
especially for the type Number.&lt;br/&gt;
This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.&lt;br/&gt;
Only the default value &lt;code&gt;sap.m.InputType.Text&lt;/code&gt; may be used in combination with data model formats.
&lt;code&gt;sap.ui.model&lt;/code&gt; defines extended formats that are mostly incompatible with normal HTML
representations for numbers and dates.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Maximum number of characters. Value '0' means the feature is switched off.
This parameter is not compatible with the input type &lt;code&gt;sap.m.InputType.Number&lt;/code&gt;.
If the input type is set to &lt;code&gt;Number&lt;/code&gt;, the &lt;code&gt;maxLength&lt;/code&gt; value is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Only used if type=date and no datepicker is available.
The data is displayed and the user input is parsed according to this format.
&lt;b&gt;Note:&lt;/b&gt; The value property is always of the form RFC 3339 (YYYY-MM-dd).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showValueHelp" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSuggestion" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueHelpOnly" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterSuggests" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether to filter the provided suggestions before showing them to the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxSuggestionWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
&lt;b&gt;Note:&lt;/b&gt; The value will be ignored if the actual width of the input field is larger than the specified parameter value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startSuggestion" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input.

&lt;b&gt;Note:&lt;/b&gt; When it's set to 0, suggest event is fired when input with no text gets focus. In this case no suggestion popup will open.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showTableSuggestionValueHelp" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.

&lt;b&gt;Note:&lt;/b&gt; If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The description is a text after the input field, e.g. units of measurement, currencies.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fieldWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueLiveUpdate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the key of the selected item.

&lt;b&gt;Note:&lt;/b&gt; If duplicate keys exist, the first item matching the key is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFormatMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the display text format mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textFormatter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the display text formatter function.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggestionRowValidator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the validation callback function called when a suggestion row gets selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableSuggestionsHighlighting" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the suggestions highlighting is enabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autocomplete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether autocomplete is enabled.
Works only if "showSuggestion" property is set to true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggestionItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the items displayed in the suggestion popup. Changing this aggregation
(by calling &lt;code&gt;addSuggestionItem&lt;/code&gt;, &lt;code&gt;insertSuggestionItem&lt;/code&gt;,
&lt;code&gt;removeSuggestionItem&lt;/code&gt;, &lt;code&gt;removeAllSuggestionItems&lt;/code&gt;, or
&lt;code&gt;destroySuggestionItems&lt;/code&gt;) after &lt;code&gt;Input&lt;/code&gt; is rendered
opens/closes the suggestion popup.

To display suggestions with two text values, add &lt;code&gt;sap.ui.core.ListItem&lt;/code&gt;
as &lt;code&gt;SuggestionItems&lt;/code&gt; (since 1.21.1). For the selected
&lt;code&gt;ListItem&lt;/code&gt;, only the first value is returned to the input field.

&lt;b&gt;Note:&lt;/b&gt; Only &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;additionalText&lt;/code&gt; property values
of the item are displayed. For example, if an &lt;code&gt;icon&lt;/code&gt; is set, it is
ignored. To display more information per item (including icons), you can use the
&lt;code&gt;suggestionRows&lt;/code&gt; aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggestionColumns" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table columns; for more details see the aggregation "suggestionRows".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggestionRows" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table cells.
The items of this aggregation are to be bound directly or to set in the suggest event method.
&lt;b&gt;Note:&lt;/b&gt; If this aggregation is filled, the aggregation suggestionItems will be ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_suggestionPopup" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The suggestion popup (can be a Dialog or Popover); aggregation needed to also propagate the model and bindings to the content of the popover
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_valueHelpIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon on the right side of the Input
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the value of the input is changed by user interaction - each keystroke, delete, paste, etc.

&lt;b&gt;Note:&lt;/b&gt; Browsing autocomplete suggestions does not fires the event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueHelpRequest" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When the value help indicator is clicked, this event will be fired.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggest" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggestionItemSelected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="submit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when user presses the &lt;code&gt;Enter&lt;/code&gt; key on the input.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The event is fired independent of whether there was a change before or not. If a change was performed, the event is fired after the change event.&lt;/li&gt;
&lt;li&gt;The event is also fired when an item of the select list is selected via &lt;code&gt;Enter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The event is only fired on an input which allows text input (&lt;code&gt;editable&lt;/code&gt;, &lt;code&gt;enabled&lt;/code&gt; and not &lt;code&gt;valueHelpOnly&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="InputBase" type="InputBase" />
  <xs:complexType name="InputBase">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.InputBase&lt;/code&gt; control provides a basic functionality for input controls.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_endIcon" />
      <xs:element name="_beginIcon" />
    </xs:sequence>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the value of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.

&lt;b&gt;Note:&lt;/b&gt; If the provided width is too small, the control gets stretched to
its min width, which is needed in order for the control to be usable and well aligned.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the user can interact with the control or not.
&lt;b&gt;Note:&lt;/b&gt; Disabled controls cannot be focused and they are out of the tab-chain.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Visualizes the validation state of the control, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the name of the control for the purposes of form submission.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="placeholder" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines a short hint intended to aid the user with data entry when the control has no value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the control can be modified by the user or not.
&lt;b&gt;Note:&lt;/b&gt; A user can tab to non-editable control, highlight it, and copy the text from it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueStateText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showValueStateMessage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the value state message should be shown or not.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the horizontal alignment of the text that is shown inside the input field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text directionality of the input field, e.g. &lt;code&gt;RTL&lt;/code&gt;, &lt;code&gt;LTR&lt;/code&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="required" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
the field and a label (see aggregation &lt;code&gt;labelFor&lt;/code&gt; of &lt;code&gt;sap.m.Label&lt;/code&gt;) cannot be established
(e.g. one label should label multiple fields).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_endIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icons that will be placed after the input field
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_beginIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icons that will be placed before the input field
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="InputListItem" type="InputListItem" />
  <xs:complexType name="InputListItem">
    <xs:annotation>
      <xs:documentation>
List item should be used for a label and an input field.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Label of the list item
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Content controls can be added
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Label" type="Label" />
  <xs:complexType name="Label">
    <xs:annotation>
      <xs:documentation>
Provides a textual label for other controls.

&lt;h3&gt;Overview&lt;/h3&gt;
Labels are used as titles for single controls or groups of controls.
Labels for required fields are marked with an asterisk.

Label appearance can be influenced by properties, such as &lt;code&gt;textAlign&lt;/code&gt;,
&lt;code&gt;design&lt;/code&gt;, &lt;code&gt;displayOnly&lt;/code&gt;, &lt;code&gt;wrapping&lt;/code&gt; and
&lt;code&gt;wrappingType&lt;/code&gt;.

As of version 1.50, the default value of the &lt;code&gt;wrapping&lt;/code&gt; property is set
to &lt;code&gt;false&lt;/code&gt;.

As of version 1.60, you can hyphenate the label's text with the use of the
&lt;code&gt;wrappingType&lt;/code&gt; property. For more information, see
{@link topic:6322164936f047de941ec522b95d7b70 Text Controls Hyphenation}.

&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It's recommended to use the &lt;code&gt;Label&lt;/code&gt; in Form controls.&lt;/li&gt;
&lt;li&gt;Use title case for labels.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; It is not recommended to use labels in Bold.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="design" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the design of a Label to either Standard or Bold.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the Label text to be displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the width of the label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="required" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that user input is required for input control labeled by the sap.m.Label.
When the property is set to true and associated input field is empty an asterisk character is added to the label text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayOnly" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the label is in displayOnly mode.

&lt;b&gt;Note:&lt;/b&gt; This property should be used only in Form controls in preview mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the wrapping of the text within the &lt;code&gt;Label&lt;/code&gt;.
If set to true the &lt;code&gt;Label&lt;/code&gt; will wrap, when set to false the &lt;code&gt;Label&lt;/code&gt; will be truncated and replaced with ellipsis which is the default behavior.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrappingType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the type of text wrapping to be used (hyphenated or normal).

&lt;b&gt;Note:&lt;/b&gt; This property takes effect only when the &lt;code&gt;wrapping&lt;/code&gt;
property is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="vAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the vertical alignment of the &lt;code&gt;Label&lt;/code&gt; related to the tallest and lowest element on the line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="LightBox" type="LightBox" />
  <xs:complexType name="LightBox">
    <xs:annotation>
      <xs:documentation>
Represents a popup containing an image and a footer.

&lt;h3&gt;Overview&lt;/h3&gt;

The purpose of the control is to display an image in its original size as long as this is possible.
On smaller screens images are scaled down to fit.

&lt;strong&gt;Notes:&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;If the image doesn't load in 10 seconds, an error is displayed.&lt;/li&gt;
    &lt;li&gt;Setting the &lt;code&gt;imageContent&lt;/code&gt; aggregation of the control as well as the source of the image and the title of the image is &lt;u&gt;mandatory&lt;/u&gt;.
         If the image source is not set, the control will not open.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure&lt;/h3&gt;

Each LightBox holds a {@link sap.m.LightBoxItem LightBoxItem} which keeps the properties of the image:
&lt;ul&gt;
    &lt;li&gt; imageSrc - The source URI of the image &lt;/li&gt;
    &lt;li&gt; title - The title of the image &lt;/li&gt;
    &lt;li&gt; subtitle - The subtitle of the image &lt;/li&gt;
    &lt;li&gt; alt - The alt text of the image &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;

The most common use case is to click on an image thumbnail to view it in bigger size.
When the image that should be displayed in the control cannot be loaded, an error is displayed in the popup.

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

On a mobile device, flipping the device to landscape will flip the lightbox and the image will be adjusted to fit the new dimensions.

&lt;h3&gt;Additional Information&lt;/h3&gt;

Check out the &lt;a href="/#docs/api/symbols/sap.m.LightBox.html" &gt;API Reference&lt;/a&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="imageContent" />
      <xs:element name="_closeButton" />
      <xs:element name="_errorIcon" />
      <xs:element name="_errorTitle" />
      <xs:element name="_errorSubtitle" />
      <xs:element name="_verticalLayout" />
      <xs:element name="_invisiblePopupText" />
      <xs:element name="_busy" />
    </xs:sequence>
    <xs:attribute name="imageContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aggregation which holds data about the image and its description. Although multiple LightBoxItems
may be added to this aggregation only the first one in the list will be taken into account.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_closeButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The close button aggregation inside the LightBox control. This button has to have text in it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_errorIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The error icon displayed when the image could not be loaded in time.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_errorTitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The main error message displayed when the image could not be loaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_errorSubtitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The detailed error message displayed when the image could not be loaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_verticalLayout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A layout control used to display the error texts when the image could not be loaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_invisiblePopupText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden text used for accessibility of the popup.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_busy" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
BusyIndicator for loading state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="LightBoxItem" type="LightBoxItem" />
  <xs:complexType name="LightBoxItem">
    <xs:annotation>
      <xs:documentation>
Represents an item which is displayed within an sap.m.LightBox. This item holds all properties of the image as
well as the title and subtitle.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_image" />
      <xs:element name="_title" />
      <xs:element name="_subtitle" />
    </xs:sequence>
    <xs:attribute name="imageSrc" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Source for the image. This property is mandatory. If not set the popup will not open
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alt" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Alt value for the image
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Title text for the image. This property is mandatory.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subtitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Subtitle text for the image
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_image" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The image aggregation inside the LightBoxItem control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The title aggregation inside the LightBoxItem control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_subtitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The subtitle aggregation inside the LightBoxItem control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Link" type="Link" />
  <xs:complexType name="Link">
    <xs:annotation>
      <xs:documentation>
A hyperlink control used to navigate to other apps and web pages or to trigger actions.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;Link&lt;/code&gt; control is a clickable text element visualized in such a way that it stands out
from the standard text. On hover, it changes its style to underlined text to provide
additional feedback to the user.

&lt;h3&gt;Usage&lt;/h3&gt;

You can set the &lt;code&gt;Link&lt;/code&gt; to be enabled or disabled.

To create a visual hierarchy in large lists of links, you can set the less important links as
&lt;code&gt;subtle&lt;/code&gt; or the more important ones as &lt;code&gt;emphasized&lt;/code&gt;.

To specify where the linked content is opened, you can use the &lt;code&gt;target&lt;/code&gt; property.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

If there is not enough space, the text of the &lt;code&gt;Link&lt;/code&gt; becomes truncated.
If the &lt;code&gt;wrapping&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, the text will be
displayed on several lines, instead of being truncated.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the displayed link text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the link can be triggered by the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="target" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies a target where the linked content will open.

Options are the standard values for window.open() supported by browsers:
&lt;code&gt;_self&lt;/code&gt;, &lt;code&gt;_top&lt;/code&gt;, &lt;code&gt;_blank&lt;/code&gt;, &lt;code&gt;_parent&lt;/code&gt;, &lt;code&gt;_search&lt;/code&gt;.
Alternatively, a frame name can be entered. This property is only used when the &lt;code&gt;href&lt;/code&gt; property is set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the width of the link (CSS-size such as % or px). When it is set, this is the exact size.
When left blank, the text defines the size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="href" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered,
this should not be set, but instead an event handler for the &lt;code&gt;press&lt;/code&gt; event should be registered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validateUrl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the link target URI should be validated.

If validation fails, the value of the &lt;code&gt;href&lt;/code&gt; property will still be set, but will not be applied to the DOM.

&lt;b&gt;Note:&lt;/b&gt; Additional whitelisting of URLs is allowed through
{@link module:sap/base/security/URLWhitelist URLWhitelist}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the link text is allowed to wrap when there is no sufficient space.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the horizontal alignment of the text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subtle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emphasized" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Emphasized links look visually more important than regular links.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the user triggers the link control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="List" type="List" />
  <xs:complexType name="List">
    <xs:annotation>
      <xs:documentation>
The List control provides a container for all types of list items.
For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..

See section "{@link topic:1da158152f644ba1ad408a3e982fd3df Lists}"
in the documentation for an introduction to &lt;code&gt;sap.m.List&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListBase">
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the background style of the list. Depending on the theme, you can change the state of the background from &lt;code&gt;Solid&lt;/code&gt; to &lt;code&gt;Translucent&lt;/code&gt; or to &lt;code&gt;Transparent&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ListBase" type="ListBase" />
  <xs:complexType name="ListBase">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.ListBase&lt;/code&gt; control provides a base functionality of the &lt;code&gt;sap.m.List&lt;/code&gt; and &lt;code&gt;sap.m.Table&lt;/code&gt; controls. Selection, deletion, unread states and inset style are also maintained in &lt;code&gt;sap.m.ListBase&lt;/code&gt;.

See section "{@link topic:295e44b2d0144318bcb7bdd56bfa5189 List, List Item, and Table}"
in the documentation for an introduction to subclasses of &lt;code&gt;sap.m.ListBase&lt;/code&gt; control.

&lt;b&gt;Note:&lt;/b&gt; The ListBase including all contained items may be completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists that contain many items. As such the usage of a list is not recommended for these use cases.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="swipeContent" />
      <xs:element name="headerToolbar" />
      <xs:element name="infoToolbar" />
      <xs:element name="contextMenu" />
    </xs:sequence>
    <xs:attribute name="inset" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the indentation of the container. Setting it to &lt;code&gt;true&lt;/code&gt; indents the list.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the header text that appears in the control.
&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;headerToolbar&lt;/code&gt; aggregation is set, then this property is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the header style of the control. Possible values are &lt;code&gt;Standard&lt;/code&gt; and &lt;code&gt;Plain&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footerText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the footer text that appears in the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the mode of the control (e.g. &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;SingleSelect&lt;/code&gt;, &lt;code&gt;MultiSelect&lt;/code&gt;, &lt;code&gt;Delete&lt;/code&gt;).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="includeItemInSelection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the items are selectable by clicking on the item itself (&lt;code&gt;true&lt;/code&gt;) rather than having to set the selection control first.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;SingleSelectMaster&lt;/code&gt; mode also provides this functionality by default.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showUnread" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Activates the unread indicator for all items, if set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noDataText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This text is displayed when the control contains no items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showNoData" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether or not the text specified in the &lt;code&gt;noDataText&lt;/code&gt; property is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableBusyIndicator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When this property is set to &lt;code&gt;true&lt;/code&gt;, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished.
By default, the busy indicator will be shown after one second. This behavior can be customized by setting the &lt;code&gt;busyIndicatorDelay&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="modeAnimationOn" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if animations will be shown while switching between modes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSeparators" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines which item separator style will be used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="swipeDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the &lt;code&gt;swipeContent&lt;/code&gt; aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growing" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt;, enables the growing feature of the control to load more items by requesting from the model.
&lt;b&gt;Note:&lt;/b&gt;: This feature only works when an &lt;code&gt;items&lt;/code&gt; aggregation is bound. Growing must not be used together with two-way binding.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingThreshold" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of items to be requested from the model for each grow.
This property can only be used if the &lt;code&gt;growing&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingTriggerText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle.
This property can only be used if the &lt;code&gt;growing&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingScrollToLoad" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control.
&lt;b&gt;Note:&lt;/b&gt; This property can only be used if the &lt;code&gt;growing&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt; and only if there is one instance of &lt;code&gt;sap.m.List&lt;/code&gt; or &lt;code&gt;sap.m.Table&lt;/code&gt; inside the scrollable scroll container (e.g &lt;code&gt;sap.m.Page&lt;/code&gt;).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the direction of the growing feature.
If set to &lt;code&gt;Downwards&lt;/code&gt; the user has to scroll down to load more items or the growing button is displayed at the bottom.
If set to &lt;code&gt;Upwards&lt;/code&gt; the user has to scroll up to load more items or the growing button is displayed at the top.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rememberSelections" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering).
&lt;b&gt;Note:&lt;/b&gt; This feature works only if two-way data binding for the &lt;code&gt;selected&lt;/code&gt; property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the &lt;code&gt;JSONModel&lt;/code&gt; is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines keyboard handling behavior of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sticky" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the section of the control that remains fixed at the top of the page during vertical scrolling as long as the control is in the viewport.

&lt;b&gt;Note:&lt;/b&gt; Enabling sticky column headers in List controls will not have any effect.

There is limited browser support.
Browsers that do not support this feature are listed below:
&lt;ul&gt;
&lt;li&gt;IE&lt;/li&gt;
&lt;li&gt;Edge lower than version 41 (EdgeHTML 16)&lt;/li&gt;
&lt;li&gt;Firefox lower than version 59&lt;/li&gt;
&lt;/ul&gt;

There are also some known limitations. A few are given below:
&lt;ul&gt;
&lt;li&gt;If the control is placed in layout containers that have the &lt;code&gt;overflow: hidden&lt;/code&gt; or &lt;code&gt;overflow: auto&lt;/code&gt; style definition, this can
prevent the sticky elements of the control from becoming fixed at the top of the viewport.&lt;/li&gt;
&lt;li&gt;If sticky column headers are enabled in the &lt;code&gt;sap.m.Table&lt;/code&gt; control, setting focus on the column headers will let the table scroll to the top.&lt;/li&gt;
&lt;li&gt;A transparent toolbar design is not supported for sticky bars. The toolbar will automatically get an intransparent background color.&lt;/li&gt;
&lt;li&gt;This feature supports only the default height of the toolbar control.&lt;li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the items contained within this control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="swipeContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
User can swipe to bring in this control on the right hand side of an item.
&lt;b&gt;Note:&lt;/b&gt; For non-touch devices, this functionality is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The header area can be used as a toolbar to add extra controls for user interactions.
&lt;b&gt;Note:&lt;/b&gt; When set, this overwrites the &lt;code&gt;headerText&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="infoToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A toolbar that is placed below the header to show extra information to the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contextMenu" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the context menu of the items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when selection is changed via user interaction. In &lt;code&gt;MultiSelect&lt;/code&gt; mode, this event is also fired on deselection.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when selection is changed via user interaction inside the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when delete icon is pressed by user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="swipe" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires after user's swipe action and before the &lt;code&gt;swipeContent&lt;/code&gt; is shown. On the &lt;code&gt;swipe&lt;/code&gt; event handler, &lt;code&gt;swipeContent&lt;/code&gt; can be changed according to the swiped item.
Calling the &lt;code&gt;preventDefault&lt;/code&gt; method of the event cancels the swipe action.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingStarted" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires before the new growing chunk is requested from the model.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingFinished" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires after the new growing chunk has been fetched from the model and processed by the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateStarted" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires before &lt;code&gt;items&lt;/code&gt; binding is updated (e.g. sorting, filtering)

&lt;b&gt;Note:&lt;/b&gt; Event handler should not invalidate the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateFinished" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires after &lt;code&gt;items&lt;/code&gt; binding is updated and processed by the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when an item is pressed unless the item's &lt;code&gt;type&lt;/code&gt; property is &lt;code&gt;Inactive&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpenContextMenu" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the context menu is opened.
When the context menu is opened, the binding context of the item is set to the given &lt;code&gt;contextMenu&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ListItemBase" type="ListItemBase" />
  <xs:complexType name="ListItemBase">
    <xs:annotation>
      <xs:documentation>
ListItemBase contains the base features of all specific list items.
&lt;b&gt;Note:&lt;/b&gt; If not mentioned otherwise in the individual subclasses, list items must only be used in the &lt;code&gt;items&lt;/code&gt; aggregation of &lt;code&gt;sap.m.ListBase&lt;/code&gt; controls.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the visual indication and behavior of the list items, e.g. &lt;code&gt;Active&lt;/code&gt;, &lt;code&gt;Navigation&lt;/code&gt;, &lt;code&gt;Detail&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unread" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Activates the unread indicator for the list item, if set to &lt;code&gt;true&lt;/code&gt;.
&lt;b&gt;Note:&lt;/b&gt; This flag is ignored when the &lt;code&gt;showUnread&lt;/code&gt; property of the parent is set to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the selected state of the list items.
&lt;b&gt;Note:&lt;/b&gt; Binding the &lt;code&gt;selected&lt;/code&gt; property in single selection modes may cause unwanted results if you have more than one selected items in your binding.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="counter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the counter value of the list items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="highlight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the highlight state of the list items.

Valid values for the &lt;code&gt;highlight&lt;/code&gt; property are values of the enumerations {@link sap.ui.core.MessageType} or
{@link sap.ui.core.IndicationColor}.

Accessibility support is provided through the associated {@link sap.m.ListItemBase#setHighlightText highlightText} property.
If the &lt;code&gt;highlight&lt;/code&gt; property is set to a value of {@link sap.ui.core.MessageType}, the &lt;code&gt;highlightText&lt;/code&gt;
property does not need to be set because a default text is used. However, the default text can be overridden by setting the
&lt;code&gt;highlightText&lt;/code&gt; property.
In all other cases the &lt;code&gt;highlightText&lt;/code&gt; property must be set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="highlightText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the semantics of the {@link sap.m.ListItemBase#setHighlight highlight} property for accessibility purposes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navigated" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The navigated state of the list item.

If set to &lt;code&gt;true&lt;/code&gt;, a navigation indicator is displayed at the end of the list item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user taps on the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detailTap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user taps on the detail button of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user clicks on the control.
&lt;b&gt;Note:&lt;/b&gt; This event is not fired when the parent &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;SingleSelectMaster&lt;/code&gt; or when the &lt;code&gt;includeItemInSelection&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.
If there is an interactive element that handles its own &lt;code&gt;press&lt;/code&gt; event then the list item's &lt;code&gt;press&lt;/code&gt; event is not fired.
Also see {@link sap.m.ListBase#attachItemPress}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detailPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user clicks on the detail button of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MaskInput" type="MaskInput" />
  <xs:complexType name="MaskInput">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.MaskInput&lt;/code&gt; control allows users to easily enter data in a certain format and in a fixed-width input
(for example: date, time, phone number, credit card number, currency, IP address, MAC address, and others).
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="InputBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="rules" />
    </xs:sequence>
    <xs:attribute name="placeholderSymbol" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines a placeholder symbol. Shown at the position where there is no user input yet.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mask" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Mask defined by its characters type (respectively, by its length).
You should consider the following important facts:
1. The mask characters normally correspond to an existing rule (one rule per unique char).
Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule
for digits, has the characters '2' and '0' as immutable).
2. Adding a rule corresponding to the &lt;code&gt;placeholderSymbol&lt;/code&gt; is not recommended and would lead to an unpredictable behavior.
3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable.
Use the double escape '^^' if you want to make use of the escape character as an immutable one.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rules" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A list of validation rules (one rule per mask character).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MaskInputRule" type="MaskInputRule" />
  <xs:complexType name="MaskInputRule">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.MaskInputRule&lt;/code&gt; control holds the mapping of a single &lt;code&gt;maskFormatSymbol&lt;/code&gt;
to the regular expression &lt;code&gt;regex&lt;/code&gt; that defines the allowed characters for the rule.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="maskFormatSymbol" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the symbol used in the mask format which will accept a certain range of characters.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="regex" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the allowed characters as a regular expression.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Menu" type="Menu" />
  <xs:complexType name="Menu">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.Menu&lt;/code&gt; control represents a hierarchical menu.
When opened on mobile devices it occupies the whole screen.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="_dialog" />
      <xs:element name="_menu" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the &lt;code&gt;Menu&lt;/code&gt; title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the items contained within this control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_dialog" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation that contains the inner &lt;code&gt;sap.m.Dialog&lt;/code&gt; for mobile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_menu" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation that contains the inner &lt;code&gt;sap.ui.unified.Menu&lt;/code&gt; for desktop and tablet.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemSelected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when a &lt;code&gt;MenuItem&lt;/code&gt; is selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the menu is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MenuButton" type="MenuButton" />
  <xs:complexType name="MenuButton">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.MenuButton&lt;/code&gt; control enables the user to show a hierarchical menu.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="menu" />
      <xs:element name="_button" />
    </xs:sequence>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text of the &lt;code&gt;MenuButton&lt;/code&gt;.
&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; In &lt;code&gt;Split&lt;/code&gt; &lt;code&gt;buttonMode&lt;/code&gt; with &lt;code&gt;useDefaultActionOnly&lt;/code&gt;
set to &lt;code&gt;false&lt;/code&gt;, the text is changed to display the last selected item's text,
while in &lt;code&gt;Regular&lt;/code&gt; &lt;code&gt;buttonMode&lt;/code&gt; the text stays unchanged.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the type of the &lt;code&gt;MenuButton&lt;/code&gt; (for example, Default, Accept, Reject, Back, etc.)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the &lt;code&gt;MenuButton&lt;/code&gt;.
&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt;As per visual design this width can be maximum of 12rem (192px).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Boolean property to enable the control (default is &lt;code&gt;true&lt;/code&gt;).
&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon to be displayed as a graphical element within the button.
It can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The source property of an alternative icon for the active (pressed) state of the button.
Both active and default icon properties should be defined and of the same type - image or icon font.
If the &lt;code&gt;icon&lt;/code&gt; property is not set or has a different type, the active icon is not displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When set to &lt;code&gt;true&lt;/code&gt; (default), one or more requests are sent trying to get the
density perfect version of image if this version of image doesn't exist on the server.
If only one version of image is provided, set this value to &lt;code&gt;false&lt;/code&gt; to
avoid the attempt of fetching density perfect image.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the element's text directionality with enumerated options.
By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttonMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the &lt;code&gt;MenuButton&lt;/code&gt; is set to &lt;code&gt;Regular&lt;/code&gt; or &lt;code&gt;Split&lt;/code&gt; mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="menuPosition" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the position of the popup menu with enumerated options.
By default, the control opens the menu at its bottom left side.

&lt;b&gt;Note:&lt;/b&gt; In the case that the menu has no space to show itself in the view port
of the current window it tries to open itself to
the inverted direction.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useDefaultActionOnly" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected.
Usable only if &lt;code&gt;buttonMode&lt;/code&gt; is set to &lt;code&gt;Split&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="menu" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the menu that opens for this button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_button" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation that contains the button part.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultAction" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the &lt;code&gt;buttonMode&lt;/code&gt; is set to &lt;code&gt;Split&lt;/code&gt; and the user presses the main button
unless &lt;code&gt;useDefaultActionOnly&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; and another action
from the menu has been selected previously.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MenuItem" type="MenuItem" />
  <xs:complexType name="MenuItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;MenuItem&lt;/code&gt; control is used for creating items for the &lt;code&gt;sap.m.Menu&lt;/code&gt;.
It is derived from a core &lt;code&gt;sap.ui.core.Item&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon, which belongs to the item.
This can be a URI to an image or an icon font URI.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the item should be visible on the screen. If set to &lt;code&gt;false&lt;/code&gt;,
a placeholder is rendered instead of the real item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startsSection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether a visual separator should be rendered before the item.
&lt;b&gt;Note:&lt;/b&gt; If an item is invisible its separator is also not displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the sub-items contained within this element.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired after the item has been pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="propertyChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when a property of the item changes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="aggregationChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when aggregation of the item changes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MenuListItem" type="MenuListItem" />
  <xs:complexType name="MenuListItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.MenuListItem&lt;/code&gt; is a list item used in the &lt;code&gt;sap.m.Menu&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the &lt;code&gt;MenuListItem&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon of the &lt;code&gt;MenuListItem&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
&lt;b&gt;Note:&lt;/b&gt; If bandwidth is a key factor for the application, set this value to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the &lt;code&gt;title&lt;/code&gt; text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startsSection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether a visual separator should be rendered before the item.
&lt;b&gt;Note:&lt;/b&gt; If an item is invisible, its separator is also not displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MessageItem" type="MessageItem" />
  <xs:complexType name="MessageItem">
    <xs:annotation>
      <xs:documentation>
A wrapper control used to hold different types of system messages.
&lt;h3&gt;Structure&lt;/h3&gt;
The message item holds the basic set of properties for a system message:
&lt;ul&gt;
&lt;li&gt; Type, title, subtitle and description &lt;/li&gt;
&lt;li&gt; If the description contains markup, the &lt;code&gt;markupDescription&lt;/code&gt; needs to be set to true, to ensure it is interpreted correctly. &lt;/li&gt;
&lt;li&gt; If the long text description can be specified by a URL by setting, the &lt;code&gt;longtextUrl&lt;/code&gt; property. &lt;/li&gt;
&lt;li&gt; The message item can have a single {@link sap.m.Link} after the description. It is stored in the &lt;code&gt;link&lt;/code&gt; aggregation. &lt;/li&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;b&gt;Note:&lt;/b&gt; The MessageItem control replaces {@link sap.m.MessagePopoverItem} as a more generic wrapper for messages.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="link" />
    </xs:sequence>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the type of the message
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the title of the message
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subtitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the subtitle of the message
&lt;b&gt;Note:&lt;/b&gt; This is only visible when the &lt;code&gt;title&lt;/code&gt; property is not empty.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies detailed description of the message
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markupDescription" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies if description should be interpreted as markup
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="longtextUrl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies long text description location URL
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="counter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of messages for a given message.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Name of a message group the current item belongs to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeTitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the title of the item will be interactive.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="link" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Adds an sap.m.Link control which will be displayed at the end of the description of a message.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MessageListItem" type="MessageListItem" />
  <xs:complexType name="MessageListItem">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;sap.m.MessageListItem&lt;/code&gt; is an extension of the &lt;code&gt;sap.m.StandardListItem&lt;/code&gt; with an interactive title.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="StandardListItem">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MessagePage" type="MessagePage" />
  <xs:complexType name="MessagePage">
    <xs:annotation>
      <xs:documentation>
Displays an empty page with an icon and a header when certain conditions are met.
&lt;h3&gt;Overview&lt;/h3&gt;
MessagePage is displayed when there is no data or matching content. There are different use cases where a MessagePage might be visualized, for example:
&lt;ul&gt;
&lt;li&gt;The search query returned no results&lt;/li&gt;
&lt;li&gt;The app contains no items&lt;/li&gt;
&lt;li&gt;There are too many items&lt;/li&gt;
&lt;li&gt;The application is loading&lt;/li&gt;
&lt;/ul&gt;
The layout is unchanged but the text and icon vary depending on the use case.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;MessagePage&lt;/code&gt; is not intended to be used as a top-level control,
but rather used within controls such as &lt;code&gt;NavContainer&lt;/code&gt;, &lt;code&gt;App&lt;/code&gt;, &lt;code&gt;Shell&lt;/code&gt; or other container controls.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="customText" />
      <xs:element name="customDescription" />
      <xs:element name="buttons" />
      <xs:element name="_internalHeader" />
      <xs:element name="_formattedText" />
      <xs:element name="_text" />
      <xs:element name="_description" />
    </xs:sequence>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the main text displayed on the MessagePage.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the detailed description that shows additional information on the MessagePage.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the title in the header of MessagePage.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the visibility of the MessagePage header.
Can be used to hide the header of the MessagePage when it's embedded in another page.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showNavButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the visibility of the navigation button in MessagePage header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the icon displayed on the MessagePage.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconAlt" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the alt attribute of the icon displayed on the &lt;code&gt;MessagePage&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableFormattedText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the value set in the &lt;code&gt;description&lt;/code&gt; property is displayed
as formatted text in HTML format.

For details regarding supported HTML tags, see {@link sap.m.FormattedText}
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The (optional) custom Text control of this page.
Use this aggregation when the "text" (sap.m.Text) control needs to be replaced with an sap.m.Link control.
"text" and "textDirection" setters can be used for this aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customDescription" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The (optional) custom description control of this page.
Use this aggregation when the "description" (sap.m.Text) control needs to be replaced with an sap.m.Link control.
"description" and "textDirection" setters can be used for this aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The buttons displayed under the description text.

&lt;b&gt;Note:&lt;/b&gt; Buttons added to this aggregation are both vertically and horizontally
centered. Depending on the available space, they may be rendered on several lines.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_internalHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A header bar which is managed internally by the MessagePage control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_formattedText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The formatted text which is used when enableFormattedText is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The text displayed under the icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The description displayed under the text when enableFormattedText is false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navButtonPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when Nav Button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MessagePopover" type="MessagePopover" />
  <xs:complexType name="MessagePopover">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;
A &lt;code&gt;MessagePopover&lt;/code&gt; is used to display a summarized list of different types of messages (error, warning, success, and information messages).
It provides a handy and systemized way to navigate and explore details for every message.
It is adaptive and responsive.
It renders as a dialog with a Close button in the header on phones, and as a popover on tablets and higher resolution devices.
It also exposes an event {@link sap.m.MessagePopover#event:activeTitlePress}, which can be used for navigation from a message to the source of the issue.
&lt;h3&gt;Notes:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; Messages can have descriptions pre-formatted with HTML markup. In this case, the &lt;code&gt;markupDescription&lt;/code&gt; has to be set to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; If the message cannot be fully displayed or includes a long description, the message popover provides navigation to the detailed description.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
The message popover stores all messages in an aggregation of type {@link sap.m.MessageItem} named &lt;code&gt;items&lt;/code&gt;.

A set of properties determines how the items are rendered:
&lt;ul&gt;
&lt;li&gt; counter - An integer that is used to indicate the number of errors for each type &lt;/li&gt;
&lt;li&gt; type - The type of message &lt;/li&gt;
&lt;li&gt; title/subtitle - The title and subtitle of the message&lt;/li&gt;
&lt;li&gt; description - The long text description of the message&lt;/li&gt;
&lt;li&gt; activeTitle - Determines whether the title of the item is interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When you want to make sure that all content is visible on any device.&lt;/li&gt;
&lt;li&gt;When you want a way to centrally manage messages and show them to the user without additional work for the developer.
The message popover is triggered from a messaging button in the footer toolbar. If an error has occurred at any validation point,
the total number of messages should be incremented, but the user's work shouldn't be interrupted.
Navigation between the message item and the source of the error can be created, if needed by the application.
This can be done by setting the &lt;code&gt;activeTitle&lt;/code&gt; property to true and providing a handler for the &lt;code&gt;activeTitlePress&lt;/code&gt; event.
In addition, you can achieve the same functionality inside a different container using the {@link sap.m.MessageView} control.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
On mobile phones, the message popover is automatically shown in full screen mode.&lt;br/&gt;
On desktop and tablet, the message popover opens in a popover.&lt;br/&gt;
On desktop the opened popover is resizable if it is placed in a {@link sap.m.Toolbar}, {@link sap.m.Bar} or used in {@link sap.m.semantic.SemanticPage}
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="headerButton" />
    </xs:sequence>
    <xs:attribute name="placement" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the position, where the control will appear on the screen. Possible values are: sap.m.VerticalPlacementType.Top, sap.m.VerticalPlacementType.Bottom and sap.m.VerticalPlacementType.Vertical.
The default value is sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not cause any re-rendering and changing of the position. Changes will only be applied with the next interaction.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="initiallyExpanded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded.
Note: If there is only one message in the control, this state will be ignored and the details page of the message will be shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A list with message items
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom header button
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the popover is opened
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the popover is closed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the popover is opened
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the popover is closed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when description is shown
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="listSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when one of the lists is shown when (not) filtered  by type
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="longtextLoaded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when the long text description data from a remote URL is loaded
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlValidated" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when a validation of a URL from long text description is ready
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeTitlePress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when an active title of a MessageItem is clicked
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MessagePopoverItem" type="MessagePopoverItem" />
  <xs:complexType name="MessagePopoverItem">
    <xs:annotation>
      <xs:documentation>
Items provide information about Error Messages in the page.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MessageItem">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MessageStrip" type="MessageStrip" />
  <xs:complexType name="MessageStrip">
    <xs:annotation>
      <xs:documentation>
MessageStrip is a control that enables the embedding of application-related messages in the application.
&lt;h3&gt;Overview&lt;/h3&gt;
The message strip displays 4 types of messages, each with a corresponding semantic color and icon: Information, Success, Warning and Error.

Each message can have a close button, so that it can be removed from the UI if needed.

With version 1.50 you can use a limited set of formatting tags for the message text by setting &lt;code&gt;enableFormattedText&lt;/code&gt;. The allowed tags are:
&lt;ul&gt;
&lt;li&gt;&lt;a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to provide information or status update within the detail area of an object&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to display information within the object page header, within a control, in the master list, or above the page header.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="link" />
      <xs:element name="_formattedText" />
      <xs:element name="_text" />
    </xs:sequence>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text of the message.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the type of messages that are displayed in the MessageStrip.
Possible values are: Information (default), Success, Warning, Error.
If None is passed, the value is set to Information and a warning is displayed in the console.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines a custom icon which is displayed.
If none is set, the default icon for this message type is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if an icon is displayed for the message.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showCloseButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the message has a close button in the upper right corner.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableFormattedText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the limited collection of HTML elements passed to the &lt;code&gt;text&lt;/code&gt; property should be
evaluated.

&lt;b&gt;Note:&lt;/b&gt; If this property is set to true the string passed to &lt;code&gt;text&lt;/code&gt; property
can evaluate the following list of limited HTML elements. All other HTML elements and their nested
content will not be rendered by the control:
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;em&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;strong&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="link" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Adds an sap.m.Link control which will be displayed at the end of the message.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_formattedText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation which is used to transform the string message into sap.m.Text control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation which is used to transform the string message into sap.m.Text control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="close" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the container is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MessageView" type="MessageView" />
  <xs:complexType name="MessageView">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;
A &lt;code&gt;MessageView&lt;/code&gt; is used to display a summarized list of different types of messages (error, warning, success, and information messages).
It is meant to be embedded into container controls (such as {@link sap.m.Popover}, {@link sap.m.ResponsivePopover}, {@link sap.m.Dialog}).
It provides a handy and systemized way to navigate and explore details for every message.
If the MessageView contains only one item, which has either description, markupDescription or longTextUrl, its details page will be displayed initially.
It also exposes an event {@link sap.m.MessageView#event:activeTitlePress}, which can be used for navigation from a message to its source.
&lt;h3&gt;Notes:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If your application changes its model between two interactions with the MessageView, this could lead to outdated messages being shown.
To avoid this, you need to call &lt;code&gt;navigateBack&lt;/code&gt; on the MessageView BEFORE opening its container.&lt;/li&gt;
&lt;li&gt; Messages can have descriptions pre-formatted with HTML markup. In this case, the &lt;code&gt;markupDescription&lt;/code&gt; has to be set to &lt;code&gt;true&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt; If the message cannot be fully displayed or includes a long description, the MessageView provides navigation to the detailed description. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
The MessageView stores all messages in an association of type {@link sap.m.MessageItem} named &lt;code&gt;items&lt;/code&gt;.
&lt;br/&gt;
A set of properties determines how the items are rendered:
&lt;ul&gt;
&lt;li&gt; counter - An integer that is used to indicate the number of errors for each type &lt;/li&gt;
&lt;li&gt; type - The type of message &lt;/li&gt;
&lt;li&gt; title/subtitle - The title and subtitle of the message&lt;/li&gt;
&lt;li&gt; description - The long text description of the message&lt;/li&gt;
&lt;li&gt; activeTitle - Determines whether the title of the item is interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;When you want a way to centrally manage messages and show them to the user without additional work for the developer.
Navigation between the message item and the source of the error can be created, if needed by the application.
This can be done by setting the &lt;code&gt;activeTitle&lt;/code&gt; property to true and providing a handler for the &lt;code&gt;activeTitlePress&lt;/code&gt; event.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="headerButton" />
      <xs:element name="_navContainer" />
    </xs:sequence>
    <xs:attribute name="groupItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the MessageItems are grouped or not
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showDetailsPageHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the header of details page will be shown
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A list with message items.
If only one item is provided, the initial page will be the details page for the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom header button
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_navContainer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A navContainer that contains both details and list pages
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the popover is opened
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when description is shown
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="listSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when one of the lists is shown when (not) filtered  by type
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="longtextLoaded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when the long text description data from a remote URL is loaded
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="urlValidated" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when a validation of a URL from long text description is ready
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeTitlePress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when an active title of a MessageItem is pressed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MultiComboBox" type="MultiComboBox" />
  <xs:complexType name="MultiComboBox">
    <xs:annotation>
      <xs:documentation>
The MultiComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.

A drop-down list for selecting and filtering values.
&lt;h3&gt;Overview&lt;/h3&gt;
The MultiComboBox control is commonly used to enable users to select one or more options from a predefined list. The control provides an editable input field to filter the list, and a dropdown arrow of available options.
The select options in the list have checkboxes that permit multi-selection. Entered values are displayed as {@link sap.m.Token tokens}.

When an invalid character is typed into the text field of the MultiComboBox control, the value state is changed to &lt;code&gt;sap.ui.core.ValueState.Error&lt;/code&gt; only for a second, as the invalid value is immediately deleted from the input field.
&lt;h3&gt;Structure&lt;/h3&gt;
The MultiComboBox consists of the following elements:
&lt;ul&gt;
&lt;li&gt; Input field - displays the selected option/s as token/s. Users can type to filter the list.
&lt;li&gt; Drop-down arrow - expands\collapses the option list.&lt;/li&gt;
&lt;li&gt; Option list - the list of available options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The user needs to select one or more options from a long list of options (maximum of approximately 200).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The user needs to choose between two options such as ON or OFF and YES or NO. In this case, consider using a {@link sap.m.Switch switch} control instead&lt;/li&gt;
&lt;li&gt;You need to display more that one attribute. In this case, consider using the {@link sap.m.SelectDialog select dialog} or value help dialog instead.&lt;/li&gt;
&lt;li&gt;The user needs to search on multiple attributes. In this case, consider using the {@link sap.m.SelectDialog select dialog} or value help dialog instead.&lt;/li&gt;
&lt;li&gt;Your use case requires all available options to be displayed right away, without any user interaction. In this case, consider using the {@link sap.m.CheckBox checkboxes} instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
If there are many tokens, the control shows only the last selected tokens that fit and for the others a label N-more is provided.
In case the length of the last selected token is exceeding the width of the control, only a label N-Items is shown. In both cases, pressing on the label will show the tokens in a popup.
&lt;u&gt;On Phones:&lt;/u&gt;
&lt;ul&gt;
&lt;li&gt;A new full-screen dialog opens where all items from the option list are shown.&lt;/li&gt;
&lt;li&gt;You can select and deselect items from the option list.&lt;/li&gt;
&lt;li&gt;With the help of a toggle button you can switch between showing all tokens and only selected ones.&lt;/li&gt;
&lt;li&gt;You can filter the option list by entering a value in the input.&lt;/li&gt;
&lt;/ul&gt;
&lt;u&gt;On Tablets:&lt;/u&gt;
&lt;ul&gt;
&lt;li&gt;The auto-complete suggestions appear below or above the input field.&lt;/li&gt;
&lt;li&gt;You can review the tokens by swiping them to left or right.&lt;/li&gt;
&lt;/ul&gt;
&lt;u&gt;On Desktop:&lt;/u&gt;
&lt;ul&gt;
&lt;li&gt;The auto-complete suggestions appear below or above the input field.&lt;/li&gt;
&lt;li&gt;You can review the tokens by pressing the right or left arrows on the keyboard.&lt;/li&gt;
&lt;li&gt;You can select single tokens or a range of tokens and you can copy/cut/delete them.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ComboBoxBase">
    <xs:attribute name="selectedKeys" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when selection of an item is changed.
Note: please do not use the "change" event inherited from sap.m.InputBase
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionFinish" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when user has finished a selection of items in a list box and list box has been closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MultiEditField" type="MultiEditField" />
  <xs:complexType name="MultiEditField">
    <xs:annotation>
      <xs:documentation>
This control allows you to add items to a sap.m.Select instance. In addition, based on the property set, a set of pre-filled entries is added.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:XMLComposite">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="selectedItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The selected item from &lt;code&gt;items&lt;/code&gt; aggregation. This can be &lt;code&gt;null&lt;/code&gt; if no valid item or special item is selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showValueHelp" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the 'Select new value' item should be available in the selection field.
Please note that upon selecting this item, the previously selected item is restored.
As a consequence, the &lt;code&gt;selectedItem&lt;/code&gt; property never contains this item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the 'Leave blank' item should be available in the selection field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="required" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the 'Label' is required for the selection field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items that should be displayed after the predefined special items in the selection field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the item of items aggregation in the selection field is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="MultiInput" type="MultiInput" />
  <xs:complexType name="MultiInput">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;
A multi-input field allows the user to enter multiple values, which are displayed as {@link sap.m.Token tokens}.
You can enable auto-complete suggestions or value help to help the user choose the correct entry. You can define
validator functions to define what token values are accepted.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt; New valid tokens are created, when the user presses Enter, selects a value from the suggestions drop-down, or when the focus leaves the field.&lt;/li&gt;
&lt;li&gt; When multiple values are copied and pasted in the field, separate tokens are created for each of them.&lt;/li&gt;
&lt;li&gt; When a single value is copied and pasted in the field, it is shown as a text value, as further editing might be required before it is converted into a token.&lt;/li&gt;
&lt;li&gt; Provide meaningful labels for all input fields. Do not use the placeholder as a replacement for the label.&lt;/li&gt;
&lt;li&gt; The &lt;code&gt;showValueHelp&lt;/code&gt; property is overwritten and after initialization of the control, its value becomes &lt;code&gt;truthy&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; You need to provide the value help option to help users select or search multiple business objects.&lt;/li&gt;
&lt;li&gt; The dataset to choose from is expected to increase over time (for example, to more than 200 values).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; When you need to select only one value.&lt;/li&gt;
&lt;li&gt; When you want the user to select from a predefined set of options. Use {@link sap.m.MultiComboBox} instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
If there are many tokens, the control shows only the last selected tokens that fit and for the others a label &lt;i&gt;N-more&lt;/i&gt; is provided.
In case the length of the last selected token is exceeding the width of the control, only a label &lt;i&gt;N-Items&lt;/i&gt; is shown.
In both cases, pressing on the label will show the tokens in a popup.
&lt;u&gt;On Phones:&lt;/u&gt;
&lt;ul&gt;
&lt;li&gt; Only the last entered token is displayed.&lt;/li&gt;
&lt;li&gt; A new full-screen dialog opens where the auto-complete suggestions can be selected.&lt;/li&gt;
&lt;li&gt; You can review the tokens by tapping on the token or the input field.&lt;/li&gt;
&lt;/ul&gt;
&lt;u&gt; On Tablets:&lt;/u&gt;
&lt;ul&gt;
&lt;li&gt; The auto-complete suggestions appear below or above the multi-input field.&lt;/li&gt;
&lt;li&gt; You can review the tokens by swiping them to the left or right.&lt;/li&gt;
&lt;/ul&gt;
&lt;u&gt;On Desktop:&lt;/u&gt;
&lt;ul&gt;
&lt;li&gt; The auto-complete suggestions appear below or above the multi-input field.&lt;/li&gt;
&lt;li&gt; You can review the tokens by pressing the right or left arrows on the keyboard.&lt;/li&gt;
&lt;li&gt; You can select single tokens or a range of tokens and you can copy/cut/delete them.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Input">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="tokens" />
      <xs:element name="tokenizer" />
    </xs:sequence>
    <xs:attribute name="enableMultiLineMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, the MultiInput will be displayed in multi-line display mode.
In multi-line display mode, all tokens can be fully viewed and easily edited in the MultiInput.
The default value is false.
&lt;b&gt;Note:&lt;/b&gt; This property does not take effect on smartphones or when the editable property is set to false.
&lt;b&gt;Caution:&lt;/b&gt; Do not enable multi-line mode in tables and forms.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxTokens" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The max number of tokens that is allowed in MultiInput.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokens" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The currently displayed tokens
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokenizer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The tokenizer which displays the tokens
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokenChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the tokens aggregation changed (add / remove token)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokenUpdate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the tokens aggregation changed due to a user interaction (add / remove token)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="NavContainer" type="NavContainer" />
  <xs:complexType name="NavContainer">
    <xs:annotation>
      <xs:documentation>
Handles hierarchical navigation between Pages or other fullscreen controls.

All children of this control receive navigation events, such as {@link sap.m.NavContainerChild#event:beforeShow beforeShow},
they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="pages" />
    </xs:sequence>
    <xs:attribute name="autoFocus" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the initial focus is set automatically on first rendering and after navigating to a new page.
This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field.
If necessary, the &lt;code&gt;afterShow&lt;/code&gt; event can be used to focus another element, only if &lt;code&gt;autoFocus&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt;  The following scenarios are possible, depending on where the focus
was before navigation to a new page:
&lt;ul&gt;&lt;li&gt;If &lt;code&gt;autoFocus&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; and the focus was
inside the current page, the focus will be moved automatically on the new page.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;autoFocus&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; and the focus was inside
the current page, the focus will disappear.
&lt;li&gt;If the focus was outside the current page, after the navigation it will remain
unchanged regardless of what is set to the &lt;code&gt;autoFocus&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;autoFocus&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; and at the same time another wrapping
control has its own logic for focus restoring upon rerendering, the focus will still appear.&lt;/li&gt;&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether the NavContainer is visible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultTransitionName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pages" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.

These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#event:beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is fired when navigation between two pages has been triggered (before any events to the child controls are fired).
The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterNavigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is fired when navigation between two pages has completed (once all events to the child controls have been fired).
In case of animated transitions this event is fired with some delay after the "navigate" event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="NewsContent" type="NewsContent" />
  <xs:complexType name="NewsContent">
    <xs:annotation>
      <xs:documentation>
This control displays the news content text and subheader in a tile.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_contentText" />
    </xs:sequence>
    <xs:attribute name="size" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Updates the size of the chart. If not set then the default size is applied based on the device tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subheader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The subheader.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_contentText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The hidden aggregation for the content text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the News Content is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="NotificationListBase" type="NotificationListBase" />
  <xs:complexType name="NotificationListBase">
    <xs:annotation>
      <xs:documentation>
The NotificationListBase is the abstract base class for {@link sap.m.NotificationListItem} and {@link sap.m.NotificationListGroup}.

The NotificationList controls are designed for the SAP Fiori notification center.
&lt;h4&gt;Overview&lt;/h4&gt;
NotificationListBase defines the general structure of a notification item. Most of the behavioral logic is defined for the single items or groups.
&lt;h4&gt;Structure&lt;/h4&gt;
The base holds properties for the following elements:
&lt;ul&gt;
&lt;li&gt;Author name&lt;/li&gt;
&lt;li&gt;Author picture&lt;/li&gt;
&lt;li&gt;Time stamp&lt;/li&gt;
&lt;li&gt;Priority&lt;/li&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;/ul&gt;
Additionally, by setting these properties you can determine if buttons are shown:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;showButtons&lt;/code&gt; - action buttons visibility&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showCloseButton&lt;/code&gt; - close button visibility&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="buttons" />
      <xs:element name="_headerTitle" />
      <xs:element name="_dateTime" />
      <xs:element name="_authorName" />
      <xs:element name="_authorImage" />
      <xs:element name="_overflowToolbar" />
      <xs:element name="_closeButton" />
      <xs:element name="_collapseButton" />
    </xs:sequence>
    <xs:attribute name="priority" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the priority of the Notification.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the title of the NotificationListBase item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="datetime" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the due date of the NotificationListItem.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showButtons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the action buttons visibility.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showCloseButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the visibility of the close button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authorName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the notification group's author name.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="authorPicture" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the URL of the notification group's author picture.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Action buttons.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_headerTitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The title control that holds the datetime text of the NotificationListBase item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_dateTime" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The timestamp string that will be displayed in the NotificationListBase item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_authorName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.m.Text that holds the author name.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_authorImage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.m.Image or sap.ui.core.Control control that holds the author image or icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_overflowToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The OverflowToolbar control that holds the footer buttons.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_closeButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The close button of the notification item/group.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_collapseButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The collapse button of the notification item/group.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="close" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the close button of the notification is pressed.&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; Pressing the close button doesn't destroy the notification automatically.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="NotificationListGroup" type="NotificationListGroup" />
  <xs:complexType name="NotificationListGroup">
    <xs:annotation>
      <xs:documentation>
The NotificationListItemGroup control is used for grouping {@link sap.m.NotificationListItem notification items} of the same type.
&lt;h4&gt;Behavior&lt;/h4&gt;
The group handles specific behavior for different usecases:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autoPriority&lt;/code&gt; - sets the group priority to the highest priority of an item in the group.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enableCollapseButtonWhenEmpty&lt;/code&gt; - displays a collapse button for an empty group.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showEmptyGroup&lt;/code&gt; - determines if the header/footer of an empty group is displayed.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NotificationListBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="_ariaDetailsText" />
    </xs:sequence>
    <xs:attribute name="collapsed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the group is collapsed or expanded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoPriority" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showEmptyGroup" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableCollapseButtonWhenEmpty" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the collapse/expand button should be enabled for an empty group.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The NotificationListItems inside the group.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_ariaDetailsText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The details of the NotificationListGroup that will be used to implement the ARIA specification
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onCollapse" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is called when collapse property value is changed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="NotificationListItem" type="NotificationListItem" />
  <xs:complexType name="NotificationListItem">
    <xs:annotation>
      <xs:documentation>
The NotificationListItem control shows notifications to the user.
&lt;h4&gt;Structure&lt;/h4&gt;
The notification item holds properties for the following elements:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; - additional detail text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hideShowMoreButton&lt;/code&gt; - visibility of the "Show More" button.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;truncate&lt;/code&gt; - determines if title and description are truncated to the first two lines (usually needed on mobile devices).&lt;/li&gt;
&lt;/ul&gt;
For each item you can set some additional status information about the item processing by adding a {@link sap.m.MessageStrip} to the &lt;code&gt;processingMessage&lt;/code&gt; aggregation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NotificationListBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="processingMessage" />
      <xs:element name="_bodyText" />
    </xs:sequence>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the description of the NotificationListItem.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truncate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the text in the title and the description of the notification are truncated to the first two lines.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideShowMoreButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the "Show More" button should be hidden.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="processingMessage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The sap.m.MessageStrip control that holds the information about any error that may occur when pressing the notification buttons
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_bodyText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The text control that holds the description text of the NotificationListItem.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="NumericContent" type="NumericContent" />
  <xs:complexType name="NumericContent">
    <xs:annotation>
      <xs:documentation>
Shows numeric values used for example in tiles colored according to their meaning and displays deviations.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="animateTextChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, the change of the value will be animated.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="formatterValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDescription" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Description of an icon that is used in the tooltip.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indicator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The indicator arrow that shows value deviation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullifyValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, the omitted value property is set to 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scale" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="size" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Updates the size of the control. If not set, then the default size is applied based on the device tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="truncateValueTo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The number of characters of the &lt;code&gt;value&lt;/code&gt; property to display.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The actual value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The semantic color of the value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the control. If it is not set, the size of the control is defined by the 'size' property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="withMargin" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If the value is set to false, the content is adjusted to the whole size of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates the load status.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is fired when the user chooses the numeric content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectAttribute" type="ObjectAttribute" />
  <xs:complexType name="ObjectAttribute">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;ObjectAttribute&lt;/code&gt; control displays a text field that can be normal or active.
The &lt;code&gt;ObjectAttribute&lt;/code&gt; fires a &lt;code&gt;press&lt;/code&gt; event when the user chooses the active text.

&lt;b&gt;Note:&lt;/b&gt; If property &lt;code&gt;active&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, only the value of the
&lt;code&gt;text&lt;/code&gt; property is styled and acts as a link. In this case the &lt;code&gt;text&lt;/code&gt;
property must also be set, as otherwise there will be no link displayed for the user.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="customContent" />
      <xs:element name="_textControl" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the ObjectAttribute title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the ObjectAttribute text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the &lt;code&gt;ObjectAttribute&lt;/code&gt; text is selectable for the user.

&lt;b&gt;Note:&lt;/b&gt; As of version 1.48, only the value of the &lt;code&gt;text&lt;/code&gt; property becomes active (styled and acts like a link) as opposed to both the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; in the previous versions. If you set this property to &lt;code&gt;true&lt;/code&gt;, you have to also set the &lt;code&gt;text&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the direction of the text, not including the title.
Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When the aggregation is set, it replaces the text, active and textDirection properties. This also ignores the press event. The provided control is displayed as an active link in case it is a sap.m.Link.
&lt;b&gt;Note:&lt;/b&gt; It will only allow sap.m.Text and sap.m.Link controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_textControl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Text control to display title and text property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user clicks on active text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectHeader" type="ObjectHeader" />
  <xs:complexType name="ObjectHeader">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;ObjectHeader&lt;/code&gt; is a display control that enables the user to easily identify
a specific object. The object header title is the key identifier of the object and
additional text and icons can be used to further distinguish it from other objects.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="attributes" />
      <xs:element name="firstStatus" />
      <xs:element name="secondStatus" />
      <xs:element name="statuses" />
      <xs:element name="_objectNumber" />
      <xs:element name="additionalNumbers" />
      <xs:element name="headerContainer" />
      <xs:element name="markers" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the title of the &lt;code&gt;ObjectHeader&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="number" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the displayed number of the &lt;code&gt;ObjectHeader&lt;/code&gt; number field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberUnit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the units qualifier of the &lt;code&gt;ObjectHeader&lt;/code&gt; number.

&lt;b&gt;Note:&lt;/b&gt; The value of the &lt;code&gt;numberUnit&lt;/code&gt; is not displayed if the
number property is set to &lt;code&gt;null&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intro" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the introductory text for the &lt;code&gt;ObjectHeader&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="introActive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the introductory text of the &lt;code&gt;ObjectHeader&lt;/code&gt; is clickable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleActive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the title of the &lt;code&gt;ObjectHeader&lt;/code&gt; is clickable
and is set only if a title is provided.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon of the &lt;code&gt;ObjectHeader&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; Recursive resolution of binding expressions is not supported by the framework.
It works only in ObjectHeader, since it is a composite control and creates an Image control internally.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconActive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;ObjectHeader&lt;/code&gt; icon is clickable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconAlt" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the alternative text of the &lt;code&gt;ObjectHeader&lt;/code&gt; icon. The text is
displayed if the image for the icon is not available, or cannot be displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the tooltip text of the &lt;code&gt;ObjectHeader&lt;/code&gt; icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, this is set to &lt;code&gt;true&lt;/code&gt; but then one or more requests are sent trying to get
the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="imageShape" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the picture should be displayed in a square or with a circle-shaped mask just like in {@link sap.uxap.ObjectPageHeader}.

&lt;b&gt;Note:&lt;/b&gt; This property takes effect only on Images and it is ignored for Icons.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markFavorite" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the favorite state for the &lt;code&gt;ObjectHeader&lt;/code&gt;. The &lt;code&gt;showMarkers&lt;/code&gt;
property must be set to &lt;code&gt;true&lt;/code&gt; for this property to take effect.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markFlagged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the flagged state for the &lt;code&gt;ObjectHeader&lt;/code&gt;. The &lt;code&gt;showMarkers&lt;/code&gt; property
must be set to &lt;code&gt;true&lt;/code&gt; for this property to take effect.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showMarkers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;ObjectHeader&lt;/code&gt; can be marked with icons such as favorite and flag.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showTitleSelector" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the selector arrow icon/image is displayed and can be pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the value state of the &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;numberUnit&lt;/code&gt; properties.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="condensed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;ObjectHeader&lt;/code&gt; with title, one attribute, number, and number unit.

&lt;b&gt;Note:&lt;/b&gt; Only applied if the &lt;code&gt;responsive&lt;/code&gt; property is set to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the background color of the &lt;code&gt;ObjectHeader&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The different types of &lt;code&gt;ObjectHeader&lt;/code&gt; come with different default background:
&lt;ul&gt;
&lt;li&gt;non responsive - Transparent&lt;/li&gt;
&lt;li&gt;responsive - Translucent&lt;/li&gt;
&lt;li&gt;condensed - Solid&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="responsive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the &lt;code&gt;ObjectHeader&lt;/code&gt; is rendered with a different design that
reacts responsively to the screen sizes.

When the &lt;code&gt;responsive&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, the
following behavior specifics for the control exist:
&lt;ul&gt;
&lt;li&gt;If an image (or an icon font) is set to the &lt;code&gt;icon&lt;/code&gt; property, it is
hidden in portrait mode on phone.&lt;/li&gt;
&lt;li&gt;The title is truncated to 80 characters if longer. For portrait mode on phone,
the title is truncated to 50 characters.&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullScreenOptimized" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optimizes the display of the elements of the &lt;code&gt;ObjectHeader&lt;/code&gt;.

Set this property to &lt;code&gt;true&lt;/code&gt; if your app uses a fullscreen layout (as opposed
to a master-detail or other split-screen layout).

&lt;b&gt;Note&lt;/b&gt;: Only applied if the &lt;code&gt;responsive&lt;/code&gt; property is also set to &lt;code&gt;true&lt;/code&gt;.

If set to &lt;code&gt;true&lt;/code&gt;, the following situations apply:
&lt;ul&gt;
&lt;li&gt;On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group&lt;/li&gt;
&lt;li&gt;On desktop, 4+ attributes/statuses - 4 columns below the Title/Number&lt;/li&gt;
&lt;li&gt;On tablet (portrait mode), always in 2 columns below the Title/Number&lt;/li&gt;
&lt;li&gt;On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number&lt;/li&gt;
&lt;li&gt;On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number&lt;/li&gt;
&lt;/ul&gt;
On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the &lt;code&gt;ObjectHeader&lt;/code&gt;.

If set to &lt;code&gt;false&lt;/code&gt;, the attributes and statuses are being positioned below the
Title/Number of the &lt;code&gt;ObjectHeader&lt;/code&gt; in 2 or 3 columns depending on their number:
&lt;ul&gt;
&lt;li&gt;On desktop, 1-4 attributes/statuses - 2 columns&lt;/li&gt;
&lt;li&gt;On desktop, 5+ attributes/statuses - 3 columns&lt;/li&gt;
&lt;li&gt;On tablet, always in 2 columns&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleHref" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title link target URI. Supports standard hyperlink behavior.

&lt;b&gt;Note:&lt;/b&gt; If an action should be triggered, this property should not be set, but instead
an event handler for the &lt;code&gt;titlePress&lt;/code&gt; event should be registered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleTarget" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the &lt;code&gt;target&lt;/code&gt; attribute for the title link. Options are &lt;code&gt;_self&lt;/code&gt;,
&lt;code&gt;_top&lt;/code&gt;, &lt;code&gt;_blank&lt;/code&gt;, &lt;code&gt;_parent&lt;/code&gt;, &lt;code&gt;_search&lt;/code&gt;. Alternatively,
a frame name can be entered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="introHref" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered,
this should not be set, but instead an event handler for the &lt;code&gt;introPress&lt;/code&gt; event should be registered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="introTarget" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the &lt;code&gt;target&lt;/code&gt; attribute for the intro link. Options are &lt;code&gt;_self&lt;/code&gt;,
&lt;code&gt;_top&lt;/code&gt;, &lt;code&gt;_blank&lt;/code&gt;, &lt;code&gt;_parent&lt;/code&gt;, &lt;code&gt;_search&lt;/code&gt;. Alternatively,
a frame name can be entered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="introTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the number and unit text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleSelectorTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines a custom text for the tooltip of the select title arrow. If not set, a default text of the tooltip will be displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleLevel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the semantic level of the title.

This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation.
Depending on this setting an HTML h1-h6 element is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="attributes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The list of Object Attributes
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="firstStatus" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
First status shown on the right side of the attributes above the second status.
If it is not set the first attribute will expand to take the entire row.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondStatus" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Second status shown on the right side of the attributes below the first status.
If it is not set the second attribute will expand to take the entire row.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statuses" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_objectNumber" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The object number and unit are managed in this aggregation
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="additionalNumbers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
NOTE: Only applied if you set "responsive=false".
Additional object numbers and units are managed in this aggregation.
The numbers are hidden on tablet and phone size screens.
When only one number is provided, it is rendered with additional separator from the main ObjectHeader number.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerContainer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This aggregation takes only effect when you set "responsive" to true.
It can either be filled with an sap.m.IconTabBar or an sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside the object header, the content will be displayed below the ObjectHeader.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
List of markers (icon and/or text) that can be displayed for the &lt;code&gt;ObjectHeader&lt;/code&gt;, such as favorite and flagged.&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Note:&lt;/b&gt; You should use either this aggregation or the already deprecated properties - &lt;code&gt;markFlagged&lt;/code&gt; and &lt;code&gt;markFavorite&lt;/code&gt;. Using both can lead to unexpected results.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titlePress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the title is active and the user taps/clicks on it
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="introPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the intro is active and the user taps/clicks on it
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the title icon is active and the user taps/clicks on it
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleSelectorPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the object header title selector (down-arrow) is pressed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectIdentifier" type="ObjectIdentifier" />
  <xs:complexType name="ObjectIdentifier">
    <xs:annotation>
      <xs:documentation>
The ObjectIdentifier is a display control that enables the user to easily identify a specific object. The ObjectIdentifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.

&lt;b&gt;Note:&lt;/b&gt; This control should not be used with {@link sap.m.Label} or in Forms along with {@link sap.m.Label}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_titleControl" />
      <xs:element name="_textControl" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the object title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the object text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="badgeNotes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether or not the notes icon is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="badgePeople" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether or not the address book icon is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="badgeAttachments" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether or not the attachments icon is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleActive" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the ObjectIdentifier's title is clickable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_titleControl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Control to display the object title (can be either Text or Link).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_textControl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Text control to display the object text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titlePress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the title is active and the user taps/clicks on it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectListItem" type="ObjectListItem" />
  <xs:complexType name="ObjectListItem">
    <xs:annotation>
      <xs:documentation>
ObjectListItem is a display control that provides summary information about an object as a list item. The ObjectListItem title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.

&lt;b&gt;Note:&lt;/b&gt; The control must only be used in the context of a list.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="attributes" />
      <xs:element name="firstStatus" />
      <xs:element name="secondStatus" />
      <xs:element name="markers" />
      <xs:element name="_objectNumber" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the ObjectListItem title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="number" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the ObjectListItem number.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberUnit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number units qualifier of the ObjectListItem.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intro" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the introductory text for the ObjectListItem.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
ObjectListItem icon displayed to the left of the title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon displayed when the ObjectListItem is active.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image doesn't exist on the server).

If bandwidth is key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markFavorite" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the favorite state for the ObjectListItem.&lt;br/&gt;&lt;br/&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markFlagged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the flagged state for the ObjectListItem.&lt;br/&gt;&lt;br/&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showMarkers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to true, the ObjectListItem can be marked with icons such as favorite and flag.&lt;br/&gt;&lt;br/&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the ObjectListItem number and numberUnit value state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text direction of the item title.
Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
By default the item title inherits the text direction from its parent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="introTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text direction of the item intro.
Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
By default the item intro inherits the text direction from its parent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text direction of the item number.
Available options for the number direction are LTR (left-to-right) and RTL (right-to-left).
By default the item number inherits the text direction from its parent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markLocked" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the locked state of the ObjectListItem.&lt;br/&gt;&lt;br/&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="attributes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
List of attributes displayed below the title to the left of the status fields.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="firstStatus" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
First status text field displayed on the right side of the attributes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondStatus" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Second status text field displayed on the right side of the attributes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
List of markers (icon and/or text) that can be displayed for the &lt;code&gt;ObjectListItems&lt;/code&gt;, such as favorite and flagged.&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Note:&lt;/b&gt; You should use either this aggregation or the already deprecated properties - &lt;code&gt;markFlagged&lt;/code&gt;, &lt;code&gt;markFavorite&lt;/code&gt;, and &lt;code&gt;markLocked&lt;/code&gt;. Using both can lead to unexpected results.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_objectNumber" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal &lt;code&gt;sap.m.ObjectNumber&lt;/code&gt; control which is created based on the &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;numberUnit&lt;/code&gt;, &lt;code&gt;numberState&lt;/code&gt;, &lt;code&gt;numberTextDirection&lt;/code&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectMarker" type="ObjectMarker" />
  <xs:complexType name="ObjectMarker">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.ObjectMarker&lt;/code&gt; control represents one of the following predefined types:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Flagged&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Favorite&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Draft&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Locked&lt;/code&gt;
&lt;li&gt;&lt;code&gt;LockedBy&lt;/code&gt;
&lt;li&gt;&lt;code&gt;Unsaved&lt;/code&gt;
&lt;li&gt;&lt;code&gt;UnsavedBy&lt;/code&gt;
&lt;/ul&gt;
&lt;b&gt;Note&lt;/b&gt;: Use the &lt;code&gt;LockedBy/UnsavedBy&lt;/code&gt; type along with the &lt;code&gt;additionalInfo&lt;/code&gt; property to display the name of the user who locked/changed the object.
If &lt;code&gt;additionalInfo&lt;/code&gt; property is not set when using &lt;code&gt;LockedBy/UnsavedBy&lt;/code&gt; types, the string "Locked by another user"/"Unsaved changes by another user" will be displayed.
If you don't want to display name of the user, simply use the &lt;code&gt;Locked/Unsaved&lt;/code&gt; types.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_innerControl" />
    </xs:sequence>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets one of the predefined types.

&lt;b&gt;Note&lt;/b&gt;: If the &lt;code&gt;visibility&lt;/code&gt; property is not specified explicitly, every &lt;code&gt;type&lt;/code&gt; comes with predefined one as follows:
&lt;ul&gt;
                &lt;li&gt;For &lt;code&gt;Flagged&lt;/code&gt; and &lt;code&gt;Favorite&lt;/code&gt; the icon is visible and the text is not displayed&lt;/li&gt;
                &lt;li&gt;For &lt;code&gt;Draft&lt;/code&gt; the text is visible and the icon is not displayed&lt;/li&gt;
                &lt;li&gt;For &lt;code&gt;Locked&lt;/code&gt;, &lt;code&gt;LockedBy&lt;/code&gt;, &lt;code&gt;Unsaved&lt;/code&gt; and &lt;code&gt;UnsavedBy&lt;/code&gt; - on screens larger than 600px both icon and text are visible, otherwise only the icon&lt;/li&gt;

&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibility" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets one of the visibility states.
Visibility states are as follows:
&lt;ul&gt;
                &lt;li&gt;&lt;code&gt;IconOnly&lt;/code&gt; - displays only icon, regardless of the screen size&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;TextOnly&lt;/code&gt; - displays only text, regardless of the screen size&lt;/li&gt;
                &lt;li&gt;&lt;code&gt;IconAndText&lt;/code&gt; - displays both icon and text, regardless of the screen size&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="additionalInfo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets additional information to the displayed &lt;code&gt;type&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If no type is set, the additional information will not be displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_innerControl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal control that should be &lt;code&gt;sap.m.Link&lt;/code&gt; for interactive and &lt;code&gt;sap.m.Text&lt;/code&gt;
for non-interactive &lt;code&gt;ObjectMarker&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired when the &lt;code&gt;ObjectMarker&lt;/code&gt; is interactive and the user taps/clicks on it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectNumber" type="ObjectNumber" />
  <xs:complexType name="ObjectNumber">
    <xs:annotation>
      <xs:documentation>
The ObjectNumber control displays number and number unit properties for an object. The number can be displayed using semantic
colors to provide additional meaning about the object to the user.


With 1.63, large design of the control is supported by setting &lt;code&gt;sapMObjectNumberLarge&lt;/code&gt; CSS class to the &lt;code&gt;ObjectNumber&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; To fulfill the design guidelines when you are using &lt;code&gt;sapMObjectNumberLarge&lt;/code&gt; CSS class set the &lt;code&gt;emphasized&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="number" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberUnit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number units qualifier.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emphasized" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the object number should appear emphasized.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the object number's value state. Setting this state will cause the number to be rendered in state-specific colors.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the horizontal alignment of the number and unit.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ObjectStatus" type="ObjectStatus" />
  <xs:complexType name="ObjectStatus">
    <xs:annotation>
      <xs:documentation>
Status information that can be either text with a value state, or an icon.


With 1.63, large design of the control is supported by setting &lt;code&gt;sapMObjectStatusLarge&lt;/code&gt; CSS class to the &lt;code&gt;ObjectStatus&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the ObjectStatus title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the ObjectStatus text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the &lt;code&gt;ObjectStatus&lt;/code&gt; text and icon can be clicked/tapped by the user.

&lt;b&gt;Note:&lt;/b&gt; If you set this property to &lt;code&gt;true&lt;/code&gt;, you have to also set the &lt;code&gt;text&lt;/code&gt; or &lt;code&gt;icon&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text value state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inverted" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the background color reflects the set &lt;code&gt;state&lt;/code&gt; instead of the control's text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon URI. This may be either an icon font or image path.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the direction of the text, not including the title.
Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user clicks/taps on active text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="OverflowToolbar" type="OverflowToolbar" />
  <xs:complexType name="OverflowToolbar">
    <xs:annotation>
      <xs:documentation>
A container control based on {@link sap.m.Toolbar}, that provides overflow when
its content does not fit in the visible area.

&lt;h3&gt;Overview&lt;/h3&gt;

The content of the &lt;code&gt;OverflowToolbar&lt;/code&gt; moves into the overflow area from
right to left when the available space is not enough in the visible area of
the container. It can be accessed by the user through the overflow button that
opens it in a popover.

&lt;b&gt;Note:&lt;/b&gt; It is recommended that you use &lt;code&gt;OverflowToolbar&lt;/code&gt; over
{@link sap.m.Toolbar}, unless you want to avoid overflow in favor of shrinking.

&lt;h3&gt;Usage&lt;/h3&gt;

Different behavior and priorities can be set for each control inside the
&lt;code&gt;OverflowToolbar&lt;/code&gt;, such as certain controls to appear only in the
overflow area or to never move there. For more information, see
{@link sap.m.OverflowToolbarLayoutData} and {@link sap.m.OverflowToolbarPriority}.

&lt;h3&gt;Overflow Behavior&lt;/h3&gt;
By default, only the following controls can move to the overflow area:

&lt;ul&gt;&lt;li&gt;{@link sap.m.Button}&lt;/li&gt;
&lt;li&gt;{@link sap.m.CheckBox}&lt;/li&gt;
&lt;li&gt;{@link sap.m.ComboBox}&lt;/li&gt;
&lt;li&gt;{@link sap.m.DatePicker}&lt;/li&gt;
&lt;li&gt;{@link sap.m.DateTimeInput}&lt;/li&gt;
&lt;li&gt;{@link sap.m.DateTimePicker}&lt;/li&gt;
&lt;li&gt;{@link sap.m.GenericTag}&lt;/li&gt;
&lt;li&gt;{@link sap.m.Input}&lt;/li&gt;
&lt;li&gt;{@link sap.m.Label}&lt;/li&gt;
&lt;li&gt;{@link sap.m.MenuButton}&lt;/li&gt;
&lt;li&gt;{@link sap.m.OverflowToolbarButton}&lt;/li&gt;
&lt;li&gt;{@link sap.m.OverflowToolbarToggleButton}&lt;/li&gt;
&lt;li&gt;{@link sap.m.SearchField}&lt;/li&gt;
&lt;li&gt;{@link sap.m.SegmentedButton}&lt;/li&gt;
&lt;li&gt;{@link sap.m.Select}&lt;/li&gt;
&lt;li&gt;{@link sap.m.TimePicker}&lt;/li&gt;
&lt;li&gt;{@link sap.m.ToggleButton}&lt;/li&gt;
&lt;li&gt;{@link sap.m.ToolbarSeparator}&lt;/li&gt;
&lt;li&gt;{@link sap.ui.comp.smartfield.SmartField}&lt;/li&gt;
&lt;li&gt;{@link sap.ui.comp.smartfield.SmartLabel}&lt;/li&gt;&lt;/ul&gt;

Additionally, any control that implements the {@link sap.m.IOverflowToolbarContent} interface may define
its behavior (most importantly overflow behavior) when placed inside &lt;code&gt;OverflowToolbar&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;OverflowToolbar&lt;/code&gt; is an adaptive container that checks the available
width and hides the part of its content that doesn't fit. It is intended that simple controls,
such as {@link sap.m.Button} and {@link sap.m.Label} are used as content. Embedding other
adaptive container controls, such as {@link sap.m.Breadcrumbs}, results in competition for the available
space - both controls calculate the available space based on the other one's size and both change their
width at the same time, leading to incorrectly distributed space.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The height of the toolbar changes on desktop, tablet, and smartphones.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Toolbar">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="OverflowToolbarAssociativePopover" type="OverflowToolbarAssociativePopover" />
  <xs:complexType name="OverflowToolbarAssociativePopover">
    <xs:annotation>
      <xs:documentation>
OverflowToolbarAssociativePopover is a version of Popover that uses an association in addition to the aggregation
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Popover">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="OverflowToolbarButton" type="OverflowToolbarButton" />
  <xs:complexType name="OverflowToolbarButton">
    <xs:annotation>
      <xs:documentation>
Represents an {@link sap.m.Button} that shows its text only when in the overflow area of an {@link sap.m.OverflowToolbar}.

&lt;b&gt;Note:&lt;/b&gt; This control is intended to be used exclusively in the context of the &lt;code&gt;OverflowToolbar&lt;/code&gt;, whenever it is required
to have buttons that show only an icon in the toolbar, but icon and text in the overflow menu.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Button">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="OverflowToolbarLayoutData" type="OverflowToolbarLayoutData" />
  <xs:complexType name="OverflowToolbarLayoutData">
    <xs:annotation>
      <xs:documentation>
Holds layout data for the {@link sap.m.OverflowToolbar} items.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ToolbarLayoutData">
    <xs:attribute name="moveToOverflow" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The OverflowToolbar item can or cannot move to the overflow area
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stayInOverflow" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The OverflowToolbar item can or cannot stay in the overflow area
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="priority" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="group" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines OverflowToolbar items group number.
Default value is 0, which means that the control does not belong to any group.
Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority.
Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="closeOverflowOnInteraction" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the overflow area is automatically closed when interacting with a control in it
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="OverflowToolbarToggleButton" type="OverflowToolbarToggleButton" />
  <xs:complexType name="OverflowToolbarToggleButton">
    <xs:annotation>
      <xs:documentation>
Represents an {@link sap.m.ToggleButton} that shows its text only when in the overflow area of an {@link sap.m.OverflowToolbar}.

&lt;b&gt;Note:&lt;/b&gt; This control is intended to be used exclusively in the context of the &lt;code&gt;OverflowToolbar&lt;/code&gt;, whenever it is required
to have buttons that show only an icon in the toolbar, but icon and text in the overflow menu.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ToggleButton">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nAnyFilterItem" type="P13nAnyFilterItem" />
  <xs:complexType name="P13nAnyFilterItem">
    <xs:annotation>
      <xs:documentation>
Type for &lt;code&gt;filterItems&lt;/code&gt; aggregation in P13nFilterPanel control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="P13nFilterItem">
    <xs:attribute name="value1" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
value of the filter. Type of value1 is any.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value2" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
to value of the between filter. Type of value2 is any.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nColumnsItem" type="P13nColumnsItem" />
  <xs:complexType name="P13nColumnsItem">
    <xs:annotation>
      <xs:documentation>
Type for &lt;code&gt;columnsItems&lt;/code&gt; aggregation in &lt;code&gt;P13nColumnsPanel&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="columnKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property contains the unique table column key
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="index" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property contains the index of a table column
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property decides whether a &lt;code&gt;P13nColumnsItem&lt;/code&gt; is visible
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property contains the with of a table column.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="total" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property contains the total flag of a table column.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nColumnsPanel" type="P13nColumnsPanel" />
  <xs:complexType name="P13nColumnsPanel">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;P13nColumnsPanel&lt;/code&gt; control is used to define column-specific settings for table personalization.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="P13nPanel">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="columnsItems" />
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="visibleItemsThreshold" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down.
When this happens, the user can receive a corresponding warning triggered by the &lt;code&gt;visibleItemsThreshold&lt;/code&gt; property. The
property needs to be activated and set to the required value by the consuming application to ensure that the warning message is
shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are
selected:

&lt;pre&gt;
customData&gt;
core:CustomData key=&quot;p13nDialogSettings&quot;
value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
/customData&gt;
&lt;/pre&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnsItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
List of columns that has been changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation for the toolbar content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addColumnsItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised when a &lt;code&gt;columnsItem&lt;/code&gt; is added.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="changeColumnsItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if &lt;code&gt;columnsItems&lt;/code&gt; is changed or new one needs to be created in the model.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="setData" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if &lt;code&gt;setData&lt;/code&gt; is called in model. The event serves the purpose of minimizing such calls since they can
take up a lot of performance.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nConditionPanel" type="P13nConditionPanel" />
  <xs:complexType name="P13nConditionPanel">
    <xs:annotation>
      <xs:documentation>
The ConditionPanel Control will be used to implement the Sorting, Filtering and Grouping panel of the new Personalization dialog.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="maxConditions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
defines the max number of conditions on the ConditionPanel
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exclude" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
exclude options for filter
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerQuery" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
defines if the mediaQuery or a ContainerResize will be used for layout update.
When the &lt;code&gt;P13nConditionPanel&lt;/code&gt; is used on a dialog the property should be set to &lt;code&gt;true&lt;/code&gt;!
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoAddNewRow" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
adds initial a new empty condition row
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disableFirstRemoveIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
makes the remove icon on the first condition row disabled when only one condition exist.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alwaysShowAddIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end and you can only append a
new condition.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="usePrevConditionSetting" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
new added condition use the settings from the previous condition as default.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoReduceKeyFieldItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
KeyField value can only be selected once. When you set the property to &lt;code&gt;true&lt;/code&gt; the ConditionPanel will automatically offers on the
KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are
listed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or "Phone" you can set a fixed layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
show additional labels in the condition
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be
converted to upperCase.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validationExecutor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Calls the validation listener tbd...
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Content for the ConditionPanel. This aggregation is not public!
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dataChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Workaround for updating the binding
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nDialog" type="P13nDialog" />
  <xs:complexType name="P13nDialog">
    <xs:annotation>
      <xs:documentation>
The P13nDialog control provides a dialog that contains one or more panels. On each of the panels, one or more changes with regards to a
       table can be processed. For example, a panel to set a column to invisible, change the order of the columns or a panel to sort or filter
       tables.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Dialog">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="panels" />
    </xs:sequence>
    <xs:attribute name="initialVisiblePanelType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property determines which panel is initially shown when dialog is opened. If not defined then the first visible
panel of &lt;code&gt;panels&lt;/code&gt; aggregation is taken. Setting value after the dialog is opened has no effect anymore.
Due to extensibility reason the type should be &lt;code&gt;string&lt;/code&gt;. So it is feasible to add a custom panel without
expanding the type.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showReset" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the
'Reset' button will trigger the &lt;code&gt;reset&lt;/code&gt; event sending a notification that model data must be reset.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showResetEnabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property determines whether the 'Restore' button is enabled and is taken into account only if &lt;code&gt;showReset&lt;/code&gt; is set
to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validationExecutor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order
to perform cross-model validation checks.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="panels" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The dialog panels displayed in the dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ok" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event fired if the 'ok' button in &lt;code&gt;P13nDialog&lt;/code&gt; is clicked.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event fired if the 'cancel' button in &lt;code&gt;P13nDialog&lt;/code&gt; is clicked.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reset" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event fired if the 'reset' button in &lt;code&gt;P13nDialog&lt;/code&gt; is clicked.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nDimMeasureItem" type="P13nDimMeasureItem" />
  <xs:complexType name="P13nDimMeasureItem">
    <xs:annotation>
      <xs:documentation>
Type for &lt;code&gt;columnsItems&lt;/code&gt; aggregation in &lt;code&gt;P13nDimMeasurePanel&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="columnKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="index" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the order of visible dimensions or measures of a chart.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the visibility of dimensions or measures.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="role" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nDimMeasurePanel" type="P13nDimMeasurePanel" />
  <xs:complexType name="P13nDimMeasurePanel">
    <xs:annotation>
      <xs:documentation>
The P13nDimMeasurePanel control is used to define chart-specific settings like chart type, the visibility, the order and roles of
       dimensions and measures for table personalization.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="P13nPanel">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="dimMeasureItems" />
      <xs:element name="content" />
      <xs:element name="availableChartTypes" />
    </xs:sequence>
    <xs:attribute name="chartTypeKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies a chart type key.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dimMeasureItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
List of columns that has been changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation for the toolbar content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="availableChartTypes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies available chart types.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="changeDimMeasureItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised when one or more &lt;code&gt;DimMeasureItems&lt;/code&gt; has been updated.
Aggregation &lt;code&gt;DimMeasureItems&lt;/code&gt; should be updated outside...
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="changeChartType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised when a &lt;code&gt;ChartType&lt;/code&gt; has been updated.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nFilterItem" type="P13nFilterItem" />
  <xs:complexType name="P13nFilterItem">
    <xs:annotation>
      <xs:documentation>
Type for &lt;code&gt;filterItems&lt;/code&gt; aggregation in P13nFilterPanel control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="operation" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
sap.m.P13nConditionOperation
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value1" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
value of the filter
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value2" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
to value of the between filter
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
key of the column
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exclude" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
defines if the filter is an include or exclude filter item
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nFilterPanel" type="P13nFilterPanel" />
  <xs:complexType name="P13nFilterPanel">
    <xs:annotation>
      <xs:documentation>
The P13nFilterPanel control is used to define filter-specific settings for table personalization.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="P13nPanel">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="filterItems" />
    </xs:sequence>
    <xs:attribute name="maxIncludes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum number of include filters.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxExcludes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum number of exclude filters.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerQuery" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if the &lt;code&gt;mediaQuery&lt;/code&gt; or a &lt;code&gt;ContainerResize&lt;/code&gt; is used for layout update. If the
&lt;code&gt;ConditionPanel&lt;/code&gt; is used in a dialog, the property must be set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or"Phone" you can set a fixed layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableEmptyOperations" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Should empty operation be enabled for certain data types. This is also based on their nullable setting.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains content for include and exclude panels.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines filter items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addFilterItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if a filter item has been added.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeFilterItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if a filter item has been removed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateFilterItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if a filter item has been updated.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterItemChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if a filter item has been changed. reason can be added, updated or removed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nGroupItem" type="P13nGroupItem" />
  <xs:complexType name="P13nGroupItem">
    <xs:annotation>
      <xs:documentation>
Type for &lt;code&gt;groupItems&lt;/code&gt; aggregation in P13nGroupPanel control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="operation" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
sap.m.P13nConditionOperation
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
key of the column
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showIfGrouped" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
make the grouped column as normalcolumn visible
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nGroupPanel" type="P13nGroupPanel" />
  <xs:complexType name="P13nGroupPanel">
    <xs:annotation>
      <xs:documentation>
The P13nGroupPanel control is used to define group-specific settings for table personalization.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="P13nPanel">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="groupItems" />
    </xs:sequence>
    <xs:attribute name="maxGroups" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum number of groups.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerQuery" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if &lt;code&gt;mediaQuery&lt;/code&gt; or &lt;code&gt;ContainerResize&lt;/code&gt; is used for a layout update. If &lt;code&gt;ConditionPanel&lt;/code&gt;
is used in a dialog, the property must be set to true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or "Phone" you can set a fixed layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains content for include and exclude panels.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defined group items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addGroupItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if a &lt;code&gt;GroupItem&lt;/code&gt; has been added.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeGroupItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if a &lt;code&gt;GroupItem&lt;/code&gt; has been removed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateGroupItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if a &lt;code&gt;GroupItem&lt;/code&gt; has been updated.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nItem" type="P13nItem" />
  <xs:complexType name="P13nItem">
    <xs:annotation>
      <xs:documentation>
Base type for &lt;code&gt;items&lt;/code&gt; aggregation in &lt;code&gt;P13nPanel&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="columnKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Can be used as input for subsequent actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The text to be displayed for the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines visibility of column
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
data type of the column (text, numeric or date is supported)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeInstance" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
data type instance of the column. Can be used instead of the type, precision, scale and formatSettings properties
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="precision" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="formatSettings" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A JSON object containing the formatSettings which will be used to pass additional type/format settings for the entered value.
if type==time or date or datetime the object will be used for the DateFormatter, TimeFormatter or DateTimeFormatter

&lt;i&gt;Below you can find a brief example&lt;/i&gt;

&lt;pre&gt;&lt;code&gt;
{
		UTC: false,
		style: "medium" //"short" or "long"
}
&lt;/code&gt;&lt;/pre&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scale" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
specifies the number of characters which can be entered in the value fields of the condition panel
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines column width
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isDefault" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
the column with isDefault==true will be used as the selected column item on the conditionPanel
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="values" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value
represent the false value, last entry the true value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="role" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="aggregationRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines aggregation role
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="href" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines href of a link.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="target" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines target of a link.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines press handler of a link.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines additional information of the link.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines if the item is nullable
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nPanel" type="P13nPanel" />
  <xs:complexType name="P13nPanel">
    <xs:annotation>
      <xs:documentation>
An abstract base type for &lt;code&gt;panels&lt;/code&gt; aggregation in &lt;code&gt;P13nDialog&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Title text appears in the panel.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleLarge" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Large title text appears e.g. in dialog header in case that only one panel is shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Panel type for generic use. Due to extensibility reason the type of &lt;code&gt;type&lt;/code&gt; property should be &lt;code&gt;string&lt;/code&gt;.
So it is feasible to add a custom panel without expanding the type.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verticalScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables the vertical Scrolling on the &lt;code&gt;P13nDialog&lt;/code&gt; when the panel is shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validationExecutor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Callback method which is called in order to validate end user entry.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validationListener" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Callback method which is called in order to register for validation result.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="changeNotifier" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Callback which notifies a change on this panel.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines personalization items (e.g. columns in the &lt;code&gt;P13nColumnsPanel&lt;/code&gt;).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeNavigationTo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nSelectionItem" type="P13nSelectionItem" />
  <xs:complexType name="P13nSelectionItem">
    <xs:annotation>
      <xs:documentation>
Type for &lt;code&gt;selectionItems&lt;/code&gt; aggregation in &lt;code&gt;P13nSelectionPanel&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="columnKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the unique table column key.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the &lt;code&gt;P13nSelectionItem&lt;/code&gt; is selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nSelectionPanel" type="P13nSelectionPanel" />
  <xs:complexType name="P13nSelectionPanel">
    <xs:annotation>
      <xs:documentation>
The P13nSelectionPanel control is used to define selection settings like the visibility or the order of items.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="P13nPanel">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="selectionItems" />
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="selectionItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
List of columns that has been changed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation for the toolbar
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="changeSelectionItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event raised if &lt;code&gt;selectionItems&lt;/code&gt; is changed or new one needs to be created in the model.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nSortItem" type="P13nSortItem" />
  <xs:complexType name="P13nSortItem">
    <xs:annotation>
      <xs:documentation>
Type for &lt;code&gt;sortItems&lt;/code&gt; aggregation in P13nSortPanel control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="operation" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
sap.m.P13nConditionOperation
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columnKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
key of the column
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="P13nSortPanel" type="P13nSortPanel" />
  <xs:complexType name="P13nSortPanel">
    <xs:annotation>
      <xs:documentation>
The P13nSortPanel control is used to define settings for sorting in table personalization.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="P13nPanel">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="sortItems" />
    </xs:sequence>
    <xs:attribute name="containerQuery" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the
property should be set to true!
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="layoutMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
or "Phone" you can set a fixed layout.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
content for include and exclude panels
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sortItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
defined Sort Items
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addSortItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
event raised when a SortItem was added
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="removeSortItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
event raised when a SortItem was removed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="updateSortItem" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
event raised when a SortItem was updated
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Page" type="Page" />
  <xs:complexType name="Page">
    <xs:annotation>
      <xs:documentation>
A container control that holds one whole screen of an application.

&lt;h3&gt;Overview&lt;/h3&gt;
The sap.m.Page is a container control that holds one whole screen of an application.
The page has three distinct areas that can hold content - a header, content area and a footer.
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;h4&gt;Header&lt;/h4&gt;
The top most area of the page is occupied by the header. The standard header includes a navigation button and a title.
Alternatively, you can create your own custom header, which is defined in the &lt;code&gt;customHeader&lt;/code&gt; aggregation.
&lt;h4&gt;Content&lt;/h4&gt;
The content occupies the main part of the page. Only the content area is scrollable by default.
This can be prevented by setting  &lt;code&gt;enableScrolling&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.
&lt;h4&gt;Footer&lt;/h4&gt;
The footer is optional and occupies the fixed bottom part of the page. Alternatively, the footer can be floating above the bottom part of the content.
This is enabled with the &lt;code&gt;floatingFooter&lt;/code&gt; property.

&lt;b&gt;Note:&lt;/b&gt; All accessibility information for the different areas and their corresponding ARIA roles is set in the aggregation &lt;code&gt;landmarkInfo&lt;/code&gt; of type {@link sap.m.PageAccessibleLandmarkInfo}
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
When using the sap.m.Page in SAP Quartz theme, the breakpoints and layout paddings could be determined by the container's width.
To enable this concept and add responsive paddings to an element of the Page control, you may add the following classes depending on your use case:
&lt;code&gt;sapUiResponsivePadding--header&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--subHeader&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--content&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--footer&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--floatingFooter&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="customHeader" />
      <xs:element name="footer" />
      <xs:element name="subHeader" />
      <xs:element name="headerContent" />
      <xs:element name="landmarkInfo" />
      <xs:element name="_internalHeader" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The title text appearing in the page header bar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleLevel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the semantic level of the title. Using "Auto" no explicit level information is written.
Used for accessibility purposes only.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showNavButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A nav button will be rendered on the left area of header bar if this property is set to true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether this page shall have a header.
If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSubHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether this page shall show the subheader.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navButtonText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navButtonTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The tooltip of the nav button

Since version 1.34
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
If set to false, there will be no vertical scrolling at all.

The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the default background color, is used if not specified.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navButtonType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header area, you can set the value to "Default".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showFooter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether this page shall have a footer
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentOnlyBusy" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Decides which area is covered by the local BusyIndicator when &lt;code&gt;page.setBusy()&lt;/code&gt; is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="floatingFooter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Decides whether the footer can float.
When set to true, the footer is not fixed below the content area anymore, but rather floats over it with a slight offset from the bottom.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleAlignment" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the Title alignment (theme specific).
If set to &lt;code&gt;TitleAlignment.Auto&lt;/code&gt;, the Title will be aligned as it is set in the theme (if not set, the default value is &lt;code&gt;center&lt;/code&gt;);
Other possible values are &lt;code&gt;TitleAlignment.Start&lt;/code&gt; (left or right depending on LTR/RTL), and &lt;code&gt;TitleAlignment.Center&lt;/code&gt; (centered)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of this page
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The (optional) custom header of this page.
Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The (optional) footer of this page. It is always located at the bottom of the page
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
a subHeader will be rendered directly under the header
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
When a customHeader is used, this aggregation will be ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="landmarkInfo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Accessible landmark settings to be applied on the containers of the &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set, no landmarks will be written.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_internalHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A header bar which is managed internally by the Page control
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navButtonTap" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
this event is fired when Nav Button is tapped
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navButtonPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
this event is fired when Nav Button is pressed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PageAccessibleLandmarkInfo" type="PageAccessibleLandmarkInfo" />
  <xs:complexType name="PageAccessibleLandmarkInfo">
    <xs:annotation>
      <xs:documentation>
Settings for accessible landmarks which can be applied to the container elements of a &lt;code&gt;sap.m.Page&lt;/code&gt; control.
These landmarks are e.g. used by assistive technologies (like screenreaders) to provide a meaningful page overview.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="rootRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the root container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rootLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts that describe the landmark of the root container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the content container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts that describe the landmark of the content container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the header container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts that describe the landmark of the header container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subHeaderRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the subheader container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subHeaderLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts that describe the landmark of the subheader container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footerRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Landmark role of the footer container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If set to &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt;, no landmark will be added to the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footerLabel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Texts that describe the landmark of the footer container of the corresponding &lt;code&gt;sap.m.Page&lt;/code&gt; control.

If not set (and a landmark different than &lt;code&gt;sap.ui.core.AccessibleLandmarkRole.None&lt;/code&gt; is defined), a predefined text
is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PagingButton" type="PagingButton" />
  <xs:complexType name="PagingButton">
    <xs:annotation>
      <xs:documentation>
Enables users to navigate between items/entities.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Panel" type="Panel" />
  <xs:complexType name="Panel">
    <xs:annotation>
      <xs:documentation>
A container control which has a header and content.
&lt;h3&gt;Overview&lt;/h3&gt;
The panel is a container for grouping and displaying information. It can be collapsed to save space on the screen.
&lt;h4&gt;Guidelines:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Nesting two or more panels is not recommended.&lt;/li&gt;
&lt;li&gt;Do not stack too many panels on one page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
A panel consists of a title bar with a header text or header toolbar, an info toolbar (optional), and a content area.
Using the &lt;code&gt;headerToolbar&lt;/code&gt; aggregation, you can add a toolbar with any toolbar content (i.e. custom buttons, spacers, titles) inside the title bar.

There are two types of panels: fixed and expandable. Expendable panels are enabled by the &lt;code&gt;expandable&lt;/code&gt; property.
Furthermore you can define an expand animation with the property &lt;code&gt;expandAnimation&lt;/code&gt;.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to group or display information and want to give users the option of hiding this information.&lt;/li&gt;
&lt;li&gt;You want to show additional information on demand (for example, a panel could show optional input fields for an advanced search).&lt;/li&gt;
&lt;li&gt;You want to create a panel with controls that do not require user interaction and are not part of a form. Depending on the usage, change the &lt;code&gt;accessibleRole&lt;/code&gt; property from the default &lt;code&gt;{@link sap.m.PanelAccessibleRole Form}&lt;/code&gt; to &lt;code&gt;{@link sap.m.PanelAccessibleRole Region}&lt;/code&gt; or &lt;code&gt;{@link sap.m.PanelAccessibleRole Complementary}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If the width of the panel is set to 100% (default), the panel and its children are resized responsively, depending on its parent container.&lt;/li&gt;
&lt;li&gt;If the panel has a fixed defined height, it will take up the space, even if the panel is collapsed.&lt;/li&gt;
&lt;li&gt;When the panel is expandable, an arrow icon (pointing to the right) appears in front of the header.&lt;/li&gt;
&lt;li&gt;When the animation is activated, expand/collapse uses a smooth animation to open or close the content area.&lt;/li&gt;
&lt;li&gt;When the panel expands/collapses, the arrow icon rotates 90 degrees clockwise/counter-clockwise.&lt;/li&gt;
&lt;li&gt;When the height uses the default property &lt;code&gt;auto&lt;/code&gt;, the height of the content area is automatically adjusted to match the height of its content.&lt;/li&gt;
&lt;li&gt;When the height of the panel is set to a fixed size, the content area can be scrolled through.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="headerToolbar" />
      <xs:element name="infoToolbar" />
    </xs:sequence>
    <xs:attribute name="headerText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is used to set the header text of the Panel.
The "headerText" is visible in both expanded and collapsed state.
Note: This property is overwritten by the "headerToolbar" aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the Panel width.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the Panel height.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expandable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the control is expandable.
This allows for collapsing or expanding the infoToolbar (if available) and content of the Panel.
Note: If expandable is set to false, the Panel will always be rendered expanded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expanded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the Panel is expanded or not.
If expanded is set to true, then both the infoToolbar (if available) and the content are rendered.
If expanded is set to false, then only the headerText or headerToolbar is rendered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expandAnimation" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the transition between the expanded and the collapsed state of the control is animated.
By default the animation is enabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is used to set the background color of the Panel.
Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="accessibleRole" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is used to set the accessible aria role of the Panel.
Depending on the usage you can change the role from the default &lt;code&gt;Form&lt;/code&gt; to &lt;code&gt;Region&lt;/code&gt; or &lt;code&gt;Complementary&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the content of the Panel.
The content will be visible only when the Panel is expanded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This aggregation allows the use of a custom Toolbar as header for the Panel.
The "headerToolbar" is visible in both expanded and collapsed state.
Use it when you want to add extra controls for user interactions in the header.
Note: This aggregation overwrites "headerText" property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="infoToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This aggregation allows the use of a custom Toolbar as information bar for the Panel.
The "infoToolbar" is placed below the header and is visible only in expanded state.
Use it when you want to show extra information to the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expand" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that the panel will expand or collapse.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PDFViewer" type="PDFViewer" />
  <xs:complexType name="PDFViewer">
    <xs:annotation>
      <xs:documentation>
&lt;p&gt;This control enables you to display PDF documents within your app.
It can be embedded in your user interface layout, or you can set it to open in a popup dialog.&lt;/p&gt;
&lt;p&gt;Please note that the PDF Viewer control can be fully displayed on desktop devices only. On mobile
devices, only the toolbar with a download button is visible.&lt;/p&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="errorPlaceholder" />
      <xs:element name="popupButtons" />
    </xs:sequence>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the height of the PDF viewer control, respective to the height of
the parent container. Can be set to a percent, pixel, or em value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the PDF viewer control, respective to the width of the
parent container. Can be set to a percent, pixel, or em value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="source" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the path to the PDF file to display. Can be set to a relative or
an absolute path.&lt;br/&gt;
Optionally, this property can also be set to a data URI path or a blob URL
in all major web browsers except Internet Explorer and Microsoft Edge, provided
that this data URI or blob URL is whitelisted in advance. For more information about
whitelisting, see {@link topic:91f3768f6f4d1014b6dd926db0e91070 URL Whitelist Filtering}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorMessage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom error message that is displayed when the PDF file cannot be loaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorPlaceholderMessage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom text that is displayed instead of the PDF file content when the PDF
file cannot be loaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="popupHeaderTitle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom title for the PDF viewer popup dialog. Works only if the PDF viewer
is set to open in a popup dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom title for the PDF viewer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showDownloadButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Shows or hides the download button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines how the PDF viewer should be displayed.
&lt;ul&gt;
&lt;li&gt;If set to &lt;code&gt;Link&lt;/code&gt;, the PDF viewer appears as a toolbar with a download
button that can be used to download the PDF file.&lt;br/&gt;
When the {@link #open} method is called, the user can either open the PDF file in a
new tab or download it.&lt;/li&gt;
&lt;li&gt;If set to &lt;code&gt;Embedded&lt;/code&gt;, the PDF viewer appears embedded in the parent
container and displays either the PDF document or the message defined by the
&lt;code&gt;errorPlaceholderMessage&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;If set to &lt;code&gt;Auto&lt;/code&gt;, the appearance of the PDF viewer depends on the
device being used:
&lt;ul&gt;
&lt;li&gt;On mobile devices (phones, tablets), the the PDF viewer appears as a toolbar with
a download button.&lt;/li&gt;
&lt;li&gt;On desktop devices, the PDF viewer is embedded in its parent container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="errorPlaceholder" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom control that can be used instead of the error message specified by the
errorPlaceholderMessage property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="popupButtons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A multiple aggregation for buttons that can be added to the footer of the popup
dialog. Works only if the PDF viewer is set to open in a popup dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="loaded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when a PDF file is loaded. If the PDF is loaded in smaller chunks,
this event is fired as often as defined by the browser's plugin. This may happen after
a couple chunks are processed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="error" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when there is an error loading the PDF file.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sourceValidationFailed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the PDF viewer control cannot check the loaded content. For
example, the default configuration of the Mozilla Firefox browser may not allow checking
the loaded content. This may also happen when the source PDF file is stored in a different
domain.
If you want no error message to be displayed when this event is fired, call the
preventDefault() method inside the event handler.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PlanningCalendar" type="PlanningCalendar" />
  <xs:complexType name="PlanningCalendar">
    <xs:annotation>
      <xs:documentation>
Displays rows with appointments for different entities (such as persons or teams) for the selected time interval.

&lt;h3&gt;Overview&lt;/h3&gt;

You can use the &lt;code&gt;PlanningCalendar&lt;/code&gt; to represent a calendar containing multiple rows with
appointments, where each row represents a different person.

You can configure different time-interval views that the user can switch between, such as hours or days, and even
a whole week/month. The available navigation allows the user to select a specific interval using a picker, or
move to the previous/next interval using arrows.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;PlanningCalendar&lt;/code&gt; uses parts of the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.
This library will be loaded after the &lt;code&gt;PlanningCalendar&lt;/code&gt;, if it wasn't loaded first.
This could lead to a waiting time when a &lt;code&gt;PlanningCalendar&lt;/code&gt; is used for the first time.
To prevent this, apps that use the &lt;code&gt;PlanningCalendar&lt;/code&gt; should also load the
&lt;code&gt;sap.ui.unified&lt;/code&gt; library.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;PlanningCalendar&lt;/code&gt; has the following structure from top to bottom:

&lt;ul&gt;
&lt;li&gt;A toolbar where you can add your own buttons or other controls using the &lt;code&gt;toolbarContent&lt;/code&gt; aggregation.&lt;/li&gt;
&lt;li&gt;A header containing a drop-down menu for selecting the {@link sap.m.PlanningCalendarView PlanningCalendarViews},
and navigation for moving through the intervals using arrows or selecting a specific interval with a picker.
Custom views can be configured using the &lt;code&gt;views&lt;/code&gt; aggregation. If not configured, the following set of default
built-in views is available - Hours, Days, 1 Week, 1 Month, and Months. Setting a custom view(s) replaces the built-in ones.&lt;/li&gt;
&lt;li&gt;The rows of the &lt;code&gt;PlanningCalendar&lt;/code&gt; that contain the assigned appointments.
They can be configured with the &lt;code&gt;rows&lt;/code&gt; aggregation, which is of type
{@link sap.m.PlanningCalendarRow PlanningCalendarRow}.&lt;/li&gt;
&lt;/ul&gt;

Since 1.48 the empty space in the cell that is below an appointment can be removed by adding
the &lt;code&gt;sapUiCalendarAppFitVertically&lt;/code&gt; CSS class to the &lt;code&gt;PlanningCalendar&lt;/code&gt;.
Please note that it should be used only for a &lt;code&gt;PlanningCalendar&lt;/code&gt; with one appointment per day
for a row that doesn't have interval headers set.

Since 1.44 alternating row colors can be suppressed by adding the &lt;code&gt;sapMPlanCalSuppressAlternatingRowColors&lt;/code&gt;
CSS class to the &lt;code&gt;PlanningCalendar&lt;/code&gt;.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

You can define the number of displayed intervals based on the size of the &lt;code&gt;PlanningCalendar&lt;/code&gt; using the
{@link sap.m.PlanningCalendarView PlanningCalendarView}'s properties.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="rows" />
      <xs:element name="views" />
      <xs:element name="specialDates" />
      <xs:element name="toolbarContent" />
      <xs:element name="table" />
      <xs:element name="header" />
    </xs:sequence>
    <xs:attribute name="startDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the start date of the row, as a JavaScript date object. The current date is used as default.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="viewKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the key of the &lt;code&gt;PlanningCalendarView&lt;/code&gt; used for the output.

&lt;b&gt;Note:&lt;/b&gt; The default value is set &lt;code&gt;Hour&lt;/code&gt;. If you are using your own views, the keys of these
views should be used instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="singleSelection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether only a single row can be selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the width of the &lt;code&gt;PlanningCalendar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the height of the &lt;code&gt;PlanningCalendar&lt;/code&gt;.
&lt;b&gt;Note:&lt;/b&gt; If the set height is less than the displayed content, it will not be applied
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showIntervalHeaders" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the assigned interval headers are displayed. You can assign them using the
&lt;code&gt;intervalHeaders&lt;/code&gt; aggregation of the {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.

&lt;b&gt;Note:&lt;/b&gt; If you set both &lt;code&gt;showIntervalHeaders&lt;/code&gt; and &lt;code&gt;showEmptyIntervalHeaders&lt;/code&gt;
properties to &lt;code&gt;true&lt;/code&gt;, the space (at the top of the intervals) where the assigned interval
headers appear, will remain visible even if no interval headers are assigned.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showEmptyIntervalHeaders" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the space (at the top of the intervals), where the assigned interval headers appear, should remain
visible even when no interval headers are present in the visible time frame. If set to &lt;code&gt;false&lt;/code&gt;, this
space would collapse/disappear when no interval headers are assigned.

&lt;b&gt;Note:&lt;/b&gt; This property takes effect, only if &lt;code&gt;showIntervalHeaders&lt;/code&gt; is also set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showRowHeaders" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the column containing the headers of the {@link sap.m.PlanningCalendarRow PlanningCalendarRows}
is displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noDataText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text that is displayed when no {@link sap.m.PlanningCalendarRow PlanningCalendarRows} are assigned.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupAppointmentsMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the mode in which the overlapping appointments are displayed.

&lt;b&gt;Note:&lt;/b&gt; This property takes effect, only if the &lt;code&gt;intervalType&lt;/code&gt; of the current calendar view
is set to &lt;code&gt;sap.ui.unified.CalendarIntervalType.Month&lt;/code&gt;. On phone devices this property is ignored,
and the default value is applied.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentsReducedHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments that have only title without text are rendered with smaller height.

&lt;b&gt;Note:&lt;/b&gt; On phone devices this property is ignored, appointments are always rendered in full height
to facilitate touching.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentsVisualization" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines how the appointments are visualized depending on the used theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the minimum date that can be displayed and selected in the &lt;code&gt;PlanningCalendar&lt;/code&gt;.
This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;minDate&lt;/code&gt; is set to be after the current &lt;code&gt;maxDate&lt;/code&gt;,
the &lt;code&gt;maxDate&lt;/code&gt; is set to the last date of the month in which the &lt;code&gt;minDate&lt;/code&gt; belongs.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum date that can be displayed and selected in the &lt;code&gt;PlanningCalendar&lt;/code&gt;.
This must be a JavaScript date object.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;maxDate&lt;/code&gt; is set to be before the current &lt;code&gt;minDate&lt;/code&gt;,
the &lt;code&gt;minDate&lt;/code&gt; is set to the first date of the month in which the &lt;code&gt;maxDate&lt;/code&gt; belongs.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showDayNamesLine" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the day names are displayed in a separate line or inside the single days.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showWeekNumbers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the week numbers are displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="builtInViews" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the list of predefined views as an array.
The views should be specified by their keys.

The default predefined views and their keys are available at
{@link sap.m.PlanningCalendarBuiltInView}.

&lt;b&gt;Note:&lt;/b&gt; If set, all specified views will be displayed along
with any custom views (if available). If not set and no custom
views are available, all default views will be displayed.
If not set and there are any custom views available, only the
custom views will be displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stickyHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the header area will remain visible (fixed on top) when the rest of the content is scrolled out of view.

The sticky header behavior is automatically disabled on phones in landscape mode for better visibility of the content.

&lt;b&gt;Note:&lt;/b&gt; There is limited browser support, hence the API is in experimental state.
Browsers that currently support this feature are Chrome (desktop and mobile), Safari (desktop and mobile) and Edge 41.

There are also some known issues with respect to the scrolling behavior and focus handling. A few are given below:

When the PlanningCalendar is placed in certain layout containers, for example the &lt;code&gt;GridLayout&lt;/code&gt; control,
the column headers do not fix at the top of the viewport. Similar behavior is also observed with the &lt;code&gt;ObjectPage&lt;/code&gt; control.

This API should not be used in production environment.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;stickyHeader&lt;/code&gt; of the &lt;code&gt;PlanningCalendar&lt;/code&gt; uses the &lt;code&gt;sticky&lt;/code&gt; property of &lt;code&gt;sap.m.Table&lt;/code&gt;.
Therefore, all features and limitations of the property in &lt;code&gt;sap.m.Table&lt;/code&gt; apply to the &lt;code&gt;PlanningCalendar&lt;/code&gt; as well.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rows" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Rows of the &lt;code&gt;PlanningCalendar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="views" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Views of the &lt;code&gt;PlanningCalendar&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If not set, all the default views are available. Their keys are defined in
{@link sap.ui.unified.CalendarIntervalType}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="specialDates" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Special days in the header calendar visualized as date range with a type.

&lt;b&gt;Note:&lt;/b&gt; If one day is assigned to more than one type, only the first type will be used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="toolbarContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of the toolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="table" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intervalSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an interval was selected in the calendar header or in the row.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowSelectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when row selection is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startDateChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;startDate&lt;/code&gt; was changed while navigating in the &lt;code&gt;PlanningCalendar&lt;/code&gt;.
The new value can be obtained using the &lt;code&gt;sap.m.PlanningCalendar#getStartDate()&lt;/code&gt; method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="viewChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;viewKey&lt;/code&gt; was changed by user interaction.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rowHeaderClick" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when a row header is clicked.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PlanningCalendarHeader" type="PlanningCalendarHeader" />
  <xs:complexType name="PlanningCalendarHeader">
    <xs:annotation>
      <xs:documentation>
Disclaimer: This control is in a beta state - incompatible API changes may be done before its official public
release. Use at your own discretion.

&lt;h3&gt;Overview&lt;/h3&gt;

ðóhe calendar header contains the action controls which you can use to manipulate the calendar and facilitate
navigation.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;PlanningCalendarHeader&lt;/code&gt; uses parts of the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.
This library will be loaded after the &lt;code&gt;PlanningCalendarHeader&lt;/code&gt;, if it wasn't previously loaded.
This could lead to a waiting time when a &lt;code&gt;PlanningCalendarHeader&lt;/code&gt; is used for the first time.
To prevent this, apps using the &lt;code&gt;PlanningCalendarHeader&lt;/code&gt; must also load the
&lt;code&gt;sap.ui.unified&lt;/code&gt; library.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;PlanningCalendarHeader&lt;/code&gt; has the following structure:

It contains two toolbars.
&lt;ul&gt;
    &lt;li&gt;The title of the control, set from the &lt;code&gt;title&lt;/code&gt; property, is placed at the beginning
    of the first toolbar. If there is more than one view, the user can switch between the views using the
    &lt;code&gt;SegmentedButton&lt;/code&gt;, displayed afterwards. If controls in the &lt;code&gt;actions&lt;/code&gt;
    aggregation are set, they will be displayed at the end.&lt;/li&gt;
    &lt;li&gt;Navigation in the second toolbar will help the user select the desired time period.
    It contains navigation arrows, Today button and a calendar picker.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="actions" />
      <xs:element name="_actionsToolbar" />
      <xs:element name="_navigationToolbar" />
      <xs:element name="_calendarPicker" />
      <xs:element name="_monthPicker" />
      <xs:element name="_yearPicker" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the title of the &lt;code&gt;PlanningCalendarHeader&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the start date used in the calendar picker, as a JavaScript date object. It is considered as a local date.
The time part will be ignored. The current date is used as default.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pickerText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text of the button which opens the calendar picker.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The controls to be passed to the toolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_actionsToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
The toolbar which contains the title, the SegmentedButton for the views and the controls from the actions aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_navigationToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
The toolbar which contains the navigation inner controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_calendarPicker" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
The popup which contains the calendar for navigation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_monthPicker" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
The popup which contains the month picker for navigation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_yearPicker" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
The popup which contains the year picker for navigation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pressPrevious" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;startDate&lt;/code&gt; was changed while navigating backward in the &lt;code&gt;PlanningCalendarHeader&lt;/code&gt;.
The new value can be obtained, using the &lt;code&gt;sap.m.PlanningCalendarHeader#getStartDate()&lt;/code&gt; method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pressToday" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;startDate&lt;/code&gt; was changed while navigating through the Today button in the
&lt;code&gt;PlanningCalendarHeader&lt;/code&gt;.
The new value can be obtained, using the &lt;code&gt;sap.m.PlanningCalendarHeader#getStartDate()&lt;/code&gt; method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pressNext" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;startDate&lt;/code&gt; was changed while navigating forward in the &lt;code&gt;PlanningCalendarHeader&lt;/code&gt;.
The new value can be obtained, using the &lt;code&gt;sap.m.PlanningCalendarHeader#getStartDate()&lt;/code&gt; method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dateSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A date was selected through the calendar picker.
The new value can be obtained, using the &lt;code&gt;sap.m.PlanningCalendarHeader#getStartDate()&lt;/code&gt; method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The calendar picker popup was closed and no date was selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="viewChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The view was changed by user interaction.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PlanningCalendarLegend" type="PlanningCalendarLegend" />
  <xs:complexType name="PlanningCalendarLegend">
    <xs:annotation>
      <xs:documentation>
A legend for the {@link sap.m.PlanningCalendar} that displays the special dates and appointments in colors with their corresponding description.
The &lt;code&gt;PlanningCalendarLegend&lt;/code&gt; extends {@link sap.ui.unified.CalendarLegend} and
overwrites the default value for property &lt;code&gt;columnWidth&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n3:CalendarLegend">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="appointmentItems" />
    </xs:sequence>
    <xs:attribute name="itemsHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text displayed in the header of the items list. It is commonly related to the calendar days.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentItemsHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text displayed in the header of the appointment items list. It is commonly related to the calendar appointments.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The legend items which show color and type information about the calendar appointments.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PlanningCalendarRow" type="PlanningCalendarRow" />
  <xs:complexType name="PlanningCalendarRow">
    <xs:annotation>
      <xs:documentation>
Represents a row in the {@link sap.m.PlanningCalendar}.

This element holds the data of one row in the {@link sap.m.PlanningCalendar}. Once the header information
(for example, person information) is assigned, the appointments are assigned.
The &lt;code&gt;sap.m.PlanningCalendarRow&lt;/code&gt; allows you to modify appointments at row level.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="appointments" />
      <xs:element name="intervalHeaders" />
      <xs:element name="specialDates" />
      <xs:element name="headerContent" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the header (for example, the name of the person).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text of the header (for example, the department of the person).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the URI of an image or an icon registered in &lt;code&gt;sap.ui.core.IconPool&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nonWorkingDays" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the provided weekdays are displayed as non-working days.
Valid values inside the array are from 0 to 6 (other values are ignored).
If not set, the weekend defined in the locale settings is displayed as non-working days.

&lt;b&gt;Note:&lt;/b&gt; The non-working days are visualized if the &lt;code&gt;intervalType&lt;/code&gt;
property of the {@link sap.m.PlanningCalendarView} is set to &lt;code&gt;Day&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nonWorkingHours" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the provided hours are displayed as non-working hours.
Valid values inside the array are from 0 to 23 (other values are ignored).

&lt;b&gt;Note:&lt;/b&gt; The non-working hours are visualized if &lt;code&gt;intervalType&lt;/code&gt;
property of the {@link sap.m.PlanningCalendarView} is set to &lt;code&gt;Hour&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the selected state of the &lt;code&gt;PlanningCalendarRow&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; Binding the &lt;code&gt;selected&lt;/code&gt; property in single selection modes may
cause unwanted results if you have more than one selected row in your binding.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="key" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the identifier of the row.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsDragAndDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments in the row are draggable.

The drag and drop interaction is visualized by a placeholder highlighting the area where the
appointment can be dropped by the user.

By default, appointments can be dragged only within their original &lt;code&gt;PlanningCalendarRow&lt;/code&gt;. When
&lt;code&gt;enableAppointmentsDragAndDrop&lt;/code&gt; is set to true, attaching the
{@link #event:appointmentDragEnter appointmentDragEnter} event can change the default behavior and allow
appointments to be dragged between calendar rows.

Specifics based on the intervals (hours, days or months) displayed in the &lt;code&gt;PlanningCalendar&lt;/code&gt; views:

Hours:&lt;br/&gt;
For views where the displayed intervals are hours, the placeholder snaps on every interval
of 30 minutes. After the appointment is dropped, the {@link #event:appointmentDrop appointmentDrop} event is fired, containing
the new start and end JavaScript date objects.&lt;br/&gt;
For example, an appointment with start date "Nov 13 2017 12:17:00" and end date "Nov 13 2017 12:45:30"
lasts for 27 minutes and 30 seconds. After dragging and dropping to a new time, the possible new
start date has time that is either "hh:00:00" or "hh:30:00" because of the placeholder that can
snap on every 30 minutes. The new end date is calculated to be 27 minutes and 30 seconds later
and would be either "hh:27:30" or "hh:57:30".

Days:&lt;br/&gt;
For views where intervals are days, the placeholder highlights the whole day and after the
appointment is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the new start and
end JavaScript date objects with changed date but the original time (hh:mm:ss) is preserved.

Months:&lt;br/&gt;
For views where intervals are months, the placeholder highlights the whole month and after the
appointment is dropped the {@link #event:appointmentDrop appointmentDrop} event is fired. The event contains the new start and
end JavaScript date objects with changed month but the original date and time is preserved.

&lt;b&gt;Note:&lt;/b&gt; In "One month" view, the appointments are not draggable on small screen (as there they are
displayed as a list below the dates). Group appointments are also not draggable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsResize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments in the row are resizable.

The resize interaction is visualized by making the appointment transparent.

Specifics based on the intervals (hours, days or months) displayed in the &lt;code&gt;PlanningCalendar&lt;/code&gt; views:

Hours:
For views where the displayed intervals are hours, the appointment snaps on every interval
of 30 minutes. After the resize is finished, the {@link #event:appointmentResize appointmentResize} event is fired, containing
the new start and end JavaScript date objects.

Days:
For views where intervals are days, the appointment snaps to the end of the day. After the resize is finished,
the {@link #event:appointmentResize appointmentResize} event is fired, containing the new start and end JavaScript date objects.
The &lt;code&gt;endDate&lt;/code&gt; time is changed to 00:00:00

Months:
For views where intervals are months, the appointment snaps to the end of the month.
The {@link #event:appointmentResize appointmentResize} event is fired, containing the new start and end JavaScript date objects.
The &lt;code&gt;endDate&lt;/code&gt; is set to the 00:00:00 and first day of the following month.

&lt;b&gt;Notes:&lt;/b&gt;
In "One month" view, the appointments are not resizable on small screen (as there they are
displayed as a list below the dates). Group appointments are also not resizable
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsCreate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments can be created by dragging on empty cells.

See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events snapping

&lt;b&gt;Notes:&lt;/b&gt;
In "One month" view, the appointments cannot be created on small screen (as there they are
displayed as a list below the dates).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointments" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The appointments to be displayed in the row. Appointments that outside the visible time frame are not rendered.

&lt;b&gt;Note:&lt;/b&gt; For performance reasons, only appointments in the visible time range or nearby should be assigned.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intervalHeaders" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The appointments to be displayed at the top of the intervals (for example, for public holidays).
Appointments outside the visible time frame are not rendered.

Keep in mind that the &lt;code&gt;intervalHeaders&lt;/code&gt; should always fill whole intervals. If they are shorter or longer
than one interval, they are not displayed.

&lt;b&gt;Note:&lt;/b&gt; For performance reasons, only appointments in the visible time range or nearby should be assigned.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="specialDates" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds the special dates in the context of a row. A single date or a date range can be set.

&lt;b&gt;Note&lt;/b&gt; Only date or date ranges of type &lt;code&gt;sap.ui.unified.CalendarDayType.NonWorking&lt;/code&gt; will
be visualized in the &lt;code&gt;PlanningCalendarRow&lt;/code&gt;. If the aggregation is set as another type,
the date or date range will be ignored and will not be displayed in the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds the header content of the row.

&lt;b&gt;Note:&lt;/b&gt; If the &lt;code&gt;headerContent&lt;/code&gt; aggregation is added, then the set icon, description, title
and tooltip are ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is dropped.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentDragEnter" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is dropped.

When this event handler is attached, the default behavior of the &lt;code&gt;enableAppointmentsDragAndDrop&lt;/code&gt;
property to move appointments only within their original calendar row is no longer valid. You can move
the appointment around all rows for which &lt;code&gt;enableAppointmentsDragAndDrop&lt;/code&gt; is set to true.
In this case, the drop target area is indicated by a placeholder. In the event handler you can call the
&lt;code&gt;preventDefault&lt;/code&gt; method of the event to prevent this default behavior. In this case,
the placeholder will no longer be available and it will not be possible to drop the appointment in the row.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentResize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is resized.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentCreate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is created.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PlanningCalendarView" type="PlanningCalendarView" />
  <xs:complexType name="PlanningCalendarView">
    <xs:annotation>
      <xs:documentation>
View of the {@link sap.m.PlanningCalendar}.

The &lt;code&gt;PlanningCalendarView&lt;/code&gt; defines the type of the intervals (hours, days, months)
and how many intervals are displayed.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="key" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the key of the view. This must be set to identify the used view in the
{@link sap.m.PlanningCalendar}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intervalType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the type of the intervals of the row.

&lt;b&gt;Note:&lt;/b&gt; Not all predefined interval types are supported for this property. For more information, see the
descriptions in the {@link sap.ui.unified.CalendarIntervalType CalendarIntervalType} enumeration.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the description of the &lt;code&gt;PlanningCalendarView&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intervalsS" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is less than 600 pixels wide.
&lt;b&gt;Note:&lt;/b&gt; On a phone the maximum visible intervals are 8.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intervalsM" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is between 600 and 1024 pixels wide.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="intervalsL" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is more than 1024 pixels wide.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSubIntervals" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set, subintervals are displayed as lines in the rows.

&lt;ul&gt;
&lt;li&gt;Quarter hour subintervals for interval type &lt;code&gt;Hour&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hour subintervals for interval types &lt;code&gt;Day&lt;/code&gt;, &lt;code&gt;Week&lt;/code&gt; and &lt;code&gt;OneMonth&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Day subintervals for interval type &lt;code&gt;Month&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Popover" type="Popover" />
  <xs:complexType name="Popover">
    <xs:annotation>
      <xs:documentation>
Displays additional information for an object in a compact way.

&lt;h3&gt;Overview&lt;/h3&gt;
The popover displays additional information for an object in a compact way and without leaving the page. The popover can contain various UI elements such as fields, tables, images, and charts. It can also include actions in the footer.
&lt;h3&gt;Structure&lt;/h3&gt;
The popover has three main areas:
&lt;ul&gt;
&lt;li&gt;Header (optional) - with a back button and a title&lt;/li&gt;
&lt;li&gt;Content - holds all the controls&lt;/li&gt;
&lt;li&gt;Footer (optional) - with additional action buttons&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Guidelines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Do not overlap popovers.&lt;/li&gt;
&lt;li&gt;You can determine the {@link sap.m.PlacementType placement} of the popover relative to the control that opens it.&lt;/li&gt;
&lt;li&gt;Ensure that the content has a basic design and shows only the most important information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to define your own structure of controls within the popover.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The {@link sap.m.QuickView QuickView} is more appropriate for your use case.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
The popover is closed when the user clicks or taps outside the popover or selects an action within the popover. You can prevent this with the &lt;code&gt;modal&lt;/code&gt; property.
The popover can be resized when the &lt;code&gt;resizable&lt;/code&gt; property is enabled.

When using the sap.m.Popover in Sap Quartz theme, the breakpoints and layout paddings could be determined by the container's width. To enable this concept and add responsive paddings to an element of the Popover control, you may add the following classes depending on your use case: &lt;code&gt;sapUiResponsivePadding--header&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--subHeader&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--content&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--footer&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;{@link sap.m.Popover} is &lt;u&gt;not&lt;/u&gt; responsive on mobile devices - it will always be rendered as a popover and you have to take care of its size and position.&lt;/li&gt;
&lt;li&gt;{@link sap.m.ResponsivePopover} is adaptive and responsive. It renders as a dialog with a close button in the header on phones, and as a popover on tablets.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="customHeader" />
      <xs:element name="subHeader" />
      <xs:element name="footer" />
      <xs:element name="_internalHeader" />
      <xs:element name="beginButton" />
      <xs:element name="endButton" />
    </xs:sequence>
    <xs:attribute name="placement" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If a header should be shown at the top of the popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Title text appears in the header. This property will be ignored when showHeader is set to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="modal" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="offsetX" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The offset for the popover placement in the x axis. It's with unit pixel.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="offsetY" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The offset for the popover placement in the y axis. It's with unit pixel.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showArrow" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether Popover arrow should be visible
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentMinWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the minimum width of the content area inside popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verticalScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="horizontalScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bounce" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether bouncing is enabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resizable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether resize option is enabled.
*Note:* This property is effective only on Desktop
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ariaModal" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the aria-modal of the Popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleAlignment" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the Title alignment (theme specific).
If set to &lt;code&gt;TitleAlignment.Auto&lt;/code&gt;, the Title will be aligned as it is set in the theme (if not set, the default value is &lt;code&gt;center&lt;/code&gt;);
Other possible values are &lt;code&gt;TitleAlignment.Start&lt;/code&gt; (left or right depending on LTR/RTL), and &lt;code&gt;TitleAlignment.Center&lt;/code&gt; (centered)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content inside the popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This is optional footer which is shown on the bottom of the popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_internalHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This is the hidden aggregation for managing the internally created header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beginButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the popover is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired after the popover is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the popover is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired before the popover is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ProgressIndicator" type="ProgressIndicator" />
  <xs:complexType name="ProgressIndicator">
    <xs:annotation>
      <xs:documentation>
Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
Additionally, a user-defined string can be displayed on the ProgressIndicator.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error, Warning, Success, Information, None (default value).
The color for each state depends on the theme.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text value to be displayed in the bar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="percentValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the numerical value in percent for the length of the progress bar.

&lt;b&gt;Note:&lt;/b&gt; If a value greater than 100 is provided, the &lt;code&gt;percentValue&lt;/code&gt; is set to 100.
In other cases of invalid value, &lt;code&gt;percentValue&lt;/code&gt; is set to its default of 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the displayValue should be shown in the ProgressIndicator.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayOnly" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the control is in display-only state where the control has different visualization and cannot be focused.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="PullToRefresh" type="PullToRefresh" />
  <xs:complexType name="PullToRefresh">
    <xs:annotation>
      <xs:documentation>
PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Optional description. May be used to inform a user, for example, when the list has been updated last time.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is the key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="refresh" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event indicates that the user has requested new data
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="QuickView" type="QuickView" />
  <xs:complexType name="QuickView">
    <xs:annotation>
      <xs:documentation>
A responsive popover that displays information on an object in a business-card format.
&lt;h3&gt;Overview&lt;/h3&gt;
The quick view is used to show business information on either a person or an entity (e.g. a company). It uses a set of pre-defined controls.
Objects can be linked together and you can navigate between several objects. An unlimited number of objects can be linked.
&lt;h3&gt;Structure&lt;/h3&gt;
Each card is represented by a {@link sap.m.QuickViewPage} which holds all the information (icon, title, header, description) for the object.
A single quick view can hold multiple objects, each showing information on a single entity.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to display a concise overview of an object (an employee or a company).&lt;/li&gt;
&lt;li&gt;Information on the object can be split into concrete groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to display complex information about an object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
The quick view is displayed in a {@link sap.m.Popover popover} on desktop and a full-screen {@link sap.m.Dialog dialog} on mobile devices.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="QuickViewBase">
    <xs:attribute name="placement" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please refer the documentation of the placement property of sap.m.Popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the QuickView. The property takes effect only when running on desktop or tablet.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event fires after the QuickView is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event fires after the QuickView is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event fires before the QuickView is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event fires before the QuickView is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="QuickViewBase" type="QuickViewBase" />
  <xs:complexType name="QuickViewBase">
    <xs:annotation>
      <xs:documentation>
QuickViewBase class provides base functionality for QuickView and QuickViewCard.
Do not use it directly.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="pages" />
    </xs:sequence>
    <xs:attribute name="pages" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Displays a page header, object icon or image, object name with short description,
and object information divided in groups
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is fired when navigation between two pages has been triggered.
The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(),
which means that there will be no navigation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterNavigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is fired when navigation between two pages has completed.
In case of animated transitions this event is fired with some delay
after the "navigate" event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="QuickViewCard" type="QuickViewCard" />
  <xs:complexType name="QuickViewCard">
    <xs:annotation>
      <xs:documentation>
The QuickViewCard control displays information of an object in a business-card format.
It also allows this object to be linked to another object using one of the links.
Clicking that link updates the information with the data of the linked object.
Unlimited number of objects can be linked.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="QuickViewBase">
    <xs:attribute name="showVerticalScrollBar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="QuickViewGroup" type="QuickViewGroup" />
  <xs:complexType name="QuickViewGroup">
    <xs:annotation>
      <xs:documentation>
QuickViewGroup consists of a title (optional) and an entity of group elements.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="elements" />
    </xs:sequence>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the group is visible on the screen.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="heading" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The title of the group
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="elements" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A combination of one label and another control (Link or Text) associated to this label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="QuickViewGroupElement" type="QuickViewGroupElement" />
  <xs:complexType name="QuickViewGroupElement">
    <xs:annotation>
      <xs:documentation>
QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to this label.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the element should be visible on the screen.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text displayed below the associated label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text of the control that associates with the label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="target" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the target of the link - it works like the target property of the HTML &lt;a&gt; tag. Works only with QuickViewGroupElement of type link.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the type of the displayed information - phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is 'text'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pageLinkId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement.
Works only with QuickViewGroupElement of type pageLink.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="emailSubject" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The subject of the email.
Works only with QuickViewGroupElement of type email.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="QuickViewPage" type="QuickViewPage" />
  <xs:complexType name="QuickViewPage">
    <xs:annotation>
      <xs:documentation>
QuickViewPage consists of  a page header, an object icon or image,
an object name with short description, and an object information divided in groups.
The control uses the sap.m.SimpleForm control to display information.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="groups" />
    </xs:sequence>
    <xs:attribute name="pageId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Page id
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text displayed in the header of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text displayed in the header of the content section of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleUrl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the URL which opens when the title or the thumbnail is clicked.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="crossAppNavCallback" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the application which provides target and param configuration  for cross-application navigation from the 'page header'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text displayed under the header of the content section
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the URL of the icon displayed under the header of the page
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fallbackIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the fallback icon displayed in case of wrong image src or loading issues.

&lt;b&gt;Note&lt;/b&gt; Accepted values are only icons from the SAP icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groups" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
QuickViewGroup consists of a title (optional) and an entity of group elements.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="RadioButton" type="RadioButton" />
  <xs:complexType name="RadioButton">
    <xs:annotation>
      <xs:documentation>
RadioButton is a control similar to a {@link sap.m.CheckBox checkbox}, but it allows you to choose only one of the predefined set of options.
Multiple radio buttons have to belong to the same group (have the same value for &lt;code&gt;groupName&lt;/code&gt;) in order to be mutually exclusive.
A wrapper control {@link sap.m.RadioButtonGroup RadioButtonGroup} can be used instead of individual radio buttons.
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Radio buttons can have a value state like Error or Warning.&lt;/li&gt;
&lt;li&gt;Radio buttons can be arranged vertically by setting the &lt;code&gt;column&lt;/code&gt; to a number higher than 1.&lt;/li&gt;
&lt;li&gt;Radio button options need to have a {@link sap.m.Label label}.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You quickly need to choose between at least two alternatives.&lt;/li&gt;
&lt;li&gt;You need to place other controls between the radio button options.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to select multiple values for the same option. Use {@link sap.m.CheckBox checkboxes} instead.&lt;/li&gt;
&lt;li&gt;When the default value is recommended for most users in most situations. Use a {@link sap.m.Select drop-down} instead as is saves space by not showing all the alternatives.&lt;/li&gt;
&lt;li&gt;You want have more than 8 options. Use a {@link sap.m.Select drop-down} instead.&lt;/li&gt;
&lt;li&gt;When the options are mutually exclusive e.g. ON/OFF. Use a {@link sap.m.Switch switch} instead.&lt;/li&gt;
&lt;li&gt;Avoid using horizontally aligned radio buttons as they will be cut off on phones.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt; The order in which the RadioButtons will be selected one after another is determined upon instantiation of the control.
This order is consistent with the ARIA attributes for position, which the same button will receive when added to specific group.

&lt;b&gt;Example:&lt;/b&gt; If three buttons are created (&lt;code&gt;button1, button2, button3&lt;/code&gt;) in consecutive order, initially they will have the same positions
and TAB order. However if after that &lt;code&gt;button1&lt;/code&gt; and &lt;code&gt;button3&lt;/code&gt; are moved to a new group and then &lt;code&gt;button2&lt;/code&gt; is added to the
same group, their TAB order and position in this group will be &lt;code&gt;button1, button3, button2&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies if the radio button is disabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the select state of the radio button
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Name of the radio button group the current radio button belongs to. You can define a new name for the group.
If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text displayed next to the RadioButton
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Width of the RadioButton or it's label depending on the useEntireWidth property.
By Default width is set only for the label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="useEntireWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates if the given width will be applied for the whole RadioButton or only it's label.
By Default width is set only for the label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeHandling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This is a flag to switch on activeHandling. When it is switched off,
there will not be visual changes on active state. Default value is 'true'
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the user can select the radio button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, Information, None
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editableParent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies if the RadioButton should be editable. This property meant to be used by parent controls (e.g. RadioButtoGroup).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="RadioButtonGroup" type="RadioButtonGroup" />
  <xs:complexType name="RadioButtonGroup">
    <xs:annotation>
      <xs:documentation>
This control is used as a wrapper for a group of {@link sap.m.RadioButton} controls, which can be used as a single UI element.
You can select only one of the grouped radio buttons at a time.
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The radio buttons are stored in the &lt;code&gt;buttons&lt;/code&gt; aggregation.&lt;/li&gt;
&lt;li&gt;By setting the &lt;code&gt;columns&lt;/code&gt; property, you can create layouts like a 'matrix', 'vertical' or 'horizontal'.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Note:&lt;/b&gt;For proper display on all devices, we recommend creating radio button groups with only one row or only one column.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to attach a single event handler on a group of buttons, rather than on each individual button.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Do not put two radio button groups right next to each other as it is difficult to determine which buttons belong to which group.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="buttons" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the width of the RadioButtonGroup.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columns" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the maximum number of radio buttons displayed in one line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies whether the user can change the selected value of the RadioButtonGroup.
When the property is set to false, the control obtains visual styles
different from its visual styles for the normal and the disabled state.
Additionally, the control is no longer interactive, but can receive focus.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The value state to be displayed for the radio button. Possible values are: sap.ui.core.ValueState.Error,
sap.ui.core.ValueState.Warning, sap.ui.core.ValueState.Success and sap.ui.core.ValueState.None.
Note: Setting this attribute to sap.ui.core.ValueState.Error when the accessibility feature is enabled,
sets the value of the invalid property for the whole RadioButtonGroup to "true".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedIndex" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the index of the selected/checked RadioButton. Default is 0.
If no radio button is selected, the selectedIndex property will return -1.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is "true".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Returns a list of the RadioButtons in a RadioButtonGroup
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when selection is changed by user interaction.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="RangeSlider" type="RangeSlider" />
  <xs:complexType name="RangeSlider">
    <xs:annotation>
      <xs:documentation>
Represents a numerical interval and two handles to select a sub-range within it.
&lt;h3&gt;Overview&lt;/h3&gt;
The purpose of the control is to enable visual selection of sub-ranges within a given interval.
&lt;h4&gt;Notes:&lt;h4&gt;
&lt;ul&gt;
&lt;li&gt;The RangeSlider extends the functionality of the {@link sap.m.Slider Slider}&lt;/li&gt;
&lt;li&gt;The right and left handle can be moved individually and their positions could therefore switch.&lt;/li&gt;
&lt;li&gt;The entire range can be moved along the interval.&lt;/li&gt;
&lt;li&gt;The right and left handle can select the same value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;
The most common usecase is to select and move sub-ranges on a continuous numerical scale.

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
You can move the currently selected range by clicking on it and dragging it along the interval.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Slider">
    <xs:attribute name="value2" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Current second value of the slider. (Position of the second handle.)

&lt;b&gt;Note:&lt;/b&gt; If the value is not in the valid range (between &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;) it will be changed to be in the valid range.
If it is smaller than &lt;code&gt;value&lt;/code&gt; it will be set to the same value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="range" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the currently selected range on the slider.

If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the console.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="RatingIndicator" type="RatingIndicator" />
  <xs:complexType name="RatingIndicator">
    <xs:annotation>
      <xs:documentation>
The rating indicator is used to display a specific number of icons that are used to rate an item. Additionally it is also used to display the average over all ratings.
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The rating indicator can use different icons (default: stars) which are defined as URIs in the properties &lt;code&gt;iconHovered&lt;/code&gt;, &lt;code&gt;iconSelected&lt;/code&gt; and &lt;code&gt;iconUnselected&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The rating indicator can display half-values ({@link sap.m.RatingIndicatorVisualMode visualMode} = Half) when it is used to show the average. Half-values can't be selected by the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
The preferred number of icons is between 5 (default) and 7.
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
You can display icons in 4 recommended sizes:
&lt;ul&gt;
&lt;li&gt;large - 32px&lt;/li&gt;
&lt;li&gt;medium(default) - 22px&lt;/li&gt;
&lt;li&gt;small - 16px&lt;/li&gt;
&lt;li&gt;XS - 12px&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Note:&lt;/b&gt; If no icon size is set, the rating indicator will set it according to the content density.&lt;/h4&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The number of displayed rating symbols
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The indicated value of the rating
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconSelected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconUnselected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconHovered" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visualMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayOnly" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The RatingIndicator in displayOnly mode is not interactive, not editable, not focusable, and not in the tab chain. This setting is used for forms in review mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the user is allowed to edit the RatingIndicator. If editable is false the control is focusable, and in the tab chain but not interactive.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is fired when the user has done a rating.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is triggered during the dragging period, each time the rating value changes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ResponsivePopover" type="ResponsivePopover" />
  <xs:complexType name="ResponsivePopover">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;
The responsive popover acts as a {@link sap.m.Popover popover} on desktop and tablet,
while on phone it acts as a {@link sap.m.Dialog dialog} with &lt;code&gt;stretch&lt;/code&gt; set to true.

&lt;b&gt;Note:&lt;/b&gt; It is recommended that &lt;code&gt;ResponsivePopover&lt;/code&gt; is used in fragments otherwise there might
be some implications on the user experience. For example, on desktop, open or close functions
of the &lt;code&gt;Popover&lt;/code&gt; might not be called.

&lt;h3&gt;Usage&lt;/h3&gt;
When you want to make sure that all content is visible on any device.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="customHeader" />
      <xs:element name="subHeader" />
      <xs:element name="beginButton" />
      <xs:element name="endButton" />
      <xs:element name="_popup" />
    </xs:sequence>
    <xs:attribute name="placement" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property only takes effect  on phone. Please see the documentation sap.m.Dialog#icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="modal" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="offsetX" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="offsetY" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showArrow" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="horizontalScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="verticalScrolling" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showCloseButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if a close button should be inserted into the dialog's header dynamically to close the dialog. This property only takes effect on phone.
&lt;b&gt;Note:&lt;/b&gt; The close button could be placed only in a sap.m.Bar if a sap.m.Toolbar is passed as a header - the property will not take effect.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resizable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether resize option is enabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleAlignment" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the Title alignment (theme specific).
If set to &lt;code&gt;TitleAlignment.Auto&lt;/code&gt;, the Title will be aligned as it is set in the theme (if not set, the default value is &lt;code&gt;center&lt;/code&gt;);
Other possible values are &lt;code&gt;TitleAlignment.Start&lt;/code&gt; (left or right depending on LTR/RTL), and &lt;code&gt;TitleAlignment.Center&lt;/code&gt; (centered)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Content is supported by both variants. Please see the documentation on sap.m.Popover#content and sap.m.Dialog#content
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
CustomHeader is supported by both variants. Please see the documentation on sap.m.Popover#customHeader and sap.m.Dialog#customHeader
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="subHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
SubHeader is supported by both variants. Please see the documentation on sap.m.Popover#subHeader and sap.m.Dialog#subHeader
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beginButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
BeginButton is supported by both variants. It is always show in the left part (right part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
EndButton is supported by both variants. It is always show in the right part (left part in RTL mode) of the footer which is located at the bottom of the ResponsivePopover. If buttons need to be displayed in header, please use customHeader instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_popup" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The internal popup instance which is either a dialog on phone or a popover on the rest of platforms
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired before popover or dialog is open.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired after popover or dialog is open.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired before popover or dialog is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is fired after popover or dialog is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ResponsiveScale" type="ResponsiveScale" />
  <xs:complexType name="ResponsiveScale">
    <xs:annotation>
      <xs:documentation>
&lt;strong&gt;&lt;i&gt;Overview&lt;/i&gt;&lt;/strong&gt;

A {@link sap.m.Slider} element represents a scale with tickmarks and labels.
The purpose of the element is to decouple the scale logic from other controls i.e. Slider / RangeSlider


The most important properties of the ResponsiveScale are:
&lt;ul&gt;
&lt;li&gt; tickmarksBetweenLabels - Puts a label on every N-th tickmark.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollBar" type="ScrollBar" />
  <xs:complexType name="ScrollBar">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;ScrollBar&lt;/code&gt; control can be used for virtual scrolling of a certain area.
This means: to simulate a very large scrollable area when technically the area is small and the control
takes care of displaying the respective part only. For example, a &lt;code&gt;Table&lt;/code&gt; control can take
care of only rendering the currently visible rows and use this &lt;code&gt;ScrollBar&lt;/code&gt; control to make
the users think they are actually scrolling through a long list.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="scrollPosition" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines scroll position in pixels. It is kept in sync with the current scroll value of the container.

&lt;b&gt;Note:&lt;/b&gt; If you set &lt;code&gt;scrollPosition&lt;/code&gt; to negative value or bigger than the
&lt;code&gt;contentSize&lt;/code&gt;, the actual &lt;code&gt;scrollPosition&lt;/code&gt; would be respectively
0 if it's negative or the maximum allowed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Size of the scrollable content (in pixels).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scroll" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Scroll event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollContainer" type="ScrollContainer" />
  <xs:complexType name="ScrollContainer">
    <xs:annotation>
      <xs:documentation>
The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides scrolling to make all content accessible.
&lt;h3&gt;When not to use&lt;/h3&gt;
Do not nest scrolling areas that scroll in the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled).
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The width of the ScrollContainer.
If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The height of the ScrollContainer.
By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.

Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="horizontal" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether horizontal scrolling should be possible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="vertical" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether vertical scrolling should be possible.

Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="focusable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether the scroll container can be focused.

Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of the ScrollContainer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SearchField" type="SearchField" />
  <xs:complexType name="SearchField">
    <xs:annotation>
      <xs:documentation>
An input field to search for a specific item.
&lt;h3&gt;Overview&lt;/h3&gt;
A search field is needed when the user needs to find specific information in large amounts of data.
The search field is also the control of choice for filtering down
a given amount of information.
&lt;h3&gt;Structure&lt;/h3&gt;
The search input field can be used in two ways:
&lt;ul&gt;
&lt;li&gt;Manual search - The search is triggered after the user presses the search button.
Manual search uses a ÔÇ£starts withÔÇØ approach.&lt;/li&gt;
&lt;li&gt;Live search (search-as-you-type) - The search is triggered after each button press.
A suggestion list is shown below the search field.  Live search uses a ÔÇ£containsÔÇØ approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; Use live search whenever possible. &lt;/li&gt;
&lt;li&gt; Use a manual search only if the amount of data is too large and if your app would otherwise run
into performance issues. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
On mobile devices, there is no refresh button in the search field. "Pull Down to Refresh" is used instead.
The "Pull Down to Refresh" arrow icon is animated and spins to signal that the user should release it.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="suggestionItems" />
    </xs:sequence>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Input Value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the CSS width of the input. If not set, width is 100%.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Boolean property to enable the control (default is true).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Invisible inputs are not rendered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Maximum number of characters. Value '0' means the feature is switched off.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="placeholder" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showMagnifier" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set to false to hide the magnifier icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showRefreshButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="refreshButtonTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Tooltip text of the refresh button. If it is not set, the  Default tooltip text is the word "Refresh" in the current local language (if supported) or in English. Tooltips are not displayed on touch devices.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSearchButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Set to true to show the search button with the magnifier icon.
If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableSuggestions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If true, a &lt;code&gt;suggest&lt;/code&gt; event is fired when user types in the input and when the input is focused.
On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectOnFocus" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggestionItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;SuggestionItems&lt;/code&gt; are the items which will be shown in the suggestions list.
The following properties can be used:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; is not displayed and may be used as internal technical field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; is displayed as normal suggestion text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; - additional text may be used to visually display search item type or category&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="search" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event which is fired when the user triggers a search.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="suggest" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the search field is initially focused or its value is changed by the user.
This event means that suggestion data should be updated, in case if suggestions are used.
Use the value parameter to create new suggestions for it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SegmentedButton" type="SegmentedButton" />
  <xs:complexType name="SegmentedButton">
    <xs:annotation>
      <xs:documentation>
A horizontal control made of multiple buttons, which can display a title or an image.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;SegmentedButton&lt;/code&gt; shows a group of buttons. When the user clicks or taps
one of the buttons, it stays in a pressed state. It automatically resizes the buttons
to fit proportionally within the control. When no width is set, the control uses the available width.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="buttons" />
      <xs:element name="items" />
      <xs:element name="_select" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Key of the selected item. If no item to this key is found in the items aggregation, no changes will apply. Only the items aggregation is affected. If duplicate keys exist, the first item matching the key is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="buttons" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The buttons of the SegmentedButton control. The items set in this aggregation are used as an interface for the buttons displayed by the control. Only the properties ID, icon, text, enabled and textDirections of the Button control are evaluated. Setting other properties of the button will have no effect. Alternatively, you can use the createButton method to add buttons.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aggregation of items to be displayed. The items set in this aggregation are used as an interface for the buttons displayed by the control.
The "items" and "buttons" aggregations should NOT be used simultaneously as it causes the control to work incorrectly.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation that holds an instance of sap.m.Select to be used in some contexts as a representation of the segmented button (for example, in a popover with little space).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user selects a button, which returns the ID and button object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user selects an item, which returns the item object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SegmentedButtonItem" type="SegmentedButtonItem" />
  <xs:complexType name="SegmentedButtonItem">
    <xs:annotation>
      <xs:documentation>
Used for creating buttons for the {@link sap.m.SegmentedButton}.
It is derived from the {@link sap.ui.core.Item}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon, which belongs to the button.
This can be a URI to an image or an icon font URI.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the width of the buttons.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user clicks on an individual button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Select" type="Select" />
  <xs:complexType name="Select">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.Select&lt;/code&gt; control provides a list of items that allows users to select an item.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="picker" />
      <xs:element name="_valueIcon" />
      <xs:element name="_pickerHeader" />
      <xs:element name="_pickerValueStateContent" />
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the user can modify the selected item. When the property is set
to &lt;code&gt;false&lt;/code&gt;, the control appears as disabled and CANNOT be focused.

&lt;b&gt;Note:&lt;/b&gt; When both &lt;code&gt;enabled&lt;/code&gt; and &lt;code&gt;editable&lt;/code&gt; properties
are set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;enabled&lt;/code&gt; has priority over
&lt;code&gt;editable&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the user can modify the selected item. When the property is set
to &lt;code&gt;false&lt;/code&gt;, the control appears as disabled but CAN still be focused.

&lt;b&gt;Note:&lt;/b&gt; When both &lt;code&gt;enabled&lt;/code&gt; and &lt;code&gt;editable&lt;/code&gt; properties
are set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;enabled&lt;/code&gt; has priority over
&lt;code&gt;editable&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the width of the field. By default, the field width is automatically adjusted to the size
of its content and the default width of the field is calculated based on the widest list item
in the dropdown list.
If the width defined is smaller than its content, only the field width is changed whereas
the dropdown list keeps the width of its content.
If the dropdown list is wider than the visual viewport, it is truncated and an ellipsis is displayed
for each item.
For phones, the width of the dropdown list is always the same as the viewport.

&lt;b&gt;Note:&lt;/b&gt; This property is ignored if the &lt;code&gt;autoAdjustWidth&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the maximum width of the control.

&lt;b&gt;Note:&lt;/b&gt; This property is ignored if the &lt;code&gt;autoAdjustWidth&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Key of the selected item.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt; If duplicate keys exist, the first item matching the key is used.&lt;/li&gt;
&lt;li&gt; If invalid or none &lt;code&gt;selectedKey&lt;/code&gt; is used, the first item is
being selected.&lt;/li&gt;
&lt;li&gt; Invalid or missing &lt;code&gt;selectedKey&lt;/code&gt; leads to severe functional
issues in &lt;code&gt;sap.m.Table&lt;/code&gt;, when the &lt;code&gt;sap.m.Select&lt;/code&gt; is used inside a
&lt;code&gt;sap.m.Table&lt;/code&gt; column.&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedItemId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
ID of the selected item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The URI to the icon that will be displayed only when using the &lt;code&gt;IconOnly&lt;/code&gt; type.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Type of a select. Possible values &lt;code&gt;Default&lt;/code&gt;, &lt;code&gt;IconOnly&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoAdjustWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the width of the input field is determined by the selected item's content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the horizontal alignment of the text within the input field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the direction of the text within the input field with enumerated options.
By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Visualizes the validation state of the control, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;,
&lt;code&gt;Success&lt;/code&gt;, &lt;code&gt;Information&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueStateText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text of the value state message popup.
If this is not specified, a default text is shown from the resource bundle.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSecondaryValues" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the text values of the &lt;code&gt;additionalText&lt;/code&gt; property of a
{@link sap.ui.core.ListItem} are shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceSelection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the selection is restricted to one of the items in the list.
&lt;b&gt;Note:&lt;/b&gt; We strongly recommend that you always set this property to &lt;code&gt;false&lt;/code&gt; and bind
the &lt;code&gt;selectedKey&lt;/code&gt; property to the desired value for better interoperability with data binding.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapItemsText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the text in the items wraps on multiple lines when the available width is not enough.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the items contained within this control.

&lt;b&gt;Note:&lt;/b&gt; For items with icons you can use {@link sap.ui.core.ListItem}.

Example:

&lt;pre&gt;
&lt;code&gt; &lt;ListItem text="Paper plane" icon="sap-icon://paper-plane"&gt;&lt;/ListItem&gt; &lt;/code&gt;
&lt;/pre&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="picker" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the inner picker popup.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_valueIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon, displayed in the left most area of the &lt;code&gt;Select&lt;/code&gt; input.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_pickerHeader" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the picker's header
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_pickerValueStateContent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the picker's subheader.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the value in the selection field is changed in combination with one of
the following actions:
&lt;ul&gt;
	&lt;li&gt;The focus leaves the selection field&lt;/li&gt;
	&lt;li&gt;The &lt;i&gt;Enter&lt;/i&gt; key is pressed&lt;/li&gt;
	&lt;li&gt;The item is pressed&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectDialog" type="SelectDialog" />
  <xs:complexType name="SelectDialog">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;
A SelectDialog is a dialog containing a list, search functionality to filter it and a confirmation/cancel button.
The list used in the dialog is a growing list and can be filled with any kind of list item.
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;h4&gt;Dialog structure&lt;/h4&gt;
The select dialog has the following components:
&lt;ul&gt;
&lt;li&gt;Header - title of the dialog&lt;/li&gt;
&lt;li&gt;Search field - input field to enter search terms&lt;/li&gt;
&lt;li&gt;Info toolbar (only in multi-select) - displays the number of currently selected items&lt;/li&gt;
&lt;li&gt;Content - {@link sap.m.StandardListItem  standard list items}, {@link sap.m.DisplayListItem
display list items} or {@link sap.m.FeedListItem feed list items}&lt;/li&gt;
&lt;li&gt;Button toolbar - for confirmation/cancellation buttons &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;List structure &amp; selection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; The search field triggers the events &lt;code&gt;search&lt;/code&gt; and &lt;code&gt;liveChange&lt;/code&gt;
where a filter function can be applied to the list binding. &lt;/li&gt;
&lt;li&gt; The growing functionality of the list does not support two-way Binding, so if you use this control with a JSON model
make sure the binding mode is set to &lt;code&gt;OneWay&lt;/code&gt; and that you update the selection model manually with
the items passed in the &lt;code&gt;confirm&lt;/code&gt; event. &lt;/li&gt;
&lt;li&gt; In the multi-select mode of the select dialog, checkboxes are provided for choosing multiple entries. &lt;/li&gt;
&lt;li&gt; You can set &lt;code&gt;rememberSelections&lt;/code&gt; to true to store the current selection and load this state
when the dialog is opened again. &lt;/li&gt;
&lt;li&gt; When cancelling the selection, the event &lt;code&gt;change&lt;/code&gt; will be fired and the selection is restored
to the state when the dialog was opened. &lt;/li&gt;
&lt;li&gt;The SelectDialog is usually displayed at the center of the screen. Its size and position can be changed by the user.
To enable this you need to set the &lt;code&gt;resizable&lt;/code&gt; and &lt;code&gt;draggable&lt;/code&gt; properties. Both properties are available only in desktop mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to select one or more entries from a comprehensive list that contains multiple attributes or values. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt; You need to pick one item from a predefined set of options. Use {@link sap.m.Select select}
or {@link sap.m.ComboBox combobox} instead. &lt;/li&gt;
&lt;li&gt; You need to select a range of item. Use {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog value help dialog} instead. &lt;/li&gt;
&lt;li&gt; You need to be able to add your own values to an existing list. Use a {@link sap.m.Dialog dialog} instead. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Note:&lt;/h4&gt;
The property &lt;code&gt;growing&lt;/code&gt; determines the progressive loading. If it's set to true (the default value), the
&lt;code&gt;selected count&lt;/code&gt; in info bar and search  will work only for the currently loaded items.
To make sure that all items in the list are loaded at once and the above feature works properly,
we recommend setting the &lt;code&gt;growing&lt;/code&gt; property to false.
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; On phones, the select dialog takes up the whole screen. &lt;/li&gt;
&lt;li&gt; On desktop and tablet devices, the select dialog appears as a popover. &lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="_dialog" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the title text that appears in the dialog header
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noDataText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text shown when the list has no data
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multiSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the user can select several options from the list
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingThreshold" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the number of items initially displayed in the list. Also defines the number of items to be requested from the model for each grow.
&lt;b&gt;Note:&lt;/b&gt; This property could take affect only be used if the property &lt;code&gt;growing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growing" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;true&lt;/code&gt;, enables the growing feature of the control to load more items by requesting from the bound model (progressive loading).
&lt;b&gt;Note:&lt;/b&gt; This feature only works when an &lt;code&gt;items&lt;/code&gt; aggregation is bound.
&lt;b&gt;Note:&lt;/b&gt; Growing property, must not be used together with two-way binding.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the content width of the inner dialog. For more information, see the dialog documentation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rememberSelections" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".

&lt;b&gt;Note:&lt;/b&gt; The sap.m.SelectDialog uses {@link sap.m.ListBase#rememberSelections this} property of the ListBase and therefore its limitations also apply here.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the content height of the inner dialog. For more information, see the dialog documentation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showClearButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This flag controls whether the Clear button is shown. When set to &lt;code&gt;true&lt;/code&gt;, it provides a way to clear selection mode in Select Dialog.
We recommended enabling of the Clear button in the following cases, where a mechanism to clear the value is needed:
In case of single selection mode(default mode) for Select Dialog and &lt;code&gt;rememberSelections&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. Clear button needs to be enabled in order to allow users to clear the selection.
In case of using &lt;code&gt;sap.m.Input&lt;/code&gt; with &lt;code&gt;valueHelpOnly&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, the Clear button could be used for clearing selection.
In case the application stores a value and uses only Select Dialog to edit/maintain it.
&lt;b&gt;Note:&lt;/b&gt;When used with oData, only the loaded selections will be cleared.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="confirmButtonText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Overwrites the default text for the confirmation button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="draggable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When set to &lt;code&gt;true&lt;/code&gt;, the SelectDialog is draggable by its header. The default value is &lt;code&gt;false&lt;/code&gt;. &lt;b&gt;Note&lt;/b&gt;: The SelectDialog can be draggable only in desktop mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resizable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When set to &lt;code&gt;true&lt;/code&gt;, the SelectDialog will have a resize handler in its bottom right corner. The default value is &lt;code&gt;false&lt;/code&gt;. &lt;b&gt;Note&lt;/b&gt;: The SelectDialog can be resizable only in desktop mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleAlignment" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the Title alignment (theme specific).
If set to &lt;code&gt;TitleAlignment.Auto&lt;/code&gt;, the Title will be aligned as it is set in the theme (if not set, the default value is &lt;code&gt;center&lt;/code&gt;);
Other possible values are &lt;code&gt;TitleAlignment.Start&lt;/code&gt; (left or right depending on LTR/RTL), and &lt;code&gt;TitleAlignment.Center&lt;/code&gt; (centered)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_dialog" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The internal dialog that will be shown when method open is called
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="confirm" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="search" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when the search button has been clicked on the searchfield on the visual control
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when the value of the search field is changed by a user - e.g. at each key press
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event will be fired when the cancel button is clicked or ESC key is pressed
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectionDetails" type="SelectionDetails" />
  <xs:complexType name="SelectionDetails">
    <xs:annotation>
      <xs:documentation>
The protected control provides a popover that displays the details of the items selected in the chart. This control should only be used in the toolbars of sap.suite.ui.commons.ChartContainer and sap.ui.comp.smartchart.SmartChart controls. Initially, the control is rendered as a button that opens the popup after clicking on it.
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;It is protected and should only be used within the framework itself.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="actions" />
      <xs:element name="actionGroups" />
      <xs:element name="_popover" />
      <xs:element name="_button" />
    </xs:sequence>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains {@link sap.m.SelectionDetailsItem items} that are displayed on the first page.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains custom actions shown in the responsive toolbar below items on the first page.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actionGroups" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains actions that are rendered as a dedicated {@link sap.m.StandardListItem item}.
In case an action group is pressed, a navigation should be triggered via &lt;code&gt;navTo&lt;/code&gt; method.
A maximum of 5 actionGroups is displayed inside the popover, though more can be added to the aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_popover" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation that contains the popover.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_button" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation that contains the button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is triggered before the popover is open.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is triggered before the popover is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="navigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actionPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Event is triggered when a custom action is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectionDetailsFacade" type="SelectionDetailsFacade" />
  <xs:complexType name="SelectionDetailsFacade">
    <xs:annotation>
      <xs:documentation>
The public facade of the {@link sap.m.SelectionDetails} control.
      </xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:element name="SelectionDetailsItemFacade" type="SelectionDetailsItemFacade" />
  <xs:complexType name="SelectionDetailsItemFacade">
    <xs:annotation>
      <xs:documentation>
The public facade of the {@link sap.m.SelectionDetailsItem} element.
      </xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:element name="SelectionDetailsItem" type="SelectionDetailsItem" />
  <xs:complexType name="SelectionDetailsItem">
    <xs:annotation>
      <xs:documentation>
This protected element provides an item for {@link sap.m.SelectionDetails} that is shown inside a list.
The item includes SelectionDetailsItemLine as its lines that are displayed in one block above the optional actions.
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;It is protected and should only be used within the framework itself.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="lines" />
      <xs:element name="actions" />
      <xs:element name="_overflowToolbar" />
    </xs:sequence>
    <xs:attribute name="enableNav" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether or not the item is active and a navigation event is triggered on press.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lines" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains a record of information about, for example, measures and dimensions.
These entries are usually obtained via selection in chart controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Contains custom actions shown below the main content of the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_overflowToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Shows custom action buttons below the main content of the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectionDetailsItemLine" type="SelectionDetailsItemLine" />
  <xs:complexType name="SelectionDetailsItemLine">
    <xs:annotation>
      <xs:documentation>
This Element provides a means to fill an {@link sap.m.SelectionDetailsItem} with content.
It is used for a form-like display of a label followed by a value with an optional unit.
If the unit is used, the value is displayed bold.
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;It is protected and should ony be used within the framework itself.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The label that is shown as the first part of the line.
It may contain the name of the currently selected dimension or measure.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The value of the line, for example the value of the currently selected measure.
Expected type is a string, number or a plain object, including date and time properties of type string.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The display value of the line. If this property is set, it overrides the value property and is displayed as is.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The unit of the given value. If this unit is given, the line is displayed bold.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lineMarker" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A string to be rendered by the control as a line marker. This string must be a valid SVG definition.
The only valid tags are: svg, path, line.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectList" type="SelectList" />
  <xs:complexType name="SelectList">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.SelectList&lt;/code&gt; displays a list of items that allows the user to select an item.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the user can change the selection.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the maximum width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedKey" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Key of the selected item.

&lt;b&gt;Note: &lt;/b&gt; If duplicate keys exist, the first item matching the key is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectedItemId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
ID of the selected item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSecondaryValues" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the text values of the &lt;code&gt;additionalText&lt;/code&gt; property of a
{@link sap.ui.core.ListItem} are shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyboardNavigationMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the keyboard navigation mode.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;sap.m.SelectListKeyboardNavigationMode.None&lt;/code&gt; enumeration value,
is only intended for use in some composite controls that handles keyboard navigation by themselves.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the items contained within this control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the selection has changed.

&lt;b&gt;Note: &lt;/b&gt; The selection can be changed by pressing a non-selected item or
via keyboard and after the enter or space key is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when an item is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Shell" type="Shell" />
  <xs:complexType name="Shell">
    <xs:annotation>
      <xs:documentation>
The Shell control can be used as root element of applications. It can contain an App or a &lt;code&gt;SplitApp&lt;/code&gt; control.
The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, such as a frame around the App, on desktop browser platforms.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="app" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the logo to be displayed next to the App when the screen is sufficiently large.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showLogout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerRightText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appWidthLimited" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required.
Any configured background image will be placed above this colored background.
Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundImage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required.
This background image will be placed above any color set for the background.
Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundRepeat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundOpacity" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).
This can be used to improve readability of the Shell content by making the background image partly transparent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="homeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.

This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.

Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
The &lt;code&gt;precomposed&lt;/code&gt; flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
{
'phone':'phone-icon_57x57.png',
'phone@2':'phone-retina_114x114.png',
'tablet':'tablet-icon_72x72.png',
'tablet@2':'tablet-retina_144x144.png',
'precomposed':true,
'favicon':'favicon.ico'
}

See jQuery.sap.setIcons() for full documentation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleLevel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the semantic level of the title.

This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation.
Depending on this setting an HTML h1-h6 element is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="app" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="logout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the user presses the logout button/link.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SimpleFixFlex" type="SimpleFixFlex" />
  <xs:complexType name="SimpleFixFlex">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.SimpleFixFlex&lt;/code&gt; builds the container for a layout with a fixed and a flexible part.
The flexible container adapts its size to the fix container.
&lt;h3&gt;Structure&lt;/h3&gt;
The control consists of two different parts:
&lt;ul&gt;
&lt;li&gt;Fix content - A container that is used to render a control.&lt;/li&gt;
&lt;li&gt;Flex content - A container that stretches to fill the empty space in the parent container.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendar" type="SinglePlanningCalendar" />
  <xs:complexType name="SinglePlanningCalendar">
    <xs:annotation>
      <xs:documentation>
Displays a calendar of a single entity (such as person, resource) for the selected time interval.

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;SinglePlanningCalendar&lt;/code&gt; uses parts of the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.
This library will be loaded after the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;, if it wasn't previously loaded.
This could lead to a waiting time when a &lt;code&gt;SinglePlanningCalendar&lt;/code&gt; is used for the first time.
To prevent this, apps using the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt; must also load the
&lt;code&gt;sap.ui.unified&lt;/code&gt; library.

The &lt;code&gt;SinglePlanningCalendar&lt;/code&gt; has the following structure:

&lt;ul&gt;
    &lt;li&gt;A &lt;code&gt;PlanningCalendarHeader&lt;/code&gt; at the top. It contains the &lt;code&gt;title&lt;/code&gt; set from the
    corresponding property, the &lt;code&gt;SegmentedButton&lt;/code&gt;, which facilitates navigation through the views,
    controls, passed to the &lt;code&gt;actions&lt;/code&gt; aggregation and the navigation, assisting the user in
    choosing the desired time period. The views, either custom or not, can be configured and passed through the
    &lt;code&gt;views&lt;/code&gt; aggregation.

    To create custom views, extend the &lt;code&gt;SinglePlanningCalendarView&lt;/code&gt; basic view class. It defines three
    methods that should be overwritten: &lt;code&gt;getEntityCount&lt;/code&gt;, &lt;code&gt;getScrollEntityCount&lt;/code&gt; and
    &lt;code&gt;calculateStartDate&lt;/code&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;getEntityCount&lt;/code&gt; - returns number of columns to be displayed&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;getScrollEntityCount&lt;/code&gt; - used when next and previous arrows in the calendar are used.
        For example, in work week view, the &lt;code&gt;getEntityCount&lt;/code&gt; returns 5 (5 columns from Monday to
        Friday), but when next arrow is selected, the control navigates 7 days ahead and
        &lt;code&gt;getScrollEntityCount&lt;/code&gt; returns 7.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;calculateStartDate&lt;/code&gt; - calculates the first day displayed in the calendar based on the
        &lt;code&gt;startDate&lt;/code&gt; property of the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;. For example, it returns the
        first date of a month or a week to display the first 10 days of the month.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;li&gt;A &lt;code&gt;SinglePlanningCalendarGrid&lt;/code&gt; or &lt;code&gt;SinglePlanningCalendarMonthGrid&lt;/code&gt;, which displays the appointments, set to the visual time range.
    An all-day appointment is an appointment which starts at 00:00 and ends in 00:00 on any day in the future.
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="actions" />
      <xs:element name="appointments" />
      <xs:element name="views" />
      <xs:element name="specialDates" />
      <xs:element name="_header" />
      <xs:element name="_grid" />
      <xs:element name="_mvgrid" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the title of the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the start date of the grid, as a JavaScript date object. It is considered as a local date.
The time part will be ignored. The current date is used as default.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startHour" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the start hour of the grid to be shown if the &lt;code&gt;fullDay&lt;/code&gt; property is set to
&lt;code&gt;false&lt;/code&gt;. Otherwise the previous hours are displayed as non-working. The passed hour is
considered as 24-hour based.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endHour" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the end hour of the grid to be shown if the &lt;code&gt;fullDay&lt;/code&gt; property is set to
&lt;code&gt;false&lt;/code&gt;. Otherwise the next hours are displayed as non-working. The passed hour is
considered as 24-hour based.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullDay" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if all of the hours in a day are displayed. If set to &lt;code&gt;false&lt;/code&gt;, the hours shown are
between the &lt;code&gt;startHour&lt;/code&gt; and &lt;code&gt;endHour&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stickyMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines which part of the control will remain fixed at the top of the page during vertical scrolling
as long as the control is in the viewport.

&lt;b&gt;Note:&lt;/b&gt; Limited browser support. Browsers which do not support this feature:
&lt;ul&gt;
	&lt;li&gt;Microsoft Internet Explorer&lt;/li&gt;
	&lt;li&gt;Microsoft Edge lower than version 41 (EdgeHTML 16)&lt;/li&gt;
	&lt;li&gt;Mozilla Firefox lower than version 59&lt;/li&gt;
&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsDragAndDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments in the grid are draggable.

The drag and drop interaction is visualized by a placeholder highlighting the area where the
appointment can be dropped by the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsResize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments are resizable.

The resize interaction is visualized by making the appointment transparent.

The appointment snaps on every interval
of 30 minutes. After the resize is finished, the {@link #event:appointmentResize appointmentResize} event is fired, containing
the new start and end JavaScript date objects.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsCreate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments can be created by dragging on empty cells.

See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events snapping
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="actions" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The controls to be passed to the toolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointments" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The appointments to be displayed in the grid. Appointments outside the visible time frame are not rendered.
Appointments, longer than a day, will be displayed in all of the affected days.
To display an all-day appointment, the appointment must start at 00:00 and end on any day in the future in 00:00h.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="views" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Views of the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If not set, the Week view is available.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="specialDates" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Special days in the header visualized as a date range with type.

&lt;b&gt;Note:&lt;/b&gt; If one day is assigned to more than one type, only the first type is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_header" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The header part of the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_grid" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The grid part of the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_mvgrid" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The grid part of the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the selected state of an appointment is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is dropped.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentResize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when an appointment is resized.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentCreate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is created.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerDateSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if a date is selected in the calendar header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startDateChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
&lt;code&gt;startDate&lt;/code&gt; is changed while navigating in the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cellPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when a grid cell is focused.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moreLinkPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when a 'more' button is pressed.
&lt;b&gt;Note:&lt;/b&gt; The 'more' button appears in a month view cell
when multiple appointments exist and the available space
is not sufficient to display all of them.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="viewChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The view was changed by user interaction.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendarDayView" type="SinglePlanningCalendarDayView" />
  <xs:complexType name="SinglePlanningCalendarDayView">
    <xs:annotation>
      <xs:documentation>
Represents a day view of the {@link sap.m.SinglePlanningCalendar}.
The purpose of the element is to decouple the view logic from parent control &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SinglePlanningCalendarView">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendarGrid" type="SinglePlanningCalendarGrid" />
  <xs:complexType name="SinglePlanningCalendarGrid">
    <xs:annotation>
      <xs:documentation>
Displays a grid in which appointments of the {@link sap.m.SinglePlanningCalendar} are rendered.

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;PlanningCalendarGrid&lt;/code&gt; uses parts of the &lt;code&gt;sap.ui.unified&lt;/code&gt; library.
This library will be loaded after the &lt;code&gt;PlanningCalendarGrid&lt;/code&gt;, if it wasn't previously loaded.
This could lead to a waiting time when a &lt;code&gt;PlanningCalendarGrid&lt;/code&gt; is used for the first time.
To prevent this, apps using the &lt;code&gt;PlanningCalendarGrid&lt;/code&gt; must also load the
&lt;code&gt;sap.ui.unified&lt;/code&gt; library.

The &lt;code&gt;PlanningCalendarGrid&lt;/code&gt; has the following structure:

&lt;ul&gt;
    &lt;li&gt;Each column in the grid represents a single entity of the view type. For example in the week view one
    column represents a week day.&lt;/li&gt;
    &lt;li&gt;Each row represents an hour from each day.&lt;/li&gt;
    &lt;li&gt;There are also appointments displayed across the grid. To display an all-day appointment, the
    appointment must start at 00:00 and end on any day in the future in 00:00h.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="appointments" />
      <xs:element name="specialDates" />
      <xs:element name="_columnHeaders" />
    </xs:sequence>
    <xs:attribute name="startDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the start date of the grid, as a JavaScript date object. It is considered as a local date.
The time part will be ignored. The current date is used as default.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startHour" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the start hour of the grid to be shown if the &lt;code&gt;fullDay&lt;/code&gt; property is set to
&lt;code&gt;false&lt;/code&gt;. Otherwise the previous hours are displayed as non-working. The passed hour is
considered as 24-hour based.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endHour" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the end hour of the grid to be shown if the &lt;code&gt;fullDay&lt;/code&gt; property is set to
&lt;code&gt;false&lt;/code&gt;. Otherwise the next hours are displayed as non-working. The passed hour is
considered as 24-hour based.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fullDay" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if all of the hours in a day are displayed. If set to &lt;code&gt;false&lt;/code&gt;, the hours shown are
between the &lt;code&gt;startHour&lt;/code&gt; and &lt;code&gt;endHour&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsDragAndDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments in the grid are draggable.

The drag and drop interaction is visualized by a placeholder highlighting the area where the
appointment can be dropped by the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsResize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments are resizable.

The resize interaction is visualized by making the appointment transparent.

The appointment snaps on every interval
of 30 minutes. After the resize is finished, the {@link #event:appointmentResize appointmentResize} event is fired, containing
the new start and end JavaScript date objects.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsCreate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments can be created by dragging on empty cells.

See {@link #property:enableAppointmentsResize enableAppointmentsResize} for the specific points for events snapping
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointments" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The appointments to be displayed in the grid. Appointments outside the visible time frame are not rendered.
Appointments, longer than a day, will be displayed in all of the affected days.
An appointment which starts at 00:00 and ends in 00:00 on any day in the future is displayed as an all-day
appointment.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="specialDates" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Special days in the header visualized as a date range with type.

&lt;b&gt;Note:&lt;/b&gt; If one day is assigned to more than one type, only the first type is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_columnHeaders" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden, for internal use only.
The date row which shows the header of the columns in the &lt;code&gt;SinglePlanningCalendarGrid&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the selected state of an appointment is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is dropped.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentResize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is resized.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentCreate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is created.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cellPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when a grid cell is focused.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendarMonthGrid" type="SinglePlanningCalendarMonthGrid" />
  <xs:complexType name="SinglePlanningCalendarMonthGrid">
    <xs:annotation>
      <xs:documentation>
Displays a grid for the &lt;code&gt;SinglePlanningCalendarMonthView&lt;/code&gt; in which appointments are rendered.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;SinglePlanningCalendarMonthGrid&lt;/code&gt; has the following structure:

&lt;ul&gt;
    &lt;li&gt;The grid shows one whole month.&lt;/li&gt;
    &lt;li&gt;Each cell in the grid represents a single day.&lt;/li&gt;
    &lt;li&gt;Each row represents a week.&lt;/li&gt;
    &lt;li&gt;Appointments are displayed as a list inside each day.
    They are sorted by their start dates.
    Their widths do not show their durations.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="appointments" />
      <xs:element name="specialDates" />
    </xs:sequence>
    <xs:attribute name="startDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the start date of the grid, as a JavaScript date object. It is considered as a local date.
The time part will be ignored. The current date is used as default.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableAppointmentsDragAndDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the appointments in the grid are draggable.

The drag and drop interaction is visualized by a placeholder highlighting the area where the
appointment can be dropped by the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointments" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The appointments to be displayed in the grid. Appointments outside the visible time frame are not rendered.
Appointments longer than a day are displayed in all of the affected days.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="specialDates" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The special days in the header visualized as a date range with type.

&lt;b&gt;Note:&lt;/b&gt; If one day is assigned to more than one type, only the first type is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cellPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when a grid cell is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="moreLinkPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when a 'more' button is pressed.
&lt;b&gt;Note:&lt;/b&gt; The 'more' button appears when multiple appointments
exist and the available space is not sufficient to display all of them.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentDrop" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired if an appointment is dropped.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="appointmentSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the selected state of an appointment is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendarMonthView" type="SinglePlanningCalendarMonthView" />
  <xs:complexType name="SinglePlanningCalendarMonthView">
    <xs:annotation>
      <xs:documentation>
Represents a one month view of the &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;. The purpose
of the element is to decouple the view logic from parent control
&lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SinglePlanningCalendarView">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendarView" type="SinglePlanningCalendarView" />
  <xs:complexType name="SinglePlanningCalendarView">
    <xs:annotation>
      <xs:documentation>
Represents a day view of the {@link sap.m.SinglePlanningCalendar}.
The purpose of the element is to decouple the view logic from parent control &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendarWeekView" type="SinglePlanningCalendarWeekView" />
  <xs:complexType name="SinglePlanningCalendarWeekView">
    <xs:annotation>
      <xs:documentation>
Represents a week view of the {@link sap.m.SinglePlanningCalendar}.
The purpose of the element is to decouple the view logic from parent control &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SinglePlanningCalendarView">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SinglePlanningCalendarWorkWeekView" type="SinglePlanningCalendarWorkWeekView" />
  <xs:complexType name="SinglePlanningCalendarWorkWeekView">
    <xs:annotation>
      <xs:documentation>
Represents a week view of the {@link sap.m.SinglePlanningCalendar}.
The purpose of the element is to decouple the view logic from parent control &lt;code&gt;SinglePlanningCalendar&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SinglePlanningCalendarView">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Slider" type="Slider" />
  <xs:complexType name="Slider">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;

A {@link sap.m.Slider} control represents a numerical range and a handle.
The purpose of the control is to enable visual selection of a value in a continuous numerical range by moving an adjustable handle.

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;&lt;li&gt;Only horizontal sliders are possible. &lt;/li&gt;
&lt;li&gt;The handle can be moved in steps of predefined size. This is done with the &lt;code&gt;step&lt;/code&gt; property. &lt;/li&gt;
&lt;li&gt;Setting the property &lt;code&gt;showAdvancedTooltip&lt;/code&gt; shows an input field above the handle&lt;/li&gt;
&lt;li&gt;Setting the property &lt;code&gt;inputsAsTooltips&lt;/code&gt; enables the user to enter a specific value in the handle's tooltip. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Structure&lt;/h3&gt;

The most important properties of the Slider are:
&lt;ul&gt;
&lt;li&gt; min - The minimum value of the slider range &lt;/li&gt;
&lt;li&gt; max - The maximum value of the slider range &lt;/li&gt;
&lt;li&gt; value - The current value of the slider&lt;/li&gt;
&lt;li&gt; progress - Determines if a progress bar will be shown on the slider range&lt;/li&gt;
&lt;li&gt; step - Determines the increments in which the slider will move&lt;/li&gt;
&lt;/ul&gt;
These properties determine the visualization of the tooltips:
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;showAdvancedTooltip&lt;/code&gt; - Determines if a tooltip should be displayed above the handle&lt;/li&gt;
&lt;li&gt; &lt;code&gt;inputsAsTooltips&lt;/code&gt; - Determines if the tooltip displayed above the slider's handle should include an input field&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

The most common usecase is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The &lt;code&gt;sap.m.Slider&lt;/code&gt; control adjusts to the size of its parent container by recalculating and resizing the width of the control.
You can move the slider handle in several different ways:
&lt;ul&gt;
&lt;li&gt; Drag and drop to the desired value&lt;/li&gt;
&lt;li&gt; Click/tap on the range bar to move the handle to that location &lt;/li&gt;
&lt;li&gt; Enter the desired value in the input field (if available) &lt;/li&gt;
&lt;li&gt; Keyboard (Arrow keys, "+" and "-") &lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_tooltipContainer" />
      <xs:element name="scale" />
      <xs:element name="_defaultScale" />
      <xs:element name="_defaultTooltips" />
      <xs:element name="customTooltips" />
      <xs:element name="_handlesLabels" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the user can change the value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="min" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The minimum value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="max" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The maximum value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="step" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Define the amount of units to change the slider when adjusting by drag and drop.

Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).

The step must be positive, if a negative number is provided, the default value will be used instead.
If the width of the slider converted to pixels is less than the range (max - min), the value will be rounded to multiples of the step size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="progress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicate whether a progress bar indicator is shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Define the value.

If the value is lower/higher than the allowed minimum/maximum, the value of the properties &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; are used instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showHandleTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicate whether the handle tooltip is shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showAdvancedTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicate whether the handle's advanced tooltip is shown. &lt;b&gt;Note:&lt;/b&gt; Setting this option to &lt;code&gt;true&lt;/code&gt;
will ignore the value set in &lt;code&gt;showHandleTooltip&lt;/code&gt;. This will cause only the advanced tooltip to be shown.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="inputsAsTooltips" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether input fields should be used as tooltips for the handles. &lt;b&gt;Note:&lt;/b&gt; Setting this option to &lt;code&gt;true&lt;/code&gt;
will only work if &lt;code&gt;showAdvancedTooltip&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableTickmarks" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables tickmarks visualisation
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_tooltipContainer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A Container popup that renders SliderTooltips
The actual type should be sap.m.SliderTooltipContainer
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scale" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Scale for visualisation of tickmarks and labels
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_defaultScale" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Default scale for visualisation of tickmarks, if scale aggregation is not provided
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_defaultTooltips" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Multiple Aggregation for Tooltips
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customTooltips" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aggregation for user-defined tooltips.
&lt;b&gt;Note:&lt;/b&gt; In case of Slider, only the first tooltip of the aggregation is used. In the RangeSlider case - the first two.
If no custom tooltips are provided, the default are used
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_handlesLabels" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Invisible text for handles and progress announcement
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is triggered after the end user finishes interacting, if there is any change.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is triggered during the dragging period, each time the slider value changes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SliderTooltip" type="SliderTooltip" />
  <xs:complexType name="SliderTooltip">
    <xs:annotation>
      <xs:documentation>
A Control that visualizes &lt;code&gt;Slider&lt;/code&gt; and &lt;code&gt;RangeSlider&lt;/code&gt; tooltips.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SliderTooltipBase">
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the value of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="min" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The minimum value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="max" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The maximum value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the control can be modified by the user or not.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="step" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the step of Tooltips's input.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Visualizes the validation state of the control, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SliderTooltipBase" type="SliderTooltipBase" />
  <xs:complexType name="SliderTooltipBase">
    <xs:annotation>
      <xs:documentation>
A Control that visualizes &lt;code&gt;Slider&lt;/code&gt; and &lt;code&gt;RangeSlider&lt;/code&gt; tooltips.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SliderTooltipContainer" type="SliderTooltipContainer" />
  <xs:complexType name="SliderTooltipContainer">
    <xs:annotation>
      <xs:documentation>
A Popup based control helper for &lt;code&gt;Slider&lt;/code&gt; and &lt;code&gt;RangeSlider&lt;/code&gt; controls
It serves as container of Slider/RangeSlider tooltips which is placed inside the static area
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the user can change values of tooltips.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SlideTile" type="SlideTile" />
  <xs:complexType name="SlideTile">
    <xs:annotation>
      <xs:documentation>
The control that displays multiple GenericTile controls as changing slides.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="tiles" />
      <xs:element name="_pausePlayIcon" />
    </xs:sequence>
    <xs:attribute name="displayTime" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The time of the slide display in milliseconds.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="transitionTime" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The time of the slide changing in milliseconds.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="scope" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Changes the visualization in order to enable additional actions with the SlideTile control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sizeBehavior" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to &lt;code&gt;TileSizeBehavior.Small&lt;/code&gt;, the tile size is the same as it would be on a small-screened phone (374px wide and lower),
 regardless of the screen size of the actual device being used.
 If set to &lt;code&gt;TileSizeBehavior.Responsive&lt;/code&gt;, the tile size adapts to the size of the screen.
 This property has to be set consistently for the &lt;code&gt;SlideTile&lt;/code&gt; along with all its inner &lt;code&gt;GenericTile&lt;/code&gt;
 elements, so that they match one another visually.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tiles" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The set of Generic Tiles to be shown in the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_pausePlayIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The pause/play icon that is being used to display the pause/play state of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is fired when the user chooses the tile. The event is available only in Actions scope.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitApp" type="SplitApp" />
  <xs:complexType name="SplitApp">
    <xs:annotation>
      <xs:documentation>
SplitApp is another possible root element of an SAPUI5 mobile application besides {@link sap.m.App}. It contains two NavContainers if running on tablet or desktop,  and one on phone.
The display of master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitApp.
&lt;h3&gt;Structure&lt;/h3&gt;
The SplitApp divides the screen into two areas:
&lt;ul&gt;
&lt;li&gt;Master area - contains a list of available items where the user can search and filter.&lt;/li&gt;
&lt;li&gt;Details area - contains a control which shows further details on the item(s) selected from the master view.&lt;/li&gt;
&lt;/ul&gt;
Both areas have separate headers and footer bars with navigation and actions.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to review and process different items quickly with minimal navigation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to offer complex filters for the list of items.&lt;/li&gt;
&lt;li&gt;You need to see different attributes for each item in the list, and compare these values across items.&lt;/li&gt;
&lt;li&gt;You want to display a single object. Do not use the master list to display different facets of the same object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
On narrow screens for phones (or tablet devices in portrait mode), the master list and the details are split into two separate pages.

The user can navigate between the list and details, and see all the available information for each area.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="SplitContainer">
    <xs:attribute name="homeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes.
Note that if single icon is used for all devices, when scaled, its quality can regress.
A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.

One example is:

app.setHomeIcon({
'phone':'phone-icon.png',
'phone@2':'phone-retina.png',
'tablet':'tablet-icon.png',
'tablet@2':'tablet-retina.png',
'icon':'desktop.ico'
});

The image size is 57/114 px for the phone and 72/144 px for the tablet.
If an object is given but one of the sizes is not given, the largest given icon will be used for this size.

On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="orientationChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when orientation (portrait/landscape) is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitButton" type="SplitButton" />
  <xs:complexType name="SplitButton">
    <xs:annotation>
      <xs:documentation>
Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Define the text of the button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the type of the button (for example, Default, Accept, Reject, Transparent).
Values &lt;code&gt;Back&lt;/code&gt;, &lt;code&gt;Up&lt;/code&gt; and &lt;code&gt;Unstyled&lt;/code&gt; are ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Boolean property to enable the control (default is &lt;code&gt;true&lt;/code&gt;).
&lt;b&gt;Note:&lt;/b&gt; Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon to be displayed as graphical element within the button.
This can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The source property of an alternative icon for the active (pressed) state of the button.
Both active and default icon properties should be defined and of the same type - image or icon font.
If the &lt;code&gt;icon&lt;/code&gt; property is not set or has a different type, the active icon is not displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When set to &lt;code&gt;true&lt;/code (default), one or more requests are sent trying to get
the density perfect version of image if this version of image doesn't exist on the server.
If only one version of image is provided, set this value to &lt;code&gt;false&lt;/code&gt; to
avoid the attempt of fetching density perfect image.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property specifies the element's text directionality with enumerated options.
By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user clicks on the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="arrowPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the arrow button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitContainer" type="SplitContainer" />
  <xs:complexType name="SplitContainer">
    <xs:annotation>
      <xs:documentation>
SplitContainer maintains two NavContainers if running on tablet or desktop and one NavContainer - on phone.
The display of the master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitContainer.

NOTE: This control must be rendered as a full screen control in order to make the show/hide master area work properly.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="masterPages" />
      <xs:element name="detailPages" />
      <xs:element name="_navMaster" />
      <xs:element name="_navDetail" />
      <xs:element name="_navPopover" />
    </xs:sequence>
    <xs:attribute name="defaultTransitionNameDetail" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the type of the transition/animation to apply when to() is called without defining the
transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultTransitionNameMaster" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the type of the transition/animation to apply when to() is called, without defining the
transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode.
Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="masterButtonText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text displayed in master button, which has a default value "Navigation".
This text is only displayed in iOS platform and the icon from the current page in detail area is
displayed in the master button for the other platforms.
The master button is shown/hidden depending on the orientation of the device and whether
the master area is opened or not. SplitContainer manages the show/hide of the master button by itself
only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page
with built-in header, which is wrapped by one or several sap.ui.core.mvc.View.
Otherwise, the show/hide of master button needs to be managed by the application.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="masterButtonTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the tooltip of the master button. If the tooltip is not specified,
the title of the page, which is displayed is the master part, is set as tooltip to the master button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the background color of the SplitContainer. If set, this color overrides the default one,
which is defined by the theme (should only be used when really required).
Any configured background image will be placed above this colored background,
but any theme adaptation in the Theme Designer will override this setting.
Use the backgroundRepeat property to define whether this image should be stretched
to cover the complete SplitContainer or whether it should be tiled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundImage" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the background image of the SplitContainer. When set, this image overrides
the default background defined by the theme (should only be used when really required).
This background image will be placed above any color set for the background,
but any theme adaptation in the Theme Designer will override this image setting.
Use the backgroundRepeat property to define whether this image should be stretched
to cover the complete SplitContainer or whether it should be tiled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundRepeat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the background image (if configured) is proportionally stretched
to cover the whole SplitContainer (false) or whether it should be tiled (true).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundOpacity" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque).
This can be used to improve the content visibility by making the background image partly transparent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="masterPages" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the content entities, between which the SplitContainer navigates in master area.
These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#event:beforeShow beforeShow},
they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detailPages" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the content entities, between which the SplitContainer navigates in detail area.
These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#event:beforeShow beforeShow},
they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_navMaster" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The master navigation container managed by the SplitContainer control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_navDetail" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The detail navigation container managed by the SplitContainer control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_navPopover" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A Popover managed by the SplitContainer control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="masterNavigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterMasterNavigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when navigation between two pages in master area has completed.
NOTE: In case of animated transitions this event is fired with some delay after the navigate event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="masterButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeMasterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires before the master area is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterMasterOpen" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the master area is fully opened after animation if any.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeMasterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires before the master area is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterMasterClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the master area is fully closed after the animation (if any).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detailNavigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when navigation between two pages in detail area has been triggered.
The transition (if any) to the new page has not started yet.
NOTE: This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="afterDetailNavigate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when navigation between two pages in detail area has completed.
NOTE: In case of animated transitions this event is fired with some delay after the "navigate" event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="StandardListItem" type="StandardListItem" />
  <xs:complexType name="StandardListItem">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;sap.m.StandardListItem&lt;/code&gt; is a list item providing the most common use cases, e.g. image, title and description.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the list item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the additional information for the title.
&lt;b&gt;Note:&lt;/b&gt; This is only visible when the &lt;code&gt;title&lt;/code&gt; property is not empty.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the list item icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconInset" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the indentation of the icon. If set to &lt;code&gt;false&lt;/code&gt;, the icon will not be shown as embedded. Instead it will take the full height of the list item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
&lt;b&gt;Note:&lt;/b&gt; If bandwidth is a key factor for the application, set this value to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon that is shown while the list item is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="info" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines an additional information text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="infoState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the state of the information text, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="adaptTitleSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to &lt;code&gt;false&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the &lt;code&gt;title&lt;/code&gt; text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="infoTextDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the &lt;code&gt;info&lt;/code&gt; directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the wrapping behavior of title and description texts.

&lt;b&gt;Note:&lt;/b&gt;

In the desktop mode, initial rendering of the control contains 300 characters along with a button to expand and collapse the text whereas in the phone mode, the character limit is set to 100 characters.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="StandardTile" type="StandardTile" />
  <xs:complexType name="StandardTile">
    <xs:annotation>
      <xs:documentation>
The StandardTile control is displayed in the tile container.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Tile">
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the StandardTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="info" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the description of the StandardTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon of the StandardTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activeIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the active icon of the StandardTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="number" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number field of the StandardTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberUnit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number units qualifier of the StandardTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="infoState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the color of the info text. Possible values are Error, Warning, Success and so on.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the type of the StandardTile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconDensityAware" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.

If bandwidth is key for the application, set this value to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="StandardTreeItem" type="StandardTreeItem" />
  <xs:complexType name="StandardTreeItem">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.StandardTreeItem&lt;/code&gt; is a tree item providing a title, image, etc.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TreeItemBase">
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the tree item icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="StepInput" type="StepInput" />
  <xs:complexType name="StepInput">
    <xs:annotation>
      <xs:documentation>
Allows the user to change the input values with predefined increments (steps).

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;StepInput&lt;/code&gt; consists of an input field and buttons with icons to increase/decrease the value.

The user can change the value of the control by pressing the increase/decrease buttons,
by typing a number directly, by using the keyboard up/down and page up/down,
or by using the mouse scroll wheel. Decimal values are supported.

&lt;h3&gt;Usage&lt;/h3&gt;

The default step is 1 but the app developer can set a different one.

On desktop, the control supports a larger step, when using the keyboard page up/down keys.
You can set a multiple of the step with the use of the &lt;code&gt;largerStep&lt;/code&gt; property.
The default value is 2 (two times the set step). For example, when using the keyboard page up/down keys
the value increases/decreases with a double of the default step. If the set step is 2, the larger step is also 2
and the current value is 1, using the page up key will increase the value to 5 (1 + 2*2).

App developers can set a maximum and minimum value for the &lt;code&gt;StepInput&lt;/code&gt;.
The increase/decrease button and the up/down keyboard navigation become disabled when
the value reaches the max/min or a new value is entered from the input which is greater/less than the max/min.

&lt;i&gt;When to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;To adjust amounts, quantities, or other values quickly.&lt;/li&gt;
&lt;li&gt;To adjust values for a specific step.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;To enter a static number (for example, postal code, phone number, or ID). In this case,
use the regular {@link sap.m.Input} instead.&lt;/li&gt;
&lt;li&gt;To display a value that rarely needs to be adjusted and does not pertain to a particular step.
In this case, use the regular {@link sap.m.Input} instead.&lt;/li&gt;
&lt;li&gt;To enter dates and times. In this case, use the {@link sap.m.DatePicker}, {@link sap.m.DateRangeSelection},
{@link sap.m.TimePicker}, or {@link sap.m.DateTimePicker} instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt; The control uses a JavaScript number to keep its value, which
has a certain precision limitation.

In general, exponential notation is used:
&lt;ul&gt;
&lt;li&gt;if there are more than 21 digits before the decimal point.&lt;/li&gt;
&lt;li&gt;if number starts with "0." followed by more than five zeros.&lt;/li&gt;
&lt;/ul&gt;

Exponential notation is not supported by the control and using it may lead to
unpredictable behavior.

Also, the JavaScript number persists its precision up to 16 digits. If the user enters
a number with a greater precision, the value will be rounded.

This limitation comes from JavaScript itself and it cannot be worked around in a
feasible way.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_input" />
    </xs:sequence>
    <xs:attribute name="min" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the minimum possible value of the defined range.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="max" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the maximum possible value of the defined range.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="step" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Increases/decreases the value of the input.
&lt;ul&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The value of the &lt;code&gt;step&lt;/code&gt; property should not contain more digits after the decimal point than what is set to the &lt;code&gt;displayValuePrecision&lt;/code&gt; property, as it may lead to an increase/decrease that is not visible for the user. For example, if the &lt;code&gt;value&lt;/code&gt; is set to 1.22 and the &lt;code&gt;displayValuePrecision&lt;/code&gt; is set to one digit after the decimal, the user will see 1.2. In this case, if the &lt;code&gt;value&lt;/code&gt; of the &lt;code&gt;step&lt;/code&gt; property is set to 1.005 and the user selects &lt;code&gt;increase&lt;/code&gt;, the resulting value will increase to 1.2261 but the displayed value will remain as 1.2 as it will be rounded to the first digit after the decimal point.&lt;/li&gt; &lt;li&gt;Depending on what is set for the &lt;code&gt;value&lt;/code&gt; and the &lt;code&gt;displayValuePrecision&lt;/code&gt; properties, it is possible the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.&lt;/li&gt;&lt;/ul&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stepMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the calculation mode for the provided &lt;code&gt;step&lt;/code&gt; and &lt;code&gt;largerStep&lt;/code&gt;.

If the user increases/decreases the value by &lt;code&gt;largerStep&lt;/code&gt;, this calculation will consider
it as well. For example, if the current &lt;code&gt;value&lt;/code&gt; is 3, &lt;code&gt;step&lt;/code&gt; is 5,
&lt;code&gt;largerStep&lt;/code&gt; is 5 and the user chooses PageUp, the calculation logic will consider
the value of 3x5=15 to decide what will be the next &lt;code&gt;value&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="largerStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys.
Default value is 2 times larger than the set step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the value of the &lt;code&gt;StepInput&lt;/code&gt; and can be set initially from the app developer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the name of the control for the purposes of form submission.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="placeholder" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines a short hint intended to aid the user with data entry when the control has no value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="required" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
the field and a label (see aggregation &lt;code&gt;labelFor&lt;/code&gt; of &lt;code&gt;sap.m.Label&lt;/code&gt;) cannot be established
(e.g. one label should label multiple fields).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueState" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Accepts the core enumeration ValueState.type that supports &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt; and &lt;code&gt;Success&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueStateText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text that appears in the value state message pop-up.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the control can be modified by the user or not.
&lt;b&gt;Note:&lt;/b&gt; A user can tab to the non-editable control, highlight it, and copy the text from it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the user can interact with the control or not.
&lt;b&gt;Note:&lt;/b&gt; Disabled controls cannot be focused and they are out of the tab-chain.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayValuePrecision" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the number of digits after the decimal point.

The value should be between 0 (default) and 20.
In case the value is not valid it will be set to the default value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the description text after the input field, for example units of measurement, currencies.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fieldWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the distribution of space between the input field
and the description text . Default value is 50% (leaving the other
50% for the description).

&lt;b&gt;Note:&lt;/b&gt; This property takes effect only if the
&lt;code&gt;description&lt;/code&gt; property is also set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the horizontal alignment of the text that is displayed inside the input field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validationMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines when the validation of the typed value will happen. By default this happens on focus out.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_input" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation that contains the &lt;code&gt;Input&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Is fired when one of the following happens: &lt;br/&gt;
&lt;ol&gt;
 &lt;li&gt;the text in the input has changed and the focus leaves the input field or the enter key
 is pressed.&lt;/li&gt;
 &lt;li&gt;One of the decrement or increment buttons is pressed&lt;/li&gt;
&lt;/ol&gt;
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Suggest" type="Suggest" />
  <xs:complexType name="Suggest">
  </xs:complexType>
  <xs:element name="SuggestionItem" type="SuggestionItem" />
  <xs:complexType name="SuggestionItem">
    <xs:annotation>
      <xs:documentation>
Display suggestion list items.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon belonging to this list item instance.
This can be a URI to an image or an icon font URI.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="description" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Additional text of type string, optionally to be displayed along with this item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="SuggestionsPopover" type="SuggestionsPopover" />
  <xs:complexType name="SuggestionsPopover">
    <xs:complexContent>
      <xs:extension base="n1:EventProvider">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Switch" type="Switch" />
  <xs:complexType name="Switch">
    <xs:annotation>
      <xs:documentation>
A switch is a user interface control on mobile devices that is used for change between binary states.
The user can also drag the button handle or tap to change the state.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="state" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A boolean value indicating whether the switch is on or off.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customTextOn" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Custom text for the "ON" state.

"ON" translated to the current language is the default value.
Beware that the given text will be cut off if available space is exceeded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customTextOff" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Custom text for the "OFF" state.

"OFF" translated to the current language is the default value.
Beware that the given text will be cut off if available space is exceeded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Whether the switch is enabled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="type" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Type of a Switch. Possibles values "Default", "AcceptReject".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Triggered when a switch changes the state.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TabContainer" type="TabContainer" />
  <xs:complexType name="TabContainer">
    <xs:annotation>
      <xs:documentation>
A container control for managing multiple tabs, allowing the user to open and edit different items simultaneously.

&lt;h3&gt;Overview&lt;/h3&gt;

The control contains a &lt;code&gt;TabStrip&lt;/code&gt; area where the user can choose which tab to view/edit.
When the open tabs are more than what can be displayed on the screen, there is an overflow mechanism.
To access the tabs hidden in the overflow area, the user has to either use the overflow button (left or right arrow)
to scroll them horizontally or the overflow overview button (down arrow) and view all open items as a list.

Each tab has a title and a &lt;i&gt;Close Tab&lt;/i&gt; button. The title is truncated, if it's longer than 25 characters.
On desktop, the &lt;i&gt;Close Tab&lt;/i&gt; button is displayed on the currently active tab and for the other tabs it appears on mouse hover.
On mobile devices, the &lt;i&gt;Close Tab&lt;/i&gt; buttons are always visible.

To show that the open items have unsaved changes, the corresponding tabs can display an asterisk (*) after the title
as a visual indication that the item is not saved. This is managed by the app developer using
{@link sap.m.TabContainerItem TabContainerItem}'s &lt;code&gt;modified&lt;/code&gt; property.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;TabContainer&lt;/code&gt; can have an &lt;i&gt;Add New Tab&lt;/i&gt; button, which appears as a '+' icon on the
top-right area of the control. When the user clicks or taps this button, the &lt;code&gt;addNewButtonPress&lt;/code&gt; event is fired.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The &lt;code&gt;TabContainer&lt;/code&gt; is a full-page container that takes 100% of its parent width and height.
As the control is expected to occupy the whole parent, it should be the only child of its parent.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="_addNewButton" />
      <xs:element name="_tabStrip" />
    </xs:sequence>
    <xs:attribute name="showAddNewButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether an &lt;i&gt;Add New Tab&lt;/i&gt; button is displayed in the &lt;code&gt;TabStrip&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the background color of the content in &lt;code&gt;TabContainer&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items displayed in the &lt;code&gt;TabContainer&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_addNewButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;i&gt;Add New Tab&lt;/i&gt; button displayed in the &lt;code&gt;TabStrip&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_tabStrip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation for managing the tab elements.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when an item is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when an item is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addNewButtonPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the &lt;i&gt;Add New Tab&lt;/i&gt; button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TabContainerItem" type="TabContainerItem" />
  <xs:complexType name="TabContainerItem">
    <xs:annotation>
      <xs:documentation>
An item to be used in a TabContainer.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="_image" />
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text to be displayed for the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="additionalText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines additional text to be displayed for the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon to be displayed as graphical element within the &lt;code&gt;TabContainerItem&lt;/code&gt;.
It can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the tooltip text of the &lt;code&gt;TabContainerItem&lt;/code&gt;'s icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="key" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the name of the item. Can be used as input for subsequent actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="modified" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content displayed for this item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_image" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon / Image for the &lt;code&gt;TabContainerItem&lt;/code&gt; are managed in this aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemPropertyChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sends information that some of the properties have changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Table" type="Table" />
  <xs:complexType name="Table">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;sap.m.Table&lt;/code&gt; control provides a set of sophisticated and convenience functions for responsive table design.
To render the &lt;code&gt;sap.m.Table&lt;/code&gt; properly, the order of the &lt;code&gt;columns&lt;/code&gt; aggregation should match with the order of the items &lt;code&gt;cells&lt;/code&gt; aggregation (&lt;code&gt;sap.m.ColumnListItem&lt;/code&gt;). Also, &lt;code&gt;sap.m.Table&lt;/code&gt; requires at least one visible &lt;code&gt;sap.m.Column&lt;/code&gt; in &lt;code&gt;columns&lt;/code&gt; aggregation, therefore applications must avoid configuring all columns to be shown in the pop-in. If such a conflict is detected, then the table prevents one column from moving to the pop-in.
For mobile devices, the recommended limit of table rows is 100 (based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the &lt;code&gt;growing&lt;/code&gt; feature.

See section "{@link topic:5eb6f63e0cc547d0bdc934d3652fdc9b Creating Tables}" and "{@link topic:38855e06486f4910bfa6f4485f7c2bac Configuring Responsive Behavior of a Table}"
in the documentation for an introduction to &lt;code&gt;sap.m.Table&lt;/code&gt; control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListBase">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="columns" />
    </xs:sequence>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the background style of the table. Depending on the theme, you can change the state of the background from &lt;code&gt;Solid&lt;/code&gt; to &lt;code&gt;Translucent&lt;/code&gt; or to &lt;code&gt;Transparent&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fixedLayout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the algorithm to be used to layout the table cells, rows, and columns.
By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.

When this property is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;sap.m.Table&lt;/code&gt; is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout.
&lt;b&gt;Note:&lt;/b&gt; Since &lt;code&gt;sap.m.Table&lt;/code&gt; does not have its own scrollbars, setting &lt;code&gt;fixedLayout&lt;/code&gt; to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g &lt;code&gt;sap.m.Dialog&lt;/code&gt;) to handle overflow.
In auto layout mode the &lt;code&gt;width&lt;/code&gt; property of &lt;code&gt;sap.m.Column&lt;/code&gt; is taken into account as a minimum width.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showOverlay" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Setting this property to &lt;code&gt;true&lt;/code&gt; will show an overlay on top of the table content and prevents the user interaction with it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alternateRowColors" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables alternating table row colors.
&lt;b&gt;Note:&lt;/b&gt; This property can only be used with the Belize and Belize Deep themes.
Alternate row coloring is not available for the High Contrast Black/White themes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="popinLayout" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the layout in which the table pop-in rows are rendered.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;demandPopin&lt;/code&gt; and &lt;code&gt;minScreenWidth&lt;/code&gt; properties of the &lt;code&gt;Column&lt;/code&gt; control must be configured appropriately.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contextualWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the contextual width for the &lt;code&gt;sap.m.Table&lt;/code&gt; control. By defining this property the table adapts the pop-in behavior based on the container in which the table is placed or the configured contextual width.
By default, &lt;code&gt;sap.m.Table&lt;/code&gt; renders in pop-in behavior only depending on the window size or device.

For example, by setting the &lt;code&gt;contextualWidth&lt;/code&gt; property to 600px or Tablet, the table can be placed in a container with 600px width, where the pop-in is used.
You can use specific CSS sizes (for example, 600px or 600), you can also use the &lt;code&gt;sap.m.ScreenSize&lt;/code&gt; enumeration (for example, Phone, Tablet, Desktop, Small, Medium, Large, ....).
If this property is set to &lt;code&gt;Auto&lt;/code&gt;, the &lt;code&gt;ResizeHandler&lt;/code&gt; will manage the contextual width of the table.
&lt;b&gt;Note:&lt;/b&gt; Only "Inherit", "Auto", and pixel-based CSS sizes (for example, 200, 200px) can be applied to the &lt;code&gt;contextualWidth&lt;/code&gt; property. Due to the rendering cost, we recommend to use the valid value mentioned before except for "Auto".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columns" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the columns of the table.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeOpenContextMenu" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the context menu is opened.
When the context menu is opened, the binding context of the item is set to the given &lt;code&gt;contextMenu&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="paste" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event gets fired when the user pastes content from the clipboard to the table.
Pasting can be done via the context menu or the standard paste keyboard shortcut, if the focus is inside the table.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TablePersoController" type="TablePersoController" />
  <xs:complexType name="TablePersoController">
    <xs:annotation>
      <xs:documentation>
Table Personalization Controller
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n1:ManagedObject">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TablePersoDialog" type="TablePersoDialog" />
  <xs:complexType name="TablePersoDialog">
    <xs:annotation>
      <xs:documentation>
Table Personalization Dialog
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n1:ManagedObject">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TablePersoProvider" type="TablePersoProvider" />
  <xs:complexType name="TablePersoProvider">
    <xs:annotation>
      <xs:documentation>
Table Personalization Provider
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n1:ManagedObject">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TableSelectDialog" type="TableSelectDialog" />
  <xs:complexType name="TableSelectDialog">
    <xs:annotation>
      <xs:documentation>
A dialog to select items in a table containing multiple values and attributes.
&lt;h3&gt;Overview&lt;/h3&gt;
The table select dialog helps users select items in a table-like structure with several attributes and values per item. A search fields helps narrow down the results.
&lt;h3&gt;Structure&lt;/h3&gt;
The table select dialog consists of the following elements:
&lt;ul&gt;
&lt;li&gt; Search field - used to search enter search terms for a specific item.&lt;/li&gt;
&lt;li&gt; Info toolbar (only in multi-select mode) - displays the number of currently selected items.&lt;/li&gt;
&lt;li&gt; Content - the table with the items.&lt;/li&gt;
&lt;li&gt; Footer (optional) - a toolbar for actions.&lt;/li&gt;
&lt;/ul&gt;
Table select dialog supports multi-selection when the &lt;code&gt;multiSelect&lt;/code&gt; property is set.

The selected items can be stored for later editing when the &lt;code&gt;rememberSelections&lt;/code&gt; property is set.
&lt;b&gt;Note:&lt;/b&gt; This property has to be set before the dialog is opened.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to select one or more items from a comprehensive list that contains multiple attributes or values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need to select only one item from a predefined list of single-value options. Use the {@link sap.m.Select Select} control instead.&lt;/li&gt;
&lt;li&gt;You need to display complex content without having the user navigate away from the current page or you want to prompt the user for an action. Use the {@link sap.m.Dialog Dialog} control instead.&lt;/li&gt;
&lt;li&gt;You need to select items within a query-based range. Use the {@link https://experience.sap.com/fiori-design-web/value-help-dialog/ Value Help Dialog} control instead.&lt;/li&gt;
&lt;li&gt;You need to filter a set of items without any selection. Use the {@link https://experience.sap.com/fiori-design-web/filter-bar/ Filter Bar} control instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The property &lt;code&gt;growing&lt;/code&gt; must not be used together with two-way binding.
&lt;li&gt;When the property &lt;code&gt;growing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (default value), the features &lt;code&gt;selected count&lt;/code&gt; in info bar, &lt;code&gt;search&lt;/code&gt; and &lt;code&gt;select/deselect all&lt;/code&gt;, if present, work only for the currently loaded items.
To make sure that all items in the table are loaded at once and the above features work properly, set the property to &lt;code&gt;false&lt;/code&gt;.
&lt;li&gt;Since version 1.58, the columns headers and the info toolbar are sticky (remain fixed on top when scrolling). This feature is not supported in all browsers.
&lt;li&gt;The TableSelectDialog is usually displayed at the center of the screen. Its size and position can be changed by the user.
To enable this you need to set the &lt;code&gt;resizable&lt;/code&gt; and &lt;code&gt;draggable&lt;/code&gt; properties. Both properties are available only in desktop mode.&lt;/li&gt;
For more information on browser support limitations, you can refer to the {@link sap.m.ListBase sap.m.ListBase} &lt;code&gt;sticky&lt;/code&gt; property.
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On smaller screens, the columns of the table wrap and build a list that shows all the information.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="_dialog" />
      <xs:element name="columns" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the title text in the dialog header.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noDataText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the text displayed when the table has no data.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multiSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables the user to select several options from the table.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growing" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the progressive loading. When set to &lt;code&gt;true&lt;/code&gt;, enables the growing feature of the control to load more items by requesting from the bound model.
&lt;b&gt;Note:&lt;/b&gt; This feature only works when an &lt;code&gt;items&lt;/code&gt; aggregation is bound. Growing must not be used together with two-way binding.
&lt;b&gt;Note:&lt;/b&gt; If the property is set to true, the features &lt;code&gt;selected count&lt;/code&gt; in info bar, &lt;code&gt;search&lt;/code&gt; and &lt;code&gt;select/deselect all&lt;/code&gt;, if present, work only for the currently loaded items.
To make sure that all items in the table are loaded at once and the above features work properly, we recommend setting the &lt;code&gt;growing&lt;/code&gt; property to false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingThreshold" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the number of items initially displayed in the table and defines the number of items to be requested from the model for each grow.
This property can only be used if the property &lt;code&gt;growing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the content width of the inner dialog. For more information, see the Dialog documentation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rememberSelections" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
Note: This property must be set before the Dialog is opened to have an effect.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="contentHeight" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the content height of the inner dialog. For more information, see the Dialog documentation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showClearButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This flag controls whether the Clear button is shown. When set to &lt;code&gt;true&lt;/code&gt;, it provides a way to clear a selection made in Table Select Dialog.

We recommend enabling of the Clear button in the following cases, where a mechanism to clear the value is needed:
In case the Table Select Dialog is in single-selection mode (default mode) and &lt;code&gt;rememberSelections&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. The Clear button needs to be enabled in order to allow users to clear the selection.
In case of using &lt;code&gt;sap.m.Input&lt;/code&gt; with &lt;code&gt;valueHelpOnly&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, the Clear button can be used for clearing the selection.
In case the application stores a value and uses only Table Select Dialog to edit/maintain it.

Optional:
In case &lt;code&gt;multiSelect&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the selection can be easily cleared with one click.

&lt;b&gt;Note:&lt;/b&gt; When used with OData, only the loaded selections will be cleared.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="confirmButtonText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Overwrites the default text for the confirmation button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="draggable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When set to &lt;code&gt;true&lt;/code&gt;, the TableSelectDialog is draggable by its header. The default value is &lt;code&gt;false&lt;/code&gt;. &lt;b&gt;Note&lt;/b&gt;: The SelectDialog can be draggable only in desktop mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resizable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When set to &lt;code&gt;true&lt;/code&gt;, the TableSelectDialog will have a resize handler in its bottom right corner. The default value is &lt;code&gt;false&lt;/code&gt;. &lt;b&gt;Note&lt;/b&gt;: The SelectDialog can be resizable only in desktop mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleAlignment" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the Title alignment (theme specific).
If set to &lt;code&gt;TitleAlignment.Auto&lt;/code&gt;, the Title will be aligned as it is set in the theme (if not set, the default value is &lt;code&gt;center&lt;/code&gt;);
Other possible values are &lt;code&gt;TitleAlignment.Start&lt;/code&gt; (left or right depending on LTR/RTL), and &lt;code&gt;TitleAlignment.Center&lt;/code&gt; (centered)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The items of the table.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_dialog" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The internal dialog that is displayed when method open is called.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="columns" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The columns bindings.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="confirm" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The items being selected are returned as event parameters.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="search" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the search button has been clicked on dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the value of the search field is changed by a user (for example at each key press).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the Cancel button is clicked.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TabStrip" type="TabStrip" />
  <xs:complexType name="TabStrip">
    <xs:annotation>
      <xs:documentation>
This control displays a number of tabs. If the available horizontal
space is exceeded, a horizontal scrollbar appears.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="addButton" />
      <xs:element name="_select" />
      <xs:element name="_rightArrowButton" />
      <xs:element name="_leftArrowButton" />
    </xs:sequence>
    <xs:attribute name="hasSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the button &lt;code&gt;Opened Tabs&lt;/code&gt; for showing all the tabs in a dropdown menu is present.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The tabs displayed in the &lt;code&gt;TabStrip&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="addButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The &lt;code&gt;Add New Tab&lt;/code&gt; button displayed in the &lt;code&gt;TabStrip&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds the instance of the select when &lt;code&gt;hasSelect&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_rightArrowButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds the right arrow scrolling button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_leftArrowButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds the right arrow scrolling button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemClose" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when an item is closed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemPress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when an item is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when an item is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TabStripItem" type="TabStripItem" />
  <xs:complexType name="TabStripItem">
    <xs:annotation>
      <xs:documentation>
&lt;code&gt;TabStripItem&lt;/code&gt; provides information about Error Messages in the page.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_closeButton" />
      <xs:element name="_image" />
    </xs:sequence>
    <xs:attribute name="additionalText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines additional text to be displayed for the item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the icon to be displayed as graphical element within the &lt;code&gt;TabStripItem&lt;/code&gt;.
It can be an image or an icon from the icon font.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="iconTooltip" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the tooltip text of the &lt;code&gt;TabStripItem&lt;/code&gt; icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="modified" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_closeButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the Close button.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_image" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Icon / Image for the &lt;code&gt;TabContainerItem&lt;/code&gt; are managed in this aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemClosePressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the Close button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemPropertyChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sends information that some of the properties have changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Text" type="Text" />
  <xs:complexType name="Text">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;Text&lt;/code&gt; control can be used for embedding longer text paragraphs,
that need text wrapping, into your app.
If the configured text value contains HTML code or script tags, those will be
escaped.

As of version 1.60, you can hyphenate the text with the use of the
&lt;code&gt;wrappingType&lt;/code&gt; property. For more information, see
{@link topic:6322164936f047de941ec522b95d7b70 Text Controls Hyphenation}.

&lt;b&gt;Note:&lt;/b&gt; Line breaks will always be visualized except when the
&lt;code&gt;wrapping&lt;/code&gt; property is set to &lt;code&gt;false&lt;/code&gt;. In addition, tabs and
whitespace can be preserved by setting the &lt;code&gt;renderWhitespace&lt;/code&gt; property
to &lt;code&gt;true&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the text to be displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables text wrapping.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrappingType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the type of text wrapping to be used (hyphenated or normal).

&lt;b&gt;Note:&lt;/b&gt; This property takes effect only when the &lt;code&gt;wrapping&lt;/code&gt;
property is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the horizontal alignment of the text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLines" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Limits the number of lines for wrapping texts.

&lt;b&gt;Note&lt;/b&gt;: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="renderWhitespace" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved by the browser.
Depending on wrapping property text will either only wrap on line breaks or wrap when necessary, and on line breaks.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TextArea" type="TextArea" />
  <xs:complexType name="TextArea">
    <xs:annotation>
      <xs:documentation>
A control that is used for multi-line input of text.
&lt;h3&gt;Overview&lt;/h3&gt;
The text area is used to enter multiple lines of text. When empty, it can hold a placeholder similar to an {@link sap.m.Input input}.
You can define the height and width of the text area and also determine specific behavior when handling long texts.
&lt;h3&gt;Structure&lt;/h3&gt;
Parameters that determine the size:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rows&lt;/code&gt; - Number of visible text lines (overruled by &lt;code&gt;height&lt;/code&gt;, if both are set)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cols&lt;/code&gt; - Number of visible characters per line line (overruled by &lt;code&gt;width&lt;/code&gt;, if both are set)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt; - Height of the control&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; - Width of the control&lt;/li&gt;
&lt;/ul&gt;
Parameters that determine the behavior:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;growing&lt;/code&gt; - The text area adjusts its size based on the content&lt;/li&gt;
&lt;li&gt;&lt;code&gt;growingMaxLines&lt;/code&gt; - Threshold for the &lt;code&gt;growing&lt;/code&gt; property (shouldn't exceed the screen size)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxLength&lt;/code&gt; - Maximum number of characters that can be entered in a text area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrapping&lt;/code&gt; - The way the entered text is wrapped by the control&lt;/li&gt;
&lt;li&gt;&lt;code&gt;showExceededText&lt;/code&gt; - Determines how text beyond the &lt;code&gt;maxLength&lt;/code&gt; length is handled&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to enter multiple lines of text.&lt;/li&gt;
&lt;li&gt;Always provide labels for a text area.&lt;/li&gt;
&lt;li&gt;A placeholder does not substitute a label.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;On smaller screens, you can scroll down the text area to see the entire text. To indicate that the text continues, the control shows only half of the last line.&lt;/li&gt;
&lt;li&gt;If you have a growing text area, have in mind that its maximum height should not exceed the height of the screen. If that is the case, the screen height is used instead.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;showExceededText&lt;/code&gt; is set to TRUE and you paste a longer text, all characters beyond the &lt;code&gt;maxLength&lt;/code&gt; limit are automatically selected.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;showExceededText&lt;/code&gt; is set to TRUE, the control will display a counter for the remaining characters.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="InputBase">
    <xs:attribute name="rows" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the number of visible text lines for the control.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;height&lt;/code&gt; property wins over the &lt;code&gt;rows&lt;/code&gt; property, if both are set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cols" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the visible width of the control, in average character widths.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;width&lt;/code&gt; property wins over the &lt;code&gt;cols&lt;/code&gt; property, if both are set.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the height of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum number of characters that the &lt;code&gt;value&lt;/code&gt; can be.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showExceededText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.

If set to &lt;code&gt;false&lt;/code&gt; the user is not allowed to enter more characters than what is set in the &lt;code&gt;maxLength&lt;/code&gt; property.
If set to &lt;code&gt;true&lt;/code&gt; the characters exceeding the &lt;code&gt;maxLength&lt;/code&gt; value are selected on paste and the counter below
the input field displays their number.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates how the control wraps the text, e.g. &lt;code&gt;Soft&lt;/code&gt;, &lt;code&gt;Hard&lt;/code&gt;, &lt;code&gt;Off&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueLiveUpdate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates when the &lt;code&gt;value&lt;/code&gt; property gets updated with the user changes. Setting it to &lt;code&gt;true&lt;/code&gt; updates the &lt;code&gt;value&lt;/code&gt; property whenever the user has modified the text shown on the text area.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growing" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates the ability of the control to automatically grow and shrink dynamically with its content.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;height&lt;/code&gt; property is ignored, if this property set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="growingMaxLines" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum number of lines that the control can grow.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="liveChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Is fired whenever the user has modified the text shown on the text area.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Tile" type="Tile" />
  <xs:complexType name="Tile">
    <xs:annotation>
      <xs:documentation>
A tile to be displayed in the tile container. Use this
tile as the base class for specialized tile implementations.
Use the renderer _addOuterClass methods to add a style class to the main
surface of the Tile. In this class set the background color, gradients
or background images.
Instead of implementing the default render method in the renderer, implement
your content HTML in the _renderContent method of the specialized tile.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="removable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Tap event is raised if the user taps or clicks the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TileContainer" type="TileContainer" />
  <xs:complexType name="TileContainer">
    <xs:annotation>
      <xs:documentation>
A container that arranges same-size tiles nicely on carousel pages.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="tiles" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the TileContainer in px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the height of the TileContainer in px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the TileContainer is editable so you can move, delete or add tiles.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="allowAdd" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tiles" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The Tiles to be displayed by the TileContainer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tileMove" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires if a Tile is moved.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tileDelete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires if a Tile is deleted in Edit mode.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tileAdd" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when a Tile is added.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TileContent" type="TileContent" />
  <xs:complexType name="TileContent">
    <xs:annotation>
      <xs:documentation>
This control is used within the GenericTile control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="footer" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The footer text of the tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="footerColor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The semantic color of the footer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="size" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Updates the size of the tile. If it is not set, then the default size is applied based on the device tile.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="unit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The percent sign, the currency symbol, or the unit of measure.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Disables control if true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="frameType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Frame types: 1x1, 2x1, and auto.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The switchable view that depends on the tile type.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TimePicker" type="TimePicker" />
  <xs:complexType name="TimePicker">
    <xs:annotation>
      <xs:documentation>
A single-field input control that enables the users to fill time related input fields.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;TimePicker&lt;/code&gt; control enables the users to fill time related input
fields using touch, mouse, or keyboard input.

&lt;h3&gt;Usage&lt;/h3&gt;

Use this control if you want the user to select a time. If you want the user to
select a duration (1 hour), use the {@link sap.m.Select} control instead.

The user can enter a date by:

&lt;ul&gt;&lt;li&gt;Using the &lt;code&gt;TimePicker&lt;/code&gt; dropdown that opens in a popup&lt;/li&gt;
&lt;li&gt;Typing it in directly in the input field&lt;/li&gt;&lt;/ul&gt;

On app level, there are two options to provide value for the
&lt;code&gt;TimePicker&lt;/code&gt; - as a string to the &lt;code&gt;value&lt;/code&gt; property or as a
JavaScript Date object to the &lt;code&gt;dateValue&lt;/code&gt; property (only one of these
properties should be used at a time):

&lt;ul&gt;&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if you want to bind the
&lt;code&gt;TimePicker&lt;/code&gt; to a model using the
&lt;code&gt;sap.ui.model.type.Time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;value&lt;/code&gt; property if the date is provided as a string from
the backend or inside the app (for example, as ABAP type DATS field)&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;dateValue&lt;/code&gt; property if the date is already provided as a
JavaScript Date object or you want to work with a JavaScript Date object.
Use &lt;code&gt;dateValue&lt;/code&gt; as a helper property to easily obtain the hours, minutes and seconds
of the chosen time. Although possible to bind it, the recommendation is to not to do it.
When binding is needed, use &lt;code&gt;value&lt;/code&gt; property instead&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Formatting&lt;/h3&gt;

All formatting and parsing of values from and to strings is done using the
{@link sap.ui.core.format.DateFormat}. If a value is entered by typing it into
the input field, it must fit to the used time format and locale.

Supported format options are pattern-based on Unicode LDML Date Format notation.
See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}

A time format must be specified, otherwise the default "HH:mm:ss a" will be
used. For example, if the &lt;code&gt;valueFormat&lt;/code&gt; is "HH-mm-ss a", the
&lt;code&gt;displayFormat&lt;/code&gt; is "HH:mm:ss a", and the used locale is English, a
valid value string is "10-30-15 AM", which leads to an output of "10:30:15 AM".

If no placeholder is set to the &lt;code&gt;TimePicker&lt;/code&gt;, the used
&lt;code&gt;displayFormat&lt;/code&gt; is displayed as a placeholder. If another placeholder
is needed, it must be set.

&lt;b&gt;Note:&lt;/b&gt; If the string does NOT match the &lt;code&gt;displayFormat&lt;/code&gt;
(from user input) or the &lt;code&gt;valueFormat&lt;/code&gt; (on app level), the
{@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
locale settings. For more information, see the respective documentation in the
API Reference.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The &lt;code&gt;TimePicker&lt;/code&gt; is responsive and fully adapts to all device types.
For larger screens, such as tablet or desktop, it opens as a popover. For
mobile devices, it opens in full screen.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DateTimeField">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="rules" />
      <xs:element name="_picker" />
    </xs:sequence>
    <xs:attribute name="localeId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the locale used to parse string values representing time.

Determines the locale, used to interpret the string, supplied by the
&lt;code&gt;value&lt;/code&gt; property.

Example: AM in the string "09:04 AM" is locale (language) dependent.
The format comes from the browser language settings if not set explicitly.
Used in combination with 12 hour &lt;code&gt;displayFormat&lt;/code&gt; containing 'a', which
stands for day period string.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Displays the text of the general picker label and is read by screen readers.
It is visible only on phone.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minutesStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the minutes slider step. If step is less than 1, it will be automatically converted back to 1.
The minutes slider is populated only by multiples of the step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondsStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the seconds slider step. If step is less than 1, it will be automatically converted back to 1.
The seconds slider is populated only by multiples of the step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="placeholderSymbol" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines a placeholder symbol. Shown at the position where there is no user input yet.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mask" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Mask defined by its characters type (respectively, by its length).
You should consider the following important facts:
1. The mask characters normally correspond to an existing rule (one rule per unique char).
Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule
for digits, has the characters '2' and '0' as immutable).
2. Adding a rule corresponding to the &lt;code&gt;placeholderSymbol&lt;/code&gt; is not recommended and would lead to an unpredictable behavior.
3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable.
Use the double escape '^^' if you want to make use of the escape character as an immutable one.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maskMode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether the mask is enabled. When disabled, there are no restrictions and
validation for the user and no placeholders are displayed.

&lt;b&gt;Note:&lt;/b&gt; A disabled mask does not reset any validation rules that are already
set. You can update the &lt;code&gt;mask&lt;/code&gt; property and add new &lt;code&gt;rules&lt;/code&gt;
while it is disabled. When &lt;code&gt;maskMode&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt; again,
the &lt;code&gt;rules&lt;/code&gt; and the updated &lt;code&gt;mask&lt;/code&gt; will be applied.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="support2400" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Allows to set a value of 24:00, used to indicate the end of the day.
Works only with HH or H formats. Don't use it together with am/pm.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rules" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A list of validation rules (one rule per mask character).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_picker" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation that contains the inner _picker pop-up.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TimePickerSlider" type="TimePickerSlider" />
  <xs:complexType name="TimePickerSlider">
    <xs:annotation>
      <xs:documentation>
A picker list control used inside a {@link sap.m.TimePicker} to choose a value.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="_arrowUp" />
      <xs:element name="_arrowDown" />
    </xs:sequence>
    <xs:attribute name="selectedValue" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The key of the currently selected value of the slider.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isCyclic" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the slider supports cyclic scrolling.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="label" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the descriptive text for the slider, placed as a label above it.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isExpanded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether the slider is currently expanded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aggregation that contains the items of the slider.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_arrowUp" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aggregation that contains the up arrow.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_arrowDown" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aggregation that contains the down arrow.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="expanded" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the slider is expanded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collapsed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when the slider is collapsed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TimePickerSliders" type="TimePickerSliders" />
  <xs:complexType name="TimePickerSliders">
    <xs:annotation>
      <xs:documentation>
A picker list container control used inside the {@link sap.m.TimePicker} or standalone to hold all the sliders.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="_columns" />
    </xs:sequence>
    <xs:attribute name="localeId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the locale used to parse string values representing time.

Determines the locale, used to interpret the string, supplied by the
&lt;code&gt;value&lt;/code&gt; property.

Example: AM in the string "09:04 AM" is locale (language) dependent.
The format comes from the browser language settings if not set explicitly.
Used in combination with 12 hour &lt;code&gt;displayFormat&lt;/code&gt; containing 'a', which
stands for day period string.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="displayFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the time &lt;code&gt;displayFormat&lt;/code&gt; of the sliders.
The &lt;code&gt;displayFormat&lt;/code&gt; comes from the browser language settings if not set explicitly.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="labelText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text of the picker label.

It is read by screen readers. It is visible only on phone.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minutesStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the minutes slider step. If step is less than 1, it will be automatically converted back to 1.
The minutes slider is populated only by multiples of the step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="secondsStep" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the seconds slider step. If step is less than 1, it will be automatically converted back to 1.
The seconds slider is populated only by multiples of the step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the width of the container.
The minimum width is 320px.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the height of the container. If percentage value is used the parent container should have
specified height
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the value of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="valueFormat" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the format of the &lt;code&gt;value&lt;/code&gt; property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="support2400" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Allows to set a value of 24:00, used to indicate the end of the day.
Works only with HH or H formats. Don't use it together with am/pm.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_columns" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Holds the inner sliders.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the value is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Title" type="Title" />
  <xs:complexType name="Title">
    <xs:annotation>
      <xs:documentation>
A simple, large-sized text with explicit header / title semantics.

&lt;h3&gt;Overview&lt;/h3&gt;
The &lt;code&gt;Title&lt;/code&gt; control is a simple, large-sized text containing additional
semantic information for accessibility purposes.

As of version 1.52, you can truncate or wrap long titles if the screen is narrower
than the full title by using the with the use of the &lt;code&gt;wrapping&lt;/code&gt;
property.

As of version 1.60, you can hyphenate the label's text with the use of the
&lt;code&gt;wrappingType&lt;/code&gt; property. For more information, see
{@link topic:6322164936f047de941ec522b95d7b70 Text Controls Hyphenation}.

&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If you want to set the title above a table or form.&lt;/li&gt;
&lt;li&gt;If you want to show text in the page header.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If the text is inside a text block.&lt;/li&gt;
&lt;li&gt;If The text is inside a form element.&lt;/li&gt;
&lt;/ul&gt;
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the text which should be displayed as a title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="level" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the semantic level of the title.
This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
Depending on this setting either an HTML h1-h6 element is used or when using level &lt;code&gt;Auto&lt;/code&gt; no explicit level information is written (HTML5 header element).
This property does not influence the style of the control. Use the property &lt;code&gt;titleStyle&lt;/code&gt; for this purpose instead.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleStyle" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the style of the title.
When using the &lt;code&gt;Auto&lt;/code&gt; styling, the appearance of the title depends on the current position of the title (e.g. inside a &lt;code&gt;Toolbar&lt;/code&gt;).
This default behavior can be overridden by setting a different style explicitly.
The actual appearance of the title and the different styles always depends on the theme being used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textAlign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the alignment of the text within the title. &lt;b&gt;Note:&lt;/b&gt; This property only has an effect if the overall width of the title control is
larger than the displayed text.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrapping" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables text wrapping.
&lt;b&gt;Note:&lt;/b&gt; Wrapping must only be activated if the surrounding container allows flexible heights.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrappingType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the type of text wrapping to be used (hyphenated or normal).

&lt;b&gt;Note:&lt;/b&gt; This property takes effect only when the &lt;code&gt;wrapping&lt;/code&gt;
property is set to &lt;code&gt;true&lt;/code&gt;.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ToggleButton" type="ToggleButton" />
  <xs:complexType name="ToggleButton">
    <xs:annotation>
      <xs:documentation>
An enhanced {@link sap.m.Button} that can be toggled between pressed and normal state.

Clicking or tapping a &lt;code&gt;ToggleButton&lt;/code&gt; changes its state to &lt;code&gt;pressed&lt;/code&gt;. The button returns to
its initial state when the user clicks or taps it again.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Button">
    <xs:attribute name="pressed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The property is ÔÇ£trueÔÇØ when the control is toggled. The default state of this property is "false".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user clicks or taps on the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Token" type="Token" />
  <xs:complexType name="Token">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;
Tokens are small items of information (similar to tags) that mainly serve to visualize previously selected items.
Tokens are manipulated by a {@link sap.m.Tokenizer Tokenizer}.
&lt;h3&gt;Structure&lt;/h3&gt;
The tokens store single text items or sometimes key-value pairs, such as "John Miller (ID1234567)".
Each token also contains a delete icon, which is invisible if the token is in edit mode.

&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
Tokens can only be used with the Tokenizer as a container.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="deleteIcon" />
    </xs:sequence>
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates the current selection status of the token.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="key" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Key of the token.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="text" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Displayed text of the token.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates the editable status of the token. If it is set to &lt;code&gt;true&lt;/code&gt;, token displays a delete icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="textDirection" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="editableParent" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates the editable status of the token's parent (Tokenizer). If it is set to &lt;code&gt;true&lt;/code&gt;, the ARIA attributes of the token are updated accordingly.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deleteIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The delete icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired if the user clicks the token's delete icon.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the user clicks on the token.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="select" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the token gets selected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deselect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired when the token gets deselected.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Tokenizer" type="Tokenizer" />
  <xs:complexType name="Tokenizer">
    <xs:annotation>
      <xs:documentation>
&lt;h3&gt;Overview&lt;/h3&gt;
A tokenizer is a container for {@link sap.m.Token Tokens}. It also handles all actions associated with the tokens like adding, deleting, selecting and editing.
&lt;h3&gt;Structure&lt;/h3&gt;
The tokens are stored in the &lt;code&gt;tokens&lt;/code&gt; aggregation.
The tokenizer can determine, by setting the &lt;code&gt;editable&lt;/code&gt; property, whether the tokens in it are editable.
Still the Token itself can determine if it is &lt;code&gt;editable&lt;/code&gt;. This allows you to have non-editable Tokens in an editable Tokenizer.

&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
The tokenizer can only be used as part of {@link sap.m.MultiComboBox MultiComboBox},{@link sap.m.MultiInput MultiInput} or {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog ValueHelpDialog}
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="tokens" />
      <xs:element name="_tokensInfo" />
    </xs:sequence>
    <xs:attribute name="editable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
true if tokens shall be editable otherwise false
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the Tokenizer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the maximum width of the Tokenizer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokens" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
the currently displayed tokens
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_tokensInfo" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden text used for accesibility
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokenChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
fired when the tokens aggregation changed (add / remove token)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tokenUpdate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the tokens aggregation changed due to a user interaction (add / remove token)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Toolbar" type="Toolbar" />
  <xs:complexType name="Toolbar">
    <xs:annotation>
      <xs:documentation>
Horizontal container most commonly used to display buttons, labels, selects and various
other input controls.

&lt;h3&gt;Overview&lt;/h3&gt;

By default, the &lt;code&gt;Toolbar&lt;/code&gt; items are shrinkable if they have percent-based width
(for example, {@link sap.m.Input} and {@link sap.m.Slider}) or implement the
{@link sap.ui.core.IShrinkable} interface (for example, {@link sap.m.Text} and {@link sap.m.Label}).
This behavior can be overridden by providing {@link sap.m.ToolbarLayoutData} for the &lt;code&gt;Toolbar&lt;/code&gt; items.

&lt;b&gt;Note:&lt;/b&gt; It is recommended that you use {@link sap.m.OverflowToolbar} over &lt;code&gt;sap.m.Toolbar&lt;/code&gt;,
unless you want to avoid the overflow behavior in favor of shrinking.

&lt;h3&gt;Usage&lt;/h3&gt;

You can add a visual separator between the preceding and succeeding {@link sap.m.Toolbar} item
with the use of the {@link sap.m.ToolbarSeparator}. The separator is theme dependent and can be
a padding, a margin or a line.

To add horizontal space between the &lt;code&gt;Toolbar&lt;/code&gt; items, use the {@link sap.m.ToolbarSpacer}.
You can define the width of the horizontal space or make it flexible to cover the remaining space
between the &lt;code&gt;Toolbar&lt;/code&gt; items (for example, to to push an item to the edge of the &lt;code&gt;Toolbar&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; {@link sap.m.ToolbarLayoutData} should not be used together with {@link sap.m.ToolbarSpacer}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the control.
By default, Toolbar is a block element. If the width is not explicitly set, the control will assume its natural size.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the enabled property of all controls defined in the content aggregation.
Note: This property does not apply to the toolbar itself, but rather to its items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the height of the control. By default, the &lt;code&gt;height&lt;/code&gt;
property depends on the used theme and the &lt;code&gt;design&lt;/code&gt; property.

&lt;b&gt;Note:&lt;/b&gt; It is not recommended to use this property if the
&lt;code&gt;sapMTBHeader-CTX&lt;/code&gt; class is used
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="design" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the toolbar design.

&lt;b&gt;Note:&lt;/b&gt; Design settings are theme-dependent. They also determine the default height of the toolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="style" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the visual style of the &lt;code&gt;Toolbar&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The visual styles are theme-dependent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of the toolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the user clicks on the toolbar, if the Active property is set to "true".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ToolbarLayoutData" type="ToolbarLayoutData" />
  <xs:complexType name="ToolbarLayoutData">
    <xs:annotation>
      <xs:documentation>
Defines layout data for the {@link sap.m.Toolbar} items.

&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;ToolbarLayoutData&lt;/code&gt; should not be used together with {@link sap.m.ToolbarSpacer}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:LayoutData">
    <xs:attribute name="shrinkable" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.

Note: Nested layout controls should not be shrinkable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the minimum width of the toolbar item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxWidth" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the maximum width of the toolbar item.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ToolbarSeparator" type="ToolbarSeparator" />
  <xs:complexType name="ToolbarSeparator">
    <xs:annotation>
      <xs:documentation>
Creates a visual separator (theme dependent: padding, margin, line) between the
preceding and succeeding {@link sap.m.Toolbar} item.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ToolbarSpacer" type="ToolbarSpacer" />
  <xs:complexType name="ToolbarSpacer">
    <xs:annotation>
      <xs:documentation>
Adds horizontal space between the items used within a {@link sap.m.Toolbar}.

&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;ToolbarSpacer&lt;/code&gt; should not be used together with {@link sap.m.ToolbarLayoutData}.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the width of the horizontal space.
Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
This feature can be used to push next item to the edge of the toolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Tree" type="Tree" />
  <xs:complexType name="Tree">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;Tree&lt;/code&gt; control provides a tree structure for displaying data in a hierarchy.
&lt;b&gt;Note:&lt;/b&gt; Growing feature is not supported by &lt;code&gt;Tree&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListBase">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="TreeItemBase" type="TreeItemBase" />
  <xs:complexType name="TreeItemBase">
    <xs:annotation>
      <xs:documentation>
The &lt;code&gt;sap.m.TreeItemBase&lt;/code&gt; contains the basic features of all specific tree items.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ListItemBase">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="UploadCollection" type="UploadCollection" />
  <xs:complexType name="UploadCollection">
    <xs:annotation>
      <xs:documentation>
This control allows you to upload single or multiple files from your devices (desktop, tablet or phone) and attach them to the application.

The consuming application needs to take into account that the consistency checks of the model during the upload of the file need to be performed, for example, if the user is editing or deleting a file.
&lt;br/&gt; As of version 1.62, there is an {@link sap.m.upload.UploadSet} control available that is based on this control.
{@link sap.m.upload.UploadSet} provides enhanced handling of headers and requests, unified behavior of instant
and deferred uploads, as well as improved progress indication.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
      <xs:element name="headerParameters" />
      <xs:element name="parameters" />
      <xs:element name="toolbar" />
      <xs:element name="infoToolbar" />
      <xs:element name="_list" />
      <xs:element name="_noDataIcon" />
      <xs:element name="_dragDropIcon" />
      <xs:element name="_dragDropText" />
    </xs:sequence>
    <xs:attribute name="fileType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the allowed file types for the upload.
The chosen files will be checked against an array of file types.
If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maximumFilenameLength" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the maximum length of a file name.
If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maximumFileSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
This property is not supported by Internet Explorer 8 and 9.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mimeType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the allowed MIME types of files to be uploaded.
The chosen files will be checked against an array of MIME types.
If at least one file does not fit the MIME type requirements, the upload is prevented.
This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="multiple" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Lets the user select multiple files from the same folder and then upload them.
Internet Explorer 8 and 9 do not support this property.
Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.

If multiple property is set to false, the control shows an error message if more than one file is chosen for drag &amp; drop.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noDataText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Allows you to set your own text for the 'No data' text label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="noDataDescription" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Allows you to set your own text for the 'No data' description label.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sameFilenameAllowed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showSeparators" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines whether separators are shown between list items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uploadEnabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables the upload of a file.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uploadUrl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the URL where the uploaded files have to be stored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="instantUpload" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="numberOfAttachmentsText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Sets the title text in the toolbar of the list of attachments.
To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
If a new title is set, the default is deactivated.
The default value is set to language-dependent "Attachments (n)".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mode" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None.
In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uploadButtonInvisible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If true, the button used for uploading files is invisible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="terminationEnabled" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If true, the button that is used to terminate the instant file upload gets visible.
The button normally appears when a file is being uploaded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Uploaded items.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="headerParameters" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the header parameters for the FileUploader that are submitted only with XHR requests.
Header parameters are not supported by Internet Explorer 8 and 9.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="parameters" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the parameters for the FileUploader that are rendered as a hidden input field.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="toolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the toolbar.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="infoToolbar" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the info toolbar for filtering information. Sorting information will not displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_list" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the list in controls tree.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_noDataIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The icon is displayed in no data page
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_dragDropIcon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the drag and drop icon of indicator.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_dragDropText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Internal aggregation to hold the drag and drop text of indicator.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="change" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control.
Limitation: parameters and headerParameters are not supported by Internet Explorer 9.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileDeleted" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filenameLengthExceed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileRenamed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the file name is changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileSizeExceed" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application).
This event is not supported by Internet Explorer 9.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="typeMissmatch" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uploadComplete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered as soon as the upload request is completed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uploadTerminated" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered as soon as the upload request was terminated by the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beforeUploadStarts" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The event is triggered before the actual upload starts. An event is fired per file. All the necessary header parameters should be set here.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selectionChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fires when selection is changed via user interaction inside the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="UploadCollectionItem" type="UploadCollectionItem" />
  <xs:complexType name="UploadCollectionItem">
    <xs:annotation>
      <xs:documentation>
Defines a structure of the element of the 'items' aggregation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="attributes" />
      <xs:element name="_propertyAttributes" />
      <xs:element name="statuses" />
      <xs:element name="markers" />
    </xs:sequence>
    <xs:attribute name="contributor" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the name of the user who uploaded the file.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="documentId" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies a unique identifier of the file (created by the application).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileName" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the name of the uploaded file.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fileSize" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the size of the uploaded file (in megabytes).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="mimeType" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the MIME type of the file.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="thumbnailUrl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the URL where the thumbnail of the file is located. This can also be an SAPUI5 icon URL.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="uploadedDate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the date on which the file was uploaded.
The application has to define the date format.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="url" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the URL where the file is located.
If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableEdit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables/Disables the Edit button.
If the value is true, the Edit button is enabled and the edit function can be used.
If the value is false, the edit function is not available.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableDelete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables/Disables the Delete button.
If the value is true, the Delete button is enabled and the delete function can be used.
If the value is false, the delete function is not available.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleEdit" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Show/Hide the Edit button.
If the value is true, the Edit button is visible.
If the value is false, the Edit button is not visible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visibleDelete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Show/Hide the Delete button.
If the value is true, the Delete button is visible.
If the value is false, the Delete button is not visible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ariaLabelForPicture" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Aria label for the icon (or for the image).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the selected state of the UploadCollectionItem.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="attributes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Attributes of an uploaded item, for example, 'Uploaded By', 'Uploaded On', 'File Size'
attributes are displayed after an item has been uploaded.
Additionally, the Active property of sap.m.ObjectAttribute is supported.&lt;br/&gt;
Note that if one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition to this attribute, two attributes with the same title
are displayed as these properties get displayed as an attribute.
Example: An application passes the property ÔÇÿcontributorÔÇÖ with the value ÔÇÿAÔÇÖ and the aggregation attributes ÔÇÿcontributorÔÇÖ: ÔÇÿBÔÇÖ. As a result, the attributes
ÔÇÿcontributorÔÇÖ:ÔÇÖAÔÇÖ and ÔÇÿcontributorÔÇÖ:ÔÇÖBÔÇÖ are displayed. To make sure the title does not appear twice, check if one of the properties is filled.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_propertyAttributes" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Hidden aggregation for the attributes created from the deprecated properties uploadedDate, contributor and fileSize
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="statuses" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Statuses of an uploaded item
Statuses will be displayed after an item has been uploaded
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="markers" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Markers of an uploaded item
Markers will be displayed after an item has been uploaded
But not in Edit mode
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="press" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is triggered when the user presses the filename link.
If this event is provided, it overwrites the default behavior of opening the file.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deletePress" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
When a deletePress event handler is attached to the item and the user presses the delete button, this event is triggered.
If this event is triggered, it overwrites the default delete behavior of UploadCollection and the fileDeleted event of UploadCollection is not triggered.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="UploadCollectionParameter" type="UploadCollectionParameter" />
  <xs:complexType name="UploadCollectionParameter">
    <xs:annotation>
      <xs:documentation>
Defines a structure of the element of the 'parameters' aggregation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Element">
    <xs:attribute name="name" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the name of the parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the value of the parameter.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="UploadCollectionToolbarPlaceholder" type="UploadCollectionToolbarPlaceholder" />
  <xs:complexType name="UploadCollectionToolbarPlaceholder">
    <xs:annotation>
      <xs:documentation>
Used to create a customizable toolbar for the UploadCollection.
A FileUploader instance is required in the toolbar and will be placed by the application.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="VBox" type="VBox" />
  <xs:complexType name="VBox">
    <xs:annotation>
      <xs:documentation>
The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control, as it is just a specialized FlexBox control.&lt;br/&gt;
&lt;br/&gt;
&lt;b&gt;Note:&lt;/b&gt; Be sure to check the &lt;code&gt;renderType&lt;/code&gt; setting to avoid issues due to browser inconsistencies.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="FlexBox">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ViewSettingsCustomItem" type="ViewSettingsCustomItem" />
  <xs:complexType name="ViewSettingsCustomItem">
    <xs:annotation>
      <xs:documentation>
The ViewSettingsCustomItem control is used for modelling custom filters in the ViewSettingsDialog.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ViewSettingsItem">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="customControl" />
    </xs:sequence>
    <xs:attribute name="filterCount" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customControl" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
A custom control for the filter field. It can be used for complex filtering mechanisms.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ViewSettingsCustomTab" type="ViewSettingsCustomTab" />
  <xs:complexType name="ViewSettingsCustomTab">
    <xs:annotation>
      <xs:documentation>
The ViewSettingsCustomTab control is used for adding custom tabs in the ViewSettingsDialog.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
    </xs:sequence>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Custom tab button icon
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Custom tab title
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of this Custom tab
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ViewSettingsDialog" type="ViewSettingsDialog" />
  <xs:complexType name="ViewSettingsDialog">
    <xs:annotation>
      <xs:documentation>
Helps the user to sort, filter, or group data within a (master) {@link sap.m.List} or a
{@link sap.m.Table}. The dialog is triggered by icon buttons in the table toolbar. Each
button shows a dropdown list icon.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;ViewSettingsDialog&lt;/code&gt; is a composite control,
consisting of a modal {@link sap.m.Popover} and several internal lists.
There are three different tabs (Sort, Group, Filter) in the dialog that can be
activated by filling the respective associations. If only one association is
filled, the other tabs are automatically hidden. The selected options can be used
to create sorters and filters for the table.

&lt;b&gt;Note:&lt;/b&gt; If the app does not offer all three sorting, filtering, and grouping
operations, but only one of these (such as sort), we recommend placing the
icon button directly in the toolbar. Do not place sort, filter, or group buttons in
the footer toolbar if they refer to a table. Place group, sort, and filter buttons
in the footer toolbar if they refer to a master list.

&lt;b&gt;Note:&lt;/b&gt; Reset button, when used in &lt;code&gt;ViewSettingsDialog&lt;/code&gt; without custom tabs,
is enabled when there are some Filters or presetFilters selected as well as there are changes
in Sort by, Sort order, Group By or Group order values compared to initial state of the dialog,
and disabled, if there are no changes or filters set. If the &lt;code&gt;ViewSettingsDialog&lt;/code&gt;
have one or more custom tabs, the Reset button is always enabled, because there is no way
to determine the initial state of the custom tabs content and compare to their current state
in order to determine enable/disable state of the Reset button.

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;i&gt;When to use?&lt;/i&gt;
&lt;ul&gt;&lt;li&gt;If you need to allow the user to sort line items in a manageable list or
table (up to 20 columns)&lt;/li&gt;
&lt;li&gt;If you need to offer custom filter settings in a manageable list or table
(up to 20 columns)&lt;/li&gt;
&lt;li&gt;If you need to allow the user to group line items in a manageable list or
table (up to 20 columns)&lt;/li&gt;&lt;/ul&gt;

&lt;i&gt;When not to use?&lt;/i&gt;
&lt;ul&gt;&lt;li&gt;If you have complex tables (more than 20 columns)&lt;/li&gt;
&lt;li&gt;If you need to rearrange columns within your table (use the
{@link sap.m.TablePersoDialog} instead)&lt;/li&gt;
&lt;li&gt;If you need very specific sort, filter, or column sorting options within
complex tables (use the {@link sap.m.P13nDialog} instead)&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The popover dialog appears as a modal window on desktop and tablet screen sizes,
but full screen on smartphones.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="sortItems" />
      <xs:element name="groupItems" />
      <xs:element name="filterItems" />
      <xs:element name="presetFilterItems" />
      <xs:element name="customTabs" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sortDescending" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the sort order is descending or ascending (default).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupDescending" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines whether the group order is descending or ascending (default).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterSearchOperator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Provides a string filter operator which is used when the user searches items in filter details page.
Possible operators are: &lt;code&gt;AnyWordStartsWith&lt;/code&gt;, &lt;code&gt;Contains&lt;/code&gt;, &lt;code&gt;StartsWith&lt;/code&gt;, &lt;code&gt;Equals&lt;/code&gt;.
This property will be ignored if a custom callback is provided through &lt;code&gt;setFilterSearchCallback&lt;/code&gt; method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="titleAlignment" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Specifies the Title alignment (theme specific).
If set to &lt;code&gt;TitleAlignment.Auto&lt;/code&gt;, the Title will be aligned as it is set in the theme (if not set, the default value is &lt;code&gt;center&lt;/code&gt;);
Other possible values are &lt;code&gt;TitleAlignment.Start&lt;/code&gt; (left or right depending on LTR/RTL), and &lt;code&gt;TitleAlignment.Center&lt;/code&gt; (centered)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sortItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The list of items with key and value that can be sorted over (for example, a list of columns for a table).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="groupItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The list of items with key and value that can be grouped on (for example, a list of columns for a table).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The list of items with key and value that can be filtered on (for example, a list of columns for a table). A filterItem is associated with one or more detail filters.

&lt;b&gt;Note:&lt;/b&gt; It is recommended to use the &lt;code&gt;sap.m.ViewSettingsFilterItem&lt;/code&gt; as it fits best at the filter page.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="presetFilterItems" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The list of preset filter items with key and value that allows the selection of more complex or custom filters.
These entries are displayed at the top of the filter tab.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customTabs" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The list of all the custom tabs.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="confirm" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Note:&lt;/b&gt; Custom tabs are not converted to event parameters automatically. For custom tabs, you have to read the state of your controls inside the callback of this event.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="cancel" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="resetFilters" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Called when the filters are being reset.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reset" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Called when the Reset button is pressed. It can be used to set the state of custom tabs.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterDetailPageOpened" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Fired when the filter detail page is opened.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ViewSettingsFilterItem" type="ViewSettingsFilterItem" />
  <xs:complexType name="ViewSettingsFilterItem">
    <xs:annotation>
      <xs:documentation>
A ViewSettingsFilterItem control is used for modelling filter behaviour in the ViewSettingsDialog.
It is derived from a core Item, but does not support the base class properties like textDirection and enabled.
Setting these properties will not have any effects.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ViewSettingsItem">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="items" />
    </xs:sequence>
    <xs:attribute name="multiSelect" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
If set to (true), multi selection will be allowed for the items aggregation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="items" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Items with key and value that are logically grouped under this filter item.
They are used to display filter details in the ViewSettingsDialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="filterDetailItemsAggregationChange" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Let the outside world know that the filter detail aggregation was changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="ViewSettingsItem" type="ViewSettingsItem" />
  <xs:complexType name="ViewSettingsItem">
    <xs:annotation>
      <xs:documentation>
ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.
It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects.
Apps should use the core Item's property &lt;code&gt;key/&lt;/code&gt; and provide a unique value for it. Not providing a key
may lead to unexpected behavior of the sap.m.ViewSettingsDialog.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="selected" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="itemPropertyChanged" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Let the outside world know that some of its properties has changed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="VisibleItem" type="VisibleItem" />
  <xs:complexType name="VisibleItem">
    <xs:annotation>
      <xs:documentation>
VisibleItem is an item enhanced with a visible property.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Item">
    <xs:attribute name="visible" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines if the item is visible.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="Wizard" type="Wizard" />
  <xs:complexType name="Wizard">
    <xs:annotation>
      <xs:documentation>
Enables users to accomplish a single goal which consists of multiple dependable sub-tasks.
&lt;h3&gt;Overview&lt;/h3&gt;
The sap.m.Wizard helps users complete a complex and unfamiliar task by dividing it into sections and guiding the user through it.
The wizard has two main areas - a navigation area at the top showing the step sequence and a content area below it.
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;h4&gt;Navigation Area&lt;/h4&gt;
The top most area of the wizard is occupied by the navigation area. It shows the sequence of {@link sap.m.WizardStep wizard steps}.
&lt;ul&gt;
&lt;li&gt;The minimum number of steps is 3 and the maximum is 8 and are stored in the &lt;code&gt;steps&lt;/code&gt; aggregation.&lt;/li&gt;
&lt;li&gt;Steps can be branching depending on choices the user made in their input - this is set by the &lt;code&gt;enableBranching&lt;/code&gt; property. &lt;/li&gt;
&lt;li&gt;Steps can have different visual representations - numbers or icons. You can add labels for better readability &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Content&lt;/h4&gt;
The content occupies the main part of the page. It can hold any type of input controls. The content is kept in {@link sap.m.WizardStep wizard steps}.
&lt;h4&gt;Next Step Button&lt;/h4&gt;
The next step button is displayed below the content. It can be hidden by setting &lt;code&gt;showNextButton&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and displayed, for example,
only after the user has filled all mandatory fields.
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use:&lt;/h4&gt;
When the user has to accomplish a long or unfamiliar task.
&lt;h4&gt;When not to use:&lt;/h4&gt;
When the user has to accomplish a routine task that is clear and familiar.
When the task has only two steps or less.
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
On mobile devices the steps in the StepNavigator are grouped together and overlap. Tapping on them will show a popover to select the step to navigate to.

When using the sap.m.Wizard in SAP Quartz theme, the breakpoints and layout paddings could be determined by the container's width.
To enable this concept and add responsive paddings to the navigation area and to the content of the Wizard control, you may add the following classes depending on your use case:
&lt;code&gt;sapUiResponsivePadding--header&lt;/code&gt;, &lt;code&gt;sapUiResponsivePadding--content&lt;/code&gt;.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="steps" />
      <xs:element name="_progressNavigator" />
      <xs:element name="_nextButton" />
    </xs:sequence>
    <xs:attribute name="width" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the width of the Wizard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the height of the Wizard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="showNextButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Controls the visibility of the next button. The developers can choose to control the flow of the
steps either through the API (with &lt;code&gt;nextStep&lt;/code&gt; and &lt;code&gt;previousStep&lt;/code&gt; methods) or let the user click
the next button, and control it with &lt;code&gt;validateStep&lt;/code&gt; or &lt;code&gt;invalidateStep&lt;/code&gt; methods.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="finishButtonText" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Changes the text of the finish button for the last step.
This property can be used only if &lt;code&gt;showNextButton&lt;/code&gt; is set to true.
By default the text of the button is "Review".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enableBranching" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Enables the branching functionality of the Wizard.
Branching gives the developer the ability to define multiple routes a user
is able to take based on the input in the current step.
It is up to the developer to programmatically check for what is the input in the
current step and set a concrete next step amongst the available subsequent steps.
Note: If this property is set to false, &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;subSequentSteps&lt;/code&gt;
associations of the WizardStep control are ignored.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="backgroundDesign" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This property is used to set the background color of a Wizard content.
The &lt;code&gt;Standard&lt;/code&gt; option with the default background color is used, if not specified.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="steps" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The wizard steps to be included in the content of the control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_progressNavigator" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The progress navigator for the wizard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_nextButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The next button for the wizard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stepActivate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The StepActivated event is fired every time a new step is activated.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="complete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The complete event is fired when the user clicks the finish button of the Wizard.
The finish button is only available on the last step of the Wizard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="WizardProgressNavigator" type="WizardProgressNavigator" />
  <xs:complexType name="WizardProgressNavigator">
    <xs:annotation>
      <xs:documentation>
The WizardProgressNavigator is used mainly for displaying the number of steps in the Wizard control.
It provides a way to navigate between those steps by clicking on each separate step.
Note: This is a private control that is instantiated and controlled by the Wizard control.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="WizardStep" type="WizardStep" />
  <xs:complexType name="WizardStep">
    <xs:annotation>
      <xs:documentation>
A container control used to aggregate user input controls as part of an sap.m.Wizard.
&lt;h3&gt;Overview&lt;/h3&gt;
WizardStep gives the developer the ability to validate, invalidate the step and define subsequent steps.
The WizardStep control control is supposed to be used only as an aggregation of the {@link sap.m.Wizard Wizard} control,
and should not be used as a standalone one.
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Each wizard step has a title. Additionally it can have an icon.&lt;/li&gt;
&lt;li&gt;Each wizard step can be validated by setting the &lt;code&gt;validated&lt;/code&gt; property. This action will trigger the rendering of the Next step button.&lt;/li&gt;
&lt;li&gt;If the execution needs to branch after a given step, you should set all possible next steps in the &lt;code&gt;subsequentSteps&lt;/code&gt; aggregation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="n0:Control">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="content" />
      <xs:element name="_nextButton" />
    </xs:sequence>
    <xs:attribute name="title" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the title of the step.
The title is visualized in the Wizard control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="icon" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Determines the icon that is displayed for this step.
The icon is visualized in the progress navigation part of the Wizard control.
&lt;b&gt;Note:&lt;/b&gt; In order for the icon to be displayed, each step in the Wizard should have
this property defined, otherwise the default numbering will be displayed.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validated" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether or not the step is validated.
When a step is validated a Next button is visualized in the Wizard control.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="optional" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
Indicates whether or not the step is optional.
When a step is optional an "(Optional)" label is displayed under the step's title.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="content" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The content of the Wizard Step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="_nextButton" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
The next button of the Wizard Step.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="complete" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired after the user presses the Next button in the Wizard,
or on &lt;code&gt;nextStep&lt;/code&gt; method call from the app developer.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="activate" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
This event is fired on next step activation from the Wizard.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:extension>
</xs:complexContent>
  </xs:complexType>
  <xs:element name="BarInAnyContentEnabler" type="BarInAnyContentEnabler" />
  <xs:complexType name="BarInAnyContentEnabler">
    <xs:annotation>
      <xs:documentation>
Helper Class for implementing additional contexts of the Bar.
e.g. in sap.m.Dialog
      </xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:element name="CharArray" type="CharArray" />
  <xs:complexType name="CharArray">
  </xs:complexType>
  <xs:element name="TestRules" type="TestRules" />
  <xs:complexType name="TestRules">
  </xs:complexType>
  <xs:element name="StringFilter" type="StringFilter" />
  <xs:complexType name="StringFilter">
  </xs:complexType>
</xs:schema>
